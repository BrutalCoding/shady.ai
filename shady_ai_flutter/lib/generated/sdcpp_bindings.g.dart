// ignore_for_file: deprecated_member_use

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to Stable Diffusion
class sdcpp {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  sdcpp(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  sdcpp.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Int32> _SDLogLevel =
      _lookup<ffi.Int32>('SDLogLevel');

  int get SDLogLevel => _SDLogLevel.value;

  set SDLogLevel(int value) => _SDLogLevel.value = value;

  late final ffi.Pointer<ffi.Int32> _StableDiffusionGGML =
      _lookup<ffi.Int32>('StableDiffusionGGML');

  int get StableDiffusionGGML => _StableDiffusionGGML.value;

  set StableDiffusionGGML(int value) => _StableDiffusionGGML.value = value;

  late final ffi.Pointer<ffi.Int32> _StableDiffusion =
      _lookup<ffi.Int32>('StableDiffusion');

  int get StableDiffusion => _StableDiffusion.value;

  set StableDiffusion(int value) => _StableDiffusion.value = value;

  void set_sd_log_level(
    int level,
  ) {
    return _set_sd_log_level(
      level,
    );
  }

  late final _set_sd_log_levelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'set_sd_log_level');
  late final _set_sd_log_level =
      _set_sd_log_levelPtr.asFunction<void Function(int)>();

  late final ffi.Pointer<ffi.Int> _std = _lookup<ffi.Int>('std');

  int get std => _std.value;

  set std(int value) => _std.value = value;

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _signal(
      arg0,
      arg1,
    );
  }

  late final _signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>('signal');
  late final _signal = _signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  int getpriority(
    int arg0,
    int arg1,
  ) {
    return _getpriority(
      arg0,
      arg1,
    );
  }

  late final _getpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t)>>(
          'getpriority');
  late final _getpriority =
      _getpriorityPtr.asFunction<int Function(int, int)>();

  int getiopolicy_np(
    int arg0,
    int arg1,
  ) {
    return _getiopolicy_np(
      arg0,
      arg1,
    );
  }

  late final _getiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'getiopolicy_np');
  late final _getiopolicy_np =
      _getiopolicy_npPtr.asFunction<int Function(int, int)>();

  int getrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _getrlimit(
      arg0,
      arg1,
    );
  }

  late final _getrlimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>>(
      'getrlimit');
  late final _getrlimit =
      _getrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int getrusage(
    int arg0,
    ffi.Pointer<rusage> arg1,
  ) {
    return _getrusage(
      arg0,
      arg1,
    );
  }

  late final _getrusagePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rusage>)>>(
      'getrusage');
  late final _getrusage =
      _getrusagePtr.asFunction<int Function(int, ffi.Pointer<rusage>)>();

  int setpriority(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setpriority(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t, ffi.Int)>>(
          'setpriority');
  late final _setpriority =
      _setpriorityPtr.asFunction<int Function(int, int, int)>();

  int setiopolicy_np(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setiopolicy_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'setiopolicy_np');
  late final _setiopolicy_np =
      _setiopolicy_npPtr.asFunction<int Function(int, int, int)>();

  int setrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _setrlimit(
      arg0,
      arg1,
    );
  }

  late final _setrlimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>>(
      'setrlimit');
  late final _setrlimit =
      _setrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int wait1(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _wait1(
      arg0,
    );
  }

  late final _wait1Ptr =
      _lookup<ffi.NativeFunction<pid_t Function(ffi.Pointer<ffi.Int>)>>('wait');
  late final _wait1 =
      _wait1Ptr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int waitpid(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
  ) {
    return _waitpid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _waitpidPtr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int)>>('waitpid');
  late final _waitpid =
      _waitpidPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int>, int)>();

  int waitid(
    int arg0,
    int arg1,
    ffi.Pointer<siginfo_t> arg2,
    int arg3,
  ) {
    return _waitid(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _waitidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int32, id_t, ffi.Pointer<siginfo_t>, ffi.Int)>>('waitid');
  late final _waitid = _waitidPtr
      .asFunction<int Function(int, int, ffi.Pointer<siginfo_t>, int)>();

  int wait3(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
    ffi.Pointer<rusage> arg2,
  ) {
    return _wait3(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wait3Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<rusage>)>>('wait3');
  late final _wait3 = _wait3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, int, ffi.Pointer<rusage>)>();

  int wait4(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
    ffi.Pointer<rusage> arg3,
  ) {
    return _wait4(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wait4Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int,
              ffi.Pointer<rusage>)>>('wait4');
  late final _wait4 = _wait4Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, int, ffi.Pointer<rusage>)>();

  ffi.Pointer<ffi.Void> alloca(
    int arg0,
  ) {
    return _alloca(
      arg0,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  late final ffi.Pointer<ffi.Int> ___mb_cur_max =
      _lookup<ffi.Int>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __count,
    int __size,
  ) {
    return _calloc(
      __count,
      __size,
    );
  }

  late final _callocPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>(
      'calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _free(
      arg0,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> valloc(
    int arg0,
  ) {
    return _valloc(
      arg0,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>(
      'aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int abs(
    int arg0,
  ) {
    return _abs(
      arg0,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  double atof(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atof(
      arg0,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoi(
      arg0,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atol(
      arg0,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoll(
      arg0,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  div_t div(
    int arg0,
    int arg1,
  ) {
    return _div(
      arg0,
      arg1,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  void exit(
    int arg0,
  ) {
    return _exit(
      arg0,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getenv(
      arg0,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int labs(
    int arg0,
  ) {
    return _labs(
      arg0,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  ldiv_t ldiv(
    int arg0,
    int arg1,
  ) {
    return _ldiv(
      arg0,
      arg1,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  int llabs(
    int arg0,
  ) {
    return _llabs(
      arg0,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  lldiv_t lldiv(
    int arg0,
    int arg1,
  ) {
    return _lldiv(
      arg0,
      arg1,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>(
      'mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbstowcs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int arg0,
  ) {
    return _srand(
      arg0,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  double strtod(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtod(
      arg0,
      arg1,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtof(
      arg0,
      arg1,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int system(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _system(
      arg0,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcstombs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _wctomb(
      arg0,
      arg1,
    );
  }

  late final _wctombPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>(
      'wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  void _Exit(
    int arg0,
  ) {
    return __Exit(
      arg0,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _a64l(
      arg0,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  ffi.Pointer<ffi.Char> ecvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _ecvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _erand48(
      arg0,
    );
  }

  late final _erand48Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>(
      'erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _fcvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _gcvt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int grantpt(
    int arg0,
  ) {
    return _grantpt(
      arg0,
    );
  }

  late final _grantptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('grantpt');
  late final _grantpt = _grantptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _initstate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _jrand48(
      arg0,
    );
  }

  late final _jrand48Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>(
      'jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> l64a(
    int arg0,
  ) {
    return _l64a(
      arg0,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _lcong48(
      arg0,
    );
  }

  late final _lcong48Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>(
      'lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mktemp(
      arg0,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mkstemp(
      arg0,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _nrand48(
      arg0,
    );
  }

  late final _nrand48Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>(
      'nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int posix_openpt(
    int arg0,
  ) {
    return _posix_openpt(
      arg0,
    );
  }

  late final _posix_openptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('posix_openpt');
  late final _posix_openpt = _posix_openptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> ptsname(
    int arg0,
  ) {
    return _ptsname(
      arg0,
    );
  }

  late final _ptsnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ptsname');
  late final _ptsname =
      _ptsnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ptsname_r(
    int fildes,
    ffi.Pointer<ffi.Char> buffer,
    int buflen,
  ) {
    return _ptsname_r(
      fildes,
      buffer,
      buflen,
    );
  }

  late final _ptsname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('ptsname_r');
  late final _ptsname_r =
      _ptsname_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int putenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _putenv(
      arg0,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> arg0,
  ) {
    return _rand_r(
      arg0,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _realpath(
      arg0,
      arg1,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _seed48(
      arg0,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __overwrite,
  ) {
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void setkey(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setkey(
      arg0,
    );
  }

  late final _setkeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setkey');
  late final _setkey =
      _setkeyPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setstate(
      arg0,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void srand48(
    int arg0,
  ) {
    return _srand48(
      arg0,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  void srandom(
    int arg0,
  ) {
    return _srandom(
      arg0,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  int unlockpt(
    int arg0,
  ) {
    return _unlockpt(
      arg0,
    );
  }

  late final _unlockptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('unlockpt');
  late final _unlockpt = _unlockptPtr.asFunction<int Function(int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unsetenv(
      arg0,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<int Function()>();

  void arc4random_addrandom(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    int arg1,
  ) {
    return _arc4random_addrandom(
      arg0,
      arg1,
    );
  }

  late final _arc4random_addrandomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('arc4random_addrandom');
  late final _arc4random_addrandom = _arc4random_addrandomPtr
      .asFunction<void Function(ffi.Pointer<ffi.UnsignedChar>, int)>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _arc4random_buf(
      __buf,
      __nbytes,
    );
  }

  late final _arc4random_bufPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'arc4random_buf');
  late final _arc4random_buf = _arc4random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void arc4random_stir() {
    return _arc4random_stir();
  }

  late final _arc4random_stirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('arc4random_stir');
  late final _arc4random_stir =
      _arc4random_stirPtr.asFunction<void Function()>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> cgetcap(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _cgetcap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetcapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('cgetcap');
  late final _cgetcap = _cgetcapPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int cgetclose() {
    return _cgetclose();
  }

  late final _cgetclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('cgetclose');
  late final _cgetclose = _cgetclosePtr.asFunction<int Function()>();

  int cgetent(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _cgetent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('cgetent');
  late final _cgetent = _cgetentPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int cgetfirst(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetfirst(
      arg0,
      arg1,
    );
  }

  late final _cgetfirstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetfirst');
  late final _cgetfirst = _cgetfirstPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetmatch(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _cgetmatch(
      arg0,
      arg1,
    );
  }

  late final _cgetmatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('cgetmatch');
  late final _cgetmatch = _cgetmatchPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int cgetnext(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetnext(
      arg0,
      arg1,
    );
  }

  late final _cgetnextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetnext');
  late final _cgetnext = _cgetnextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetnum(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Long> arg2,
  ) {
    return _cgetnum(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Long>)>>('cgetnum');
  late final _cgetnum = _cgetnumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Long>)>();

  int cgetset(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _cgetset(
      arg0,
    );
  }

  late final _cgetsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'cgetset');
  late final _cgetset =
      _cgetsetPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int cgetstr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetstr');
  late final _cgetstr = _cgetstrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetustr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetustr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetustrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetustr');
  late final _cgetustr = _cgetustrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int daemon(
    int arg0,
    int arg1,
  ) {
    return _daemon(
      arg0,
      arg1,
    );
  }

  late final _daemonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('daemon');
  late final _daemon = _daemonPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> devname(
    int arg0,
    int arg1,
  ) {
    return _devname(
      arg0,
      arg1,
    );
  }

  late final _devnamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(dev_t, mode_t)>>(
      'devname');
  late final _devname =
      _devnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  ffi.Pointer<ffi.Char> devname_r(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _devname_r(
      arg0,
      arg1,
      buf,
      len,
    );
  }

  late final _devname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              dev_t, mode_t, ffi.Pointer<ffi.Char>, ffi.Int)>>('devname_r');
  late final _devname_r = _devname_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> getbsize(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.Long> arg1,
  ) {
    return _getbsize(
      arg0,
      arg1,
    );
  }

  late final _getbsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>>('getbsize');
  late final _getbsize = _getbsizePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> arg0,
    int arg1,
  ) {
    return _getloadavg(
      arg0,
      arg1,
    );
  }

  late final _getloadavgPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>(
      'getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Char> getprogname() {
    return _getprogname();
  }

  late final _getprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getprogname');
  late final _getprogname =
      _getprognamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void setprogname(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setprogname(
      arg0,
    );
  }

  late final _setprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setprogname');
  late final _setprogname =
      _setprognamePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int heapsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _heapsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _heapsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('heapsort');
  late final _heapsort = _heapsortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int mergesort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _mergesort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _mergesortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('mergesort');
  late final _mergesort = _mergesortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _psortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort');
  late final _psort = _psortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _psort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort_r');
  late final _psort_r = _psort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>();

  void qsort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _qsort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort_r');
  late final _qsort_r = _qsort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>();

  int radixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _radixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _radixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('radixsort');
  late final _radixsort = _radixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _rpmatch(
      arg0,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sradixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _sradixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _sradixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('sradixsort');
  late final _sradixsort = _sradixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  void sranddev() {
    return _sranddev();
  }

  late final _sranddevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sranddev');
  late final _sranddev = _sranddevPtr.asFunction<void Function()>();

  void srandomdev() {
    return _srandomdev();
  }

  late final _srandomdevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('srandomdev');
  late final _srandomdev = _srandomdevPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> reallocf(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _reallocf(
      __ptr,
      __size,
    );
  }

  late final _reallocfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('reallocf');
  late final _reallocf = _reallocfPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  int strtonum(
    ffi.Pointer<ffi.Char> __numstr,
    int __minval,
    int __maxval,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __errstrp,
  ) {
    return _strtonum(
      __numstr,
      __minval,
      __maxval,
      __errstrp,
    );
  }

  late final _strtonumPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>, ffi.LongLong,
              ffi.LongLong, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtonum');
  late final _strtonum = _strtonumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Char>>('suboptarg');

  ffi.Pointer<ffi.Char> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Char> value) => _suboptarg.value = value;

  late final ffi.Pointer<ffi.Int> _stbi_write_tga_with_rle =
      _lookup<ffi.Int>('stbi_write_tga_with_rle');

  int get stbi_write_tga_with_rle => _stbi_write_tga_with_rle.value;

  set stbi_write_tga_with_rle(int value) =>
      _stbi_write_tga_with_rle.value = value;

  late final ffi.Pointer<ffi.Int> _stbi_write_png_compression_level =
      _lookup<ffi.Int>('stbi_write_png_compression_level');

  int get stbi_write_png_compression_level =>
      _stbi_write_png_compression_level.value;

  set stbi_write_png_compression_level(int value) =>
      _stbi_write_png_compression_level.value = value;

  late final ffi.Pointer<ffi.Int> _stbi_write_force_png_filter =
      _lookup<ffi.Int>('stbi_write_force_png_filter');

  int get stbi_write_force_png_filter => _stbi_write_force_png_filter.value;

  set stbi_write_force_png_filter(int value) =>
      _stbi_write_force_png_filter.value = value;

  int stbi_write_png(
    ffi.Pointer<ffi.Char> filename,
    int w,
    int h,
    int comp,
    ffi.Pointer<ffi.Void> data,
    int stride_in_bytes,
  ) {
    return _stbi_write_png(
      filename,
      w,
      h,
      comp,
      data,
      stride_in_bytes,
    );
  }

  late final _stbi_write_pngPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('stbi_write_png');
  late final _stbi_write_png = _stbi_write_pngPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Void>, int)>();

  int stbi_write_bmp(
    ffi.Pointer<ffi.Char> filename,
    int w,
    int h,
    int comp,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _stbi_write_bmp(
      filename,
      w,
      h,
      comp,
      data,
    );
  }

  late final _stbi_write_bmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('stbi_write_bmp');
  late final _stbi_write_bmp = _stbi_write_bmpPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Void>)>();

  int stbi_write_tga(
    ffi.Pointer<ffi.Char> filename,
    int w,
    int h,
    int comp,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _stbi_write_tga(
      filename,
      w,
      h,
      comp,
      data,
    );
  }

  late final _stbi_write_tgaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('stbi_write_tga');
  late final _stbi_write_tga = _stbi_write_tgaPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Void>)>();

  int stbi_write_hdr(
    ffi.Pointer<ffi.Char> filename,
    int w,
    int h,
    int comp,
    ffi.Pointer<ffi.Float> data,
  ) {
    return _stbi_write_hdr(
      filename,
      w,
      h,
      comp,
      data,
    );
  }

  late final _stbi_write_hdrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Float>)>>('stbi_write_hdr');
  late final _stbi_write_hdr = _stbi_write_hdrPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Float>)>();

  int stbi_write_jpg(
    ffi.Pointer<ffi.Char> filename,
    int x,
    int y,
    int comp,
    ffi.Pointer<ffi.Void> data,
    int quality,
  ) {
    return _stbi_write_jpg(
      filename,
      x,
      y,
      comp,
      data,
      quality,
    );
  }

  late final _stbi_write_jpgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('stbi_write_jpg');
  late final _stbi_write_jpg = _stbi_write_jpgPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Void>, int)>();

  int stbi_write_png_to_func(
    ffi.Pointer<stbi_write_func> func,
    ffi.Pointer<ffi.Void> context,
    int w,
    int h,
    int comp,
    ffi.Pointer<ffi.Void> data,
    int stride_in_bytes,
  ) {
    return _stbi_write_png_to_func(
      func,
      context,
      w,
      h,
      comp,
      data,
      stride_in_bytes,
    );
  }

  late final _stbi_write_png_to_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<stbi_write_func>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int)>>('stbi_write_png_to_func');
  late final _stbi_write_png_to_func = _stbi_write_png_to_funcPtr.asFunction<
      int Function(ffi.Pointer<stbi_write_func>, ffi.Pointer<ffi.Void>, int,
          int, int, ffi.Pointer<ffi.Void>, int)>();

  int stbi_write_bmp_to_func(
    ffi.Pointer<stbi_write_func> func,
    ffi.Pointer<ffi.Void> context,
    int w,
    int h,
    int comp,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _stbi_write_bmp_to_func(
      func,
      context,
      w,
      h,
      comp,
      data,
    );
  }

  late final _stbi_write_bmp_to_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<stbi_write_func>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('stbi_write_bmp_to_func');
  late final _stbi_write_bmp_to_func = _stbi_write_bmp_to_funcPtr.asFunction<
      int Function(ffi.Pointer<stbi_write_func>, ffi.Pointer<ffi.Void>, int,
          int, int, ffi.Pointer<ffi.Void>)>();

  int stbi_write_tga_to_func(
    ffi.Pointer<stbi_write_func> func,
    ffi.Pointer<ffi.Void> context,
    int w,
    int h,
    int comp,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _stbi_write_tga_to_func(
      func,
      context,
      w,
      h,
      comp,
      data,
    );
  }

  late final _stbi_write_tga_to_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<stbi_write_func>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('stbi_write_tga_to_func');
  late final _stbi_write_tga_to_func = _stbi_write_tga_to_funcPtr.asFunction<
      int Function(ffi.Pointer<stbi_write_func>, ffi.Pointer<ffi.Void>, int,
          int, int, ffi.Pointer<ffi.Void>)>();

  int stbi_write_hdr_to_func(
    ffi.Pointer<stbi_write_func> func,
    ffi.Pointer<ffi.Void> context,
    int w,
    int h,
    int comp,
    ffi.Pointer<ffi.Float> data,
  ) {
    return _stbi_write_hdr_to_func(
      func,
      context,
      w,
      h,
      comp,
      data,
    );
  }

  late final _stbi_write_hdr_to_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<stbi_write_func>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>)>>('stbi_write_hdr_to_func');
  late final _stbi_write_hdr_to_func = _stbi_write_hdr_to_funcPtr.asFunction<
      int Function(ffi.Pointer<stbi_write_func>, ffi.Pointer<ffi.Void>, int,
          int, int, ffi.Pointer<ffi.Float>)>();

  int stbi_write_jpg_to_func(
    ffi.Pointer<stbi_write_func> func,
    ffi.Pointer<ffi.Void> context,
    int x,
    int y,
    int comp,
    ffi.Pointer<ffi.Void> data,
    int quality,
  ) {
    return _stbi_write_jpg_to_func(
      func,
      context,
      x,
      y,
      comp,
      data,
      quality,
    );
  }

  late final _stbi_write_jpg_to_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<stbi_write_func>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int)>>('stbi_write_jpg_to_func');
  late final _stbi_write_jpg_to_func = _stbi_write_jpg_to_funcPtr.asFunction<
      int Function(ffi.Pointer<stbi_write_func>, ffi.Pointer<ffi.Void>, int,
          int, int, ffi.Pointer<ffi.Void>, int)>();

  void stbi_flip_vertically_on_write(
    int flip_boolean,
  ) {
    return _stbi_flip_vertically_on_write(
      flip_boolean,
    );
  }

  late final _stbi_flip_vertically_on_writePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'stbi_flip_vertically_on_write');
  late final _stbi_flip_vertically_on_write =
      _stbi_flip_vertically_on_writePtr.asFunction<void Function(int)>();

  int renameat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _renameat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int renamex_np(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _renamex_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _renamex_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('renamex_np');
  late final _renamex_np = _renamex_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int renameatx_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _renameatx_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _renameatx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('renameatx_np');
  late final _renameatx_np = _renameatx_npPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    return _clearerr(
      arg0,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fclose(
      arg0,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    return _feof(
      arg0,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ferror(
      arg0,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fflush(
      arg0,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetc(
      arg0,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fopen(
      __filename,
      __mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fprintf(
      arg0,
      arg1,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputc(
      arg0,
      arg1,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputs(
      arg0,
      arg1,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fscanf(
      arg0,
      arg1,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftell(
      arg0,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc(
      arg0,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> gets(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _gets(
      arg0,
    );
  }

  late final _getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('gets');
  late final _gets = _getsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void perror(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _perror(
      arg0,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int printf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _printf(
      arg0,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc(
      arg0,
      arg1,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int arg0,
  ) {
    return _putchar(
      arg0,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _puts(
      arg0,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int remove(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _remove(
      arg0,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    return _rewind(
      arg0,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int scanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scanf(
      arg0,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _setbuf(
      arg0,
      arg1,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  int sprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sprintf(
      arg0,
      arg1,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sscanf(
      arg0,
      arg1,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetc(
      arg0,
      arg1,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vprintf(
    ffi.Pointer<ffi.Char> arg0,
    va_list arg1,
  ) {
    return _vprintf(
      arg0,
      arg1,
    );
  }

  late final _vprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vprintf');
  late final _vprintf =
      _vprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fdopen(
      arg0,
      arg1,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fileno(
      arg0,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _pclose(
      arg0,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _popen(
      arg0,
      arg1,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___srget(
      arg0,
    );
  }

  late final ___srgetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__srget');
  late final ___srget =
      ___srgetPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___svfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              va_list)>>('__svfscanf');
  late final ___svfscanf = ___svfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  late final ___swbufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '__swbuf');
  late final ___swbuf =
      ___swbufPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _flockfile(
      arg0,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftrylockfile(
      arg0,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _funlockfile(
      arg0,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc_unlocked(
      arg0,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int arg0,
  ) {
    return _putchar_unlocked(
      arg0,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getw(
      arg0,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putw(
      arg0,
      arg1,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __prefix,
  ) {
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, off_t, ffi.Int)>>(
      'fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Pointer<FILE>)>>('ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    va_list arg1,
  ) {
    return _vscanf(
      __format,
      arg1,
    );
  }

  late final _vscanfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vscanf');
  late final _vscanf =
      _vscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
    va_list arg3,
  ) {
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, va_list)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  int dprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _dprintf(
      arg0,
      arg1,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int vdprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, va_list)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, va_list)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufp,
    ffi.Pointer<ffi.Size> __sizep,
  ) {
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  late final ffi.Pointer<ffi.Int> _sys_nerr = _lookup<ffi.Int>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_errlist.value = value;

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asprintf(
      arg0,
      arg1,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid_r(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid_r(
      arg0,
    );
  }

  late final _ctermid_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid_r');
  late final _ctermid_r = _ctermid_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> fgetln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _fgetln(
      arg0,
      arg1,
    );
  }

  late final _fgetlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>>('fgetln');
  late final _fgetln = _fgetlnPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> fmtcheck(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  late final _fmtcheckPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fmtcheck');
  late final _fmtcheck = _fmtcheckPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fpurge(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fpurge(
      arg0,
    );
  }

  late final _fpurgePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fpurge');
  late final _fpurge = _fpurgePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void setbuffer(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _setbuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int setlinebuf(
    ffi.Pointer<FILE> arg0,
  ) {
    return _setlinebuf(
      arg0,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, va_list)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          va_list)>();

  ffi.Pointer<FILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg2,
    ffi.Pointer<
            ffi.NativeFunction<
                fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>
        arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _funopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>>('funopen');
  late final _funopen = _funopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>();

  int __sprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___sprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__sprintf_chk');
  late final ___sprintf_chk = ___sprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  int __snprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___snprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__snprintf_chk');
  late final ___snprintf_chk = ___snprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>)>();

  int __vsprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    va_list arg4,
  ) {
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___vsprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsprintf_chk');
  late final ___vsprintf_chk = ___vsprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, va_list)>();

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    va_list arg5,
  ) {
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___vsnprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsnprintf_chk');
  late final ___vsnprintf_chk = ___vsnprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>,
          va_list)>();

  /// /////////////////////////////////
  ffi.Pointer<stbi_uc> stbi_load_from_memory(
    ffi.Pointer<stbi_uc> buffer,
    int len,
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
    ffi.Pointer<ffi.Int> channels_in_file,
    int desired_channels,
  ) {
    return _stbi_load_from_memory(
      buffer,
      len,
      x,
      y,
      channels_in_file,
      desired_channels,
    );
  }

  late final _stbi_load_from_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stbi_uc> Function(
              ffi.Pointer<stbi_uc>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('stbi_load_from_memory');
  late final _stbi_load_from_memory = _stbi_load_from_memoryPtr.asFunction<
      ffi.Pointer<stbi_uc> Function(
          ffi.Pointer<stbi_uc>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          int)>();

  ffi.Pointer<stbi_uc> stbi_load_from_callbacks(
    ffi.Pointer<stbi_io_callbacks> clbk,
    ffi.Pointer<ffi.Void> user,
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
    ffi.Pointer<ffi.Int> channels_in_file,
    int desired_channels,
  ) {
    return _stbi_load_from_callbacks(
      clbk,
      user,
      x,
      y,
      channels_in_file,
      desired_channels,
    );
  }

  late final _stbi_load_from_callbacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stbi_uc> Function(
              ffi.Pointer<stbi_io_callbacks>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('stbi_load_from_callbacks');
  late final _stbi_load_from_callbacks =
      _stbi_load_from_callbacksPtr.asFunction<
          ffi.Pointer<stbi_uc> Function(
              ffi.Pointer<stbi_io_callbacks>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              int)>();

  ffi.Pointer<stbi_uc> stbi_load(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
    ffi.Pointer<ffi.Int> channels_in_file,
    int desired_channels,
  ) {
    return _stbi_load(
      filename,
      x,
      y,
      channels_in_file,
      desired_channels,
    );
  }

  late final _stbi_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stbi_uc> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('stbi_load');
  late final _stbi_load = _stbi_loadPtr.asFunction<
      ffi.Pointer<stbi_uc> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, int)>();

  ffi.Pointer<stbi_uc> stbi_load_from_file(
    ffi.Pointer<FILE> f,
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
    ffi.Pointer<ffi.Int> channels_in_file,
    int desired_channels,
  ) {
    return _stbi_load_from_file(
      f,
      x,
      y,
      channels_in_file,
      desired_channels,
    );
  }

  late final _stbi_load_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stbi_uc> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('stbi_load_from_file');
  late final _stbi_load_from_file = _stbi_load_from_filePtr.asFunction<
      ffi.Pointer<stbi_uc> Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, int)>();

  ffi.Pointer<stbi_uc> stbi_load_gif_from_memory(
    ffi.Pointer<stbi_uc> buffer,
    int len,
    ffi.Pointer<ffi.Pointer<ffi.Int>> delays,
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
    ffi.Pointer<ffi.Int> z,
    ffi.Pointer<ffi.Int> comp,
    int req_comp,
  ) {
    return _stbi_load_gif_from_memory(
      buffer,
      len,
      delays,
      x,
      y,
      z,
      comp,
      req_comp,
    );
  }

  late final _stbi_load_gif_from_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stbi_uc> Function(
              ffi.Pointer<stbi_uc>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('stbi_load_gif_from_memory');
  late final _stbi_load_gif_from_memory =
      _stbi_load_gif_from_memoryPtr.asFunction<
          ffi.Pointer<stbi_uc> Function(
              ffi.Pointer<stbi_uc>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              int)>();

  /// /////////////////////////////////
  ffi.Pointer<stbi_us> stbi_load_16_from_memory(
    ffi.Pointer<stbi_uc> buffer,
    int len,
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
    ffi.Pointer<ffi.Int> channels_in_file,
    int desired_channels,
  ) {
    return _stbi_load_16_from_memory(
      buffer,
      len,
      x,
      y,
      channels_in_file,
      desired_channels,
    );
  }

  late final _stbi_load_16_from_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stbi_us> Function(
              ffi.Pointer<stbi_uc>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('stbi_load_16_from_memory');
  late final _stbi_load_16_from_memory =
      _stbi_load_16_from_memoryPtr.asFunction<
          ffi.Pointer<stbi_us> Function(
              ffi.Pointer<stbi_uc>,
              int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              int)>();

  ffi.Pointer<stbi_us> stbi_load_16_from_callbacks(
    ffi.Pointer<stbi_io_callbacks> clbk,
    ffi.Pointer<ffi.Void> user,
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
    ffi.Pointer<ffi.Int> channels_in_file,
    int desired_channels,
  ) {
    return _stbi_load_16_from_callbacks(
      clbk,
      user,
      x,
      y,
      channels_in_file,
      desired_channels,
    );
  }

  late final _stbi_load_16_from_callbacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stbi_us> Function(
              ffi.Pointer<stbi_io_callbacks>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('stbi_load_16_from_callbacks');
  late final _stbi_load_16_from_callbacks =
      _stbi_load_16_from_callbacksPtr.asFunction<
          ffi.Pointer<stbi_us> Function(
              ffi.Pointer<stbi_io_callbacks>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              int)>();

  ffi.Pointer<stbi_us> stbi_load_16(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
    ffi.Pointer<ffi.Int> channels_in_file,
    int desired_channels,
  ) {
    return _stbi_load_16(
      filename,
      x,
      y,
      channels_in_file,
      desired_channels,
    );
  }

  late final _stbi_load_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stbi_us> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('stbi_load_16');
  late final _stbi_load_16 = _stbi_load_16Ptr.asFunction<
      ffi.Pointer<stbi_us> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, int)>();

  ffi.Pointer<stbi_us> stbi_load_from_file_16(
    ffi.Pointer<FILE> f,
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
    ffi.Pointer<ffi.Int> channels_in_file,
    int desired_channels,
  ) {
    return _stbi_load_from_file_16(
      f,
      x,
      y,
      channels_in_file,
      desired_channels,
    );
  }

  late final _stbi_load_from_file_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stbi_us> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('stbi_load_from_file_16');
  late final _stbi_load_from_file_16 = _stbi_load_from_file_16Ptr.asFunction<
      ffi.Pointer<stbi_us> Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, int)>();

  ffi.Pointer<ffi.Float> stbi_loadf_from_memory(
    ffi.Pointer<stbi_uc> buffer,
    int len,
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
    ffi.Pointer<ffi.Int> channels_in_file,
    int desired_channels,
  ) {
    return _stbi_loadf_from_memory(
      buffer,
      len,
      x,
      y,
      channels_in_file,
      desired_channels,
    );
  }

  late final _stbi_loadf_from_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<stbi_uc>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('stbi_loadf_from_memory');
  late final _stbi_loadf_from_memory = _stbi_loadf_from_memoryPtr.asFunction<
      ffi.Pointer<ffi.Float> Function(
          ffi.Pointer<stbi_uc>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          int)>();

  ffi.Pointer<ffi.Float> stbi_loadf_from_callbacks(
    ffi.Pointer<stbi_io_callbacks> clbk,
    ffi.Pointer<ffi.Void> user,
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
    ffi.Pointer<ffi.Int> channels_in_file,
    int desired_channels,
  ) {
    return _stbi_loadf_from_callbacks(
      clbk,
      user,
      x,
      y,
      channels_in_file,
      desired_channels,
    );
  }

  late final _stbi_loadf_from_callbacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<stbi_io_callbacks>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('stbi_loadf_from_callbacks');
  late final _stbi_loadf_from_callbacks =
      _stbi_loadf_from_callbacksPtr.asFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<stbi_io_callbacks>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              int)>();

  ffi.Pointer<ffi.Float> stbi_loadf(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
    ffi.Pointer<ffi.Int> channels_in_file,
    int desired_channels,
  ) {
    return _stbi_loadf(
      filename,
      x,
      y,
      channels_in_file,
      desired_channels,
    );
  }

  late final _stbi_loadfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('stbi_loadf');
  late final _stbi_loadf = _stbi_loadfPtr.asFunction<
      ffi.Pointer<ffi.Float> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          int)>();

  ffi.Pointer<ffi.Float> stbi_loadf_from_file(
    ffi.Pointer<FILE> f,
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
    ffi.Pointer<ffi.Int> channels_in_file,
    int desired_channels,
  ) {
    return _stbi_loadf_from_file(
      f,
      x,
      y,
      channels_in_file,
      desired_channels,
    );
  }

  late final _stbi_loadf_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('stbi_loadf_from_file');
  late final _stbi_loadf_from_file = _stbi_loadf_from_filePtr.asFunction<
      ffi.Pointer<ffi.Float> Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, int)>();

  void stbi_hdr_to_ldr_gamma(
    double gamma,
  ) {
    return _stbi_hdr_to_ldr_gamma(
      gamma,
    );
  }

  late final _stbi_hdr_to_ldr_gammaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'stbi_hdr_to_ldr_gamma');
  late final _stbi_hdr_to_ldr_gamma =
      _stbi_hdr_to_ldr_gammaPtr.asFunction<void Function(double)>();

  void stbi_hdr_to_ldr_scale(
    double scale,
  ) {
    return _stbi_hdr_to_ldr_scale(
      scale,
    );
  }

  late final _stbi_hdr_to_ldr_scalePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'stbi_hdr_to_ldr_scale');
  late final _stbi_hdr_to_ldr_scale =
      _stbi_hdr_to_ldr_scalePtr.asFunction<void Function(double)>();

  void stbi_ldr_to_hdr_gamma(
    double gamma,
  ) {
    return _stbi_ldr_to_hdr_gamma(
      gamma,
    );
  }

  late final _stbi_ldr_to_hdr_gammaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'stbi_ldr_to_hdr_gamma');
  late final _stbi_ldr_to_hdr_gamma =
      _stbi_ldr_to_hdr_gammaPtr.asFunction<void Function(double)>();

  void stbi_ldr_to_hdr_scale(
    double scale,
  ) {
    return _stbi_ldr_to_hdr_scale(
      scale,
    );
  }

  late final _stbi_ldr_to_hdr_scalePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'stbi_ldr_to_hdr_scale');
  late final _stbi_ldr_to_hdr_scale =
      _stbi_ldr_to_hdr_scalePtr.asFunction<void Function(double)>();

  int stbi_is_hdr_from_callbacks(
    ffi.Pointer<stbi_io_callbacks> clbk,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _stbi_is_hdr_from_callbacks(
      clbk,
      user,
    );
  }

  late final _stbi_is_hdr_from_callbacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<stbi_io_callbacks>,
              ffi.Pointer<ffi.Void>)>>('stbi_is_hdr_from_callbacks');
  late final _stbi_is_hdr_from_callbacks =
      _stbi_is_hdr_from_callbacksPtr.asFunction<
          int Function(
              ffi.Pointer<stbi_io_callbacks>, ffi.Pointer<ffi.Void>)>();

  int stbi_is_hdr_from_memory(
    ffi.Pointer<stbi_uc> buffer,
    int len,
  ) {
    return _stbi_is_hdr_from_memory(
      buffer,
      len,
    );
  }

  late final _stbi_is_hdr_from_memoryPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<stbi_uc>, ffi.Int)>>(
      'stbi_is_hdr_from_memory');
  late final _stbi_is_hdr_from_memory = _stbi_is_hdr_from_memoryPtr
      .asFunction<int Function(ffi.Pointer<stbi_uc>, int)>();

  int stbi_is_hdr(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _stbi_is_hdr(
      filename,
    );
  }

  late final _stbi_is_hdrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'stbi_is_hdr');
  late final _stbi_is_hdr =
      _stbi_is_hdrPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int stbi_is_hdr_from_file(
    ffi.Pointer<FILE> f,
  ) {
    return _stbi_is_hdr_from_file(
      f,
    );
  }

  late final _stbi_is_hdr_from_filePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'stbi_is_hdr_from_file');
  late final _stbi_is_hdr_from_file =
      _stbi_is_hdr_from_filePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> stbi_failure_reason() {
    return _stbi_failure_reason();
  }

  late final _stbi_failure_reasonPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'stbi_failure_reason');
  late final _stbi_failure_reason =
      _stbi_failure_reasonPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void stbi_image_free(
    ffi.Pointer<ffi.Void> retval_from_stbi_load,
  ) {
    return _stbi_image_free(
      retval_from_stbi_load,
    );
  }

  late final _stbi_image_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'stbi_image_free');
  late final _stbi_image_free =
      _stbi_image_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int stbi_info_from_memory(
    ffi.Pointer<stbi_uc> buffer,
    int len,
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
    ffi.Pointer<ffi.Int> comp,
  ) {
    return _stbi_info_from_memory(
      buffer,
      len,
      x,
      y,
      comp,
    );
  }

  late final _stbi_info_from_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<stbi_uc>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('stbi_info_from_memory');
  late final _stbi_info_from_memory = _stbi_info_from_memoryPtr.asFunction<
      int Function(ffi.Pointer<stbi_uc>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int stbi_info_from_callbacks(
    ffi.Pointer<stbi_io_callbacks> clbk,
    ffi.Pointer<ffi.Void> user,
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
    ffi.Pointer<ffi.Int> comp,
  ) {
    return _stbi_info_from_callbacks(
      clbk,
      user,
      x,
      y,
      comp,
    );
  }

  late final _stbi_info_from_callbacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<stbi_io_callbacks>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('stbi_info_from_callbacks');
  late final _stbi_info_from_callbacks =
      _stbi_info_from_callbacksPtr.asFunction<
          int Function(
              ffi.Pointer<stbi_io_callbacks>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int stbi_is_16_bit_from_memory(
    ffi.Pointer<stbi_uc> buffer,
    int len,
  ) {
    return _stbi_is_16_bit_from_memory(
      buffer,
      len,
    );
  }

  late final _stbi_is_16_bit_from_memoryPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<stbi_uc>, ffi.Int)>>(
      'stbi_is_16_bit_from_memory');
  late final _stbi_is_16_bit_from_memory = _stbi_is_16_bit_from_memoryPtr
      .asFunction<int Function(ffi.Pointer<stbi_uc>, int)>();

  int stbi_is_16_bit_from_callbacks(
    ffi.Pointer<stbi_io_callbacks> clbk,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _stbi_is_16_bit_from_callbacks(
      clbk,
      user,
    );
  }

  late final _stbi_is_16_bit_from_callbacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<stbi_io_callbacks>,
              ffi.Pointer<ffi.Void>)>>('stbi_is_16_bit_from_callbacks');
  late final _stbi_is_16_bit_from_callbacks =
      _stbi_is_16_bit_from_callbacksPtr.asFunction<
          int Function(
              ffi.Pointer<stbi_io_callbacks>, ffi.Pointer<ffi.Void>)>();

  int stbi_info(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
    ffi.Pointer<ffi.Int> comp,
  ) {
    return _stbi_info(
      filename,
      x,
      y,
      comp,
    );
  }

  late final _stbi_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('stbi_info');
  late final _stbi_info = _stbi_infoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int stbi_info_from_file(
    ffi.Pointer<FILE> f,
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
    ffi.Pointer<ffi.Int> comp,
  ) {
    return _stbi_info_from_file(
      f,
      x,
      y,
      comp,
    );
  }

  late final _stbi_info_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('stbi_info_from_file');
  late final _stbi_info_from_file = _stbi_info_from_filePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int stbi_is_16_bit(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _stbi_is_16_bit(
      filename,
    );
  }

  late final _stbi_is_16_bitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'stbi_is_16_bit');
  late final _stbi_is_16_bit =
      _stbi_is_16_bitPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int stbi_is_16_bit_from_file(
    ffi.Pointer<FILE> f,
  ) {
    return _stbi_is_16_bit_from_file(
      f,
    );
  }

  late final _stbi_is_16_bit_from_filePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'stbi_is_16_bit_from_file');
  late final _stbi_is_16_bit_from_file = _stbi_is_16_bit_from_filePtr
      .asFunction<int Function(ffi.Pointer<FILE>)>();

  void stbi_set_unpremultiply_on_load(
    int flag_true_if_should_unpremultiply,
  ) {
    return _stbi_set_unpremultiply_on_load(
      flag_true_if_should_unpremultiply,
    );
  }

  late final _stbi_set_unpremultiply_on_loadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'stbi_set_unpremultiply_on_load');
  late final _stbi_set_unpremultiply_on_load =
      _stbi_set_unpremultiply_on_loadPtr.asFunction<void Function(int)>();

  void stbi_convert_iphone_png_to_rgb(
    int flag_true_if_should_convert,
  ) {
    return _stbi_convert_iphone_png_to_rgb(
      flag_true_if_should_convert,
    );
  }

  late final _stbi_convert_iphone_png_to_rgbPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'stbi_convert_iphone_png_to_rgb');
  late final _stbi_convert_iphone_png_to_rgb =
      _stbi_convert_iphone_png_to_rgbPtr.asFunction<void Function(int)>();

  void stbi_set_flip_vertically_on_load(
    int flag_true_if_should_flip,
  ) {
    return _stbi_set_flip_vertically_on_load(
      flag_true_if_should_flip,
    );
  }

  late final _stbi_set_flip_vertically_on_loadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'stbi_set_flip_vertically_on_load');
  late final _stbi_set_flip_vertically_on_load =
      _stbi_set_flip_vertically_on_loadPtr.asFunction<void Function(int)>();

  void stbi_set_unpremultiply_on_load_thread(
    int flag_true_if_should_unpremultiply,
  ) {
    return _stbi_set_unpremultiply_on_load_thread(
      flag_true_if_should_unpremultiply,
    );
  }

  late final _stbi_set_unpremultiply_on_load_threadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'stbi_set_unpremultiply_on_load_thread');
  late final _stbi_set_unpremultiply_on_load_thread =
      _stbi_set_unpremultiply_on_load_threadPtr
          .asFunction<void Function(int)>();

  void stbi_convert_iphone_png_to_rgb_thread(
    int flag_true_if_should_convert,
  ) {
    return _stbi_convert_iphone_png_to_rgb_thread(
      flag_true_if_should_convert,
    );
  }

  late final _stbi_convert_iphone_png_to_rgb_threadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'stbi_convert_iphone_png_to_rgb_thread');
  late final _stbi_convert_iphone_png_to_rgb_thread =
      _stbi_convert_iphone_png_to_rgb_threadPtr
          .asFunction<void Function(int)>();

  void stbi_set_flip_vertically_on_load_thread(
    int flag_true_if_should_flip,
  ) {
    return _stbi_set_flip_vertically_on_load_thread(
      flag_true_if_should_flip,
    );
  }

  late final _stbi_set_flip_vertically_on_load_threadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'stbi_set_flip_vertically_on_load_thread');
  late final _stbi_set_flip_vertically_on_load_thread =
      _stbi_set_flip_vertically_on_load_threadPtr
          .asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> stbi_zlib_decode_malloc_guesssize(
    ffi.Pointer<ffi.Char> buffer,
    int len,
    int initial_size,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _stbi_zlib_decode_malloc_guesssize(
      buffer,
      len,
      initial_size,
      outlen,
    );
  }

  late final _stbi_zlib_decode_malloc_guesssizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>)>>('stbi_zlib_decode_malloc_guesssize');
  late final _stbi_zlib_decode_malloc_guesssize =
      _stbi_zlib_decode_malloc_guesssizePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> stbi_zlib_decode_malloc_guesssize_headerflag(
    ffi.Pointer<ffi.Char> buffer,
    int len,
    int initial_size,
    ffi.Pointer<ffi.Int> outlen,
    int parse_header,
  ) {
    return _stbi_zlib_decode_malloc_guesssize_headerflag(
      buffer,
      len,
      initial_size,
      outlen,
      parse_header,
    );
  }

  late final _stbi_zlib_decode_malloc_guesssize_headerflagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('stbi_zlib_decode_malloc_guesssize_headerflag');
  late final _stbi_zlib_decode_malloc_guesssize_headerflag =
      _stbi_zlib_decode_malloc_guesssize_headerflagPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Int>, int)>();

  ffi.Pointer<ffi.Char> stbi_zlib_decode_malloc(
    ffi.Pointer<ffi.Char> buffer,
    int len,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _stbi_zlib_decode_malloc(
      buffer,
      len,
      outlen,
    );
  }

  late final _stbi_zlib_decode_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('stbi_zlib_decode_malloc');
  late final _stbi_zlib_decode_malloc = _stbi_zlib_decode_mallocPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Int>)>();

  int stbi_zlib_decode_buffer(
    ffi.Pointer<ffi.Char> obuffer,
    int olen,
    ffi.Pointer<ffi.Char> ibuffer,
    int ilen,
  ) {
    return _stbi_zlib_decode_buffer(
      obuffer,
      olen,
      ibuffer,
      ilen,
    );
  }

  late final _stbi_zlib_decode_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stbi_zlib_decode_buffer');
  late final _stbi_zlib_decode_buffer = _stbi_zlib_decode_bufferPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stbi_zlib_decode_noheader_malloc(
    ffi.Pointer<ffi.Char> buffer,
    int len,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _stbi_zlib_decode_noheader_malloc(
      buffer,
      len,
      outlen,
    );
  }

  late final _stbi_zlib_decode_noheader_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('stbi_zlib_decode_noheader_malloc');
  late final _stbi_zlib_decode_noheader_malloc =
      _stbi_zlib_decode_noheader_mallocPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Int>)>();

  int stbi_zlib_decode_noheader_buffer(
    ffi.Pointer<ffi.Char> obuffer,
    int olen,
    ffi.Pointer<ffi.Char> ibuffer,
    int ilen,
  ) {
    return _stbi_zlib_decode_noheader_buffer(
      obuffer,
      olen,
      ibuffer,
      ilen,
    );
  }

  late final _stbi_zlib_decode_noheader_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('stbi_zlib_decode_noheader_buffer');
  late final _stbi_zlib_decode_noheader_buffer =
      _stbi_zlib_decode_noheader_bufferPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Size> _GGML_OBJECT_SIZE =
      _lookup<ffi.Size>('GGML_OBJECT_SIZE');

  int get GGML_OBJECT_SIZE => _GGML_OBJECT_SIZE.value;

  set GGML_OBJECT_SIZE(int value) => _GGML_OBJECT_SIZE.value = value;

  late final ffi.Pointer<ffi.Size> _GGML_TENSOR_SIZE =
      _lookup<ffi.Size>('GGML_TENSOR_SIZE');

  int get GGML_TENSOR_SIZE => _GGML_TENSOR_SIZE.value;

  set GGML_TENSOR_SIZE(int value) => _GGML_TENSOR_SIZE.value = value;

  late final ffi.Pointer<ffi.Size> _GGML_GRAPH_SIZE =
      _lookup<ffi.Size>('GGML_GRAPH_SIZE');

  int get GGML_GRAPH_SIZE => _GGML_GRAPH_SIZE.value;

  set GGML_GRAPH_SIZE(int value) => _GGML_GRAPH_SIZE.value = value;

  void ggml_time_init() {
    return _ggml_time_init();
  }

  late final _ggml_time_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ggml_time_init');
  late final _ggml_time_init = _ggml_time_initPtr.asFunction<void Function()>();

  int ggml_time_ms() {
    return _ggml_time_ms();
  }

  late final _ggml_time_msPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('ggml_time_ms');
  late final _ggml_time_ms = _ggml_time_msPtr.asFunction<int Function()>();

  int ggml_time_us() {
    return _ggml_time_us();
  }

  late final _ggml_time_usPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('ggml_time_us');
  late final _ggml_time_us = _ggml_time_usPtr.asFunction<int Function()>();

  int ggml_cycles() {
    return _ggml_cycles();
  }

  late final _ggml_cyclesPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('ggml_cycles');
  late final _ggml_cycles = _ggml_cyclesPtr.asFunction<int Function()>();

  int ggml_cycles_per_ms() {
    return _ggml_cycles_per_ms();
  }

  late final _ggml_cycles_per_msPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('ggml_cycles_per_ms');
  late final _ggml_cycles_per_ms =
      _ggml_cycles_per_msPtr.asFunction<int Function()>();

  void ggml_numa_init() {
    return _ggml_numa_init();
  }

  late final _ggml_numa_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ggml_numa_init');
  late final _ggml_numa_init = _ggml_numa_initPtr.asFunction<void Function()>();

  bool ggml_is_numa() {
    return _ggml_is_numa();
  }

  late final _ggml_is_numaPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('ggml_is_numa');
  late final _ggml_is_numa = _ggml_is_numaPtr.asFunction<bool Function()>();

  void ggml_print_object(
    ffi.Pointer<ggml_object> obj,
  ) {
    return _ggml_print_object(
      obj,
    );
  }

  late final _ggml_print_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_object>)>>(
          'ggml_print_object');
  late final _ggml_print_object = _ggml_print_objectPtr
      .asFunction<void Function(ffi.Pointer<ggml_object>)>();

  void ggml_print_objects(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_print_objects(
      ctx,
    );
  }

  late final _ggml_print_objectsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_context>)>>(
          'ggml_print_objects');
  late final _ggml_print_objects = _ggml_print_objectsPtr
      .asFunction<void Function(ffi.Pointer<ggml_context>)>();

  int ggml_nelements(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_nelements(
      tensor,
    );
  }

  late final _ggml_nelementsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_nelements');
  late final _ggml_nelements =
      _ggml_nelementsPtr.asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  int ggml_nrows(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_nrows(
      tensor,
    );
  }

  late final _ggml_nrowsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_nrows');
  late final _ggml_nrows =
      _ggml_nrowsPtr.asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  int ggml_nbytes(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_nbytes(
      tensor,
    );
  }

  late final _ggml_nbytesPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_nbytes');
  late final _ggml_nbytes =
      _ggml_nbytesPtr.asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  int ggml_nbytes_split(
    ffi.Pointer<ggml_tensor> tensor,
    int nrows_split,
  ) {
    return _ggml_nbytes_split(
      tensor,
      nrows_split,
    );
  }

  late final _ggml_nbytes_splitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_nbytes_split');
  late final _ggml_nbytes_split = _ggml_nbytes_splitPtr
      .asFunction<int Function(ffi.Pointer<ggml_tensor>, int)>();

  int ggml_blck_size(
    int type,
  ) {
    return _ggml_blck_size(
      type,
    );
  }

  late final _ggml_blck_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int32)>>(
          'ggml_blck_size');
  late final _ggml_blck_size =
      _ggml_blck_sizePtr.asFunction<int Function(int)>();

  int ggml_type_size(
    int type,
  ) {
    return _ggml_type_size(
      type,
    );
  }

  late final _ggml_type_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Int32)>>(
          'ggml_type_size');
  late final _ggml_type_size =
      _ggml_type_sizePtr.asFunction<int Function(int)>();

  double ggml_type_sizef(
    int type,
  ) {
    return _ggml_type_sizef(
      type,
    );
  }

  late final _ggml_type_sizefPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int32)>>(
          'ggml_type_sizef');
  late final _ggml_type_sizef =
      _ggml_type_sizefPtr.asFunction<double Function(int)>();

  ffi.Pointer<ffi.Char> ggml_type_name(
    int type,
  ) {
    return _ggml_type_name(
      type,
    );
  }

  late final _ggml_type_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'ggml_type_name');
  late final _ggml_type_name =
      _ggml_type_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> ggml_op_name(
    int op,
  ) {
    return _ggml_op_name(
      op,
    );
  }

  late final _ggml_op_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'ggml_op_name');
  late final _ggml_op_name =
      _ggml_op_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> ggml_op_symbol(
    int op,
  ) {
    return _ggml_op_symbol(
      op,
    );
  }

  late final _ggml_op_symbolPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'ggml_op_symbol');
  late final _ggml_op_symbol =
      _ggml_op_symbolPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ggml_element_size(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_element_size(
      tensor,
    );
  }

  late final _ggml_element_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_element_size');
  late final _ggml_element_size = _ggml_element_sizePtr
      .asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_is_quantized(
    int type,
  ) {
    return _ggml_is_quantized(
      type,
    );
  }

  late final _ggml_is_quantizedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int32)>>(
          'ggml_is_quantized');
  late final _ggml_is_quantized =
      _ggml_is_quantizedPtr.asFunction<bool Function(int)>();

  int ggml_ftype_to_ggml_type(
    int ftype,
  ) {
    return _ggml_ftype_to_ggml_type(
      ftype,
    );
  }

  late final _ggml_ftype_to_ggml_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'ggml_ftype_to_ggml_type');
  late final _ggml_ftype_to_ggml_type =
      _ggml_ftype_to_ggml_typePtr.asFunction<int Function(int)>();

  bool ggml_is_transposed(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_transposed(
      tensor,
    );
  }

  late final _ggml_is_transposedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_transposed');
  late final _ggml_is_transposed = _ggml_is_transposedPtr
      .asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_is_contiguous(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_contiguous(
      tensor,
    );
  }

  late final _ggml_is_contiguousPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_contiguous');
  late final _ggml_is_contiguous = _ggml_is_contiguousPtr
      .asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_is_permuted(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_permuted(
      tensor,
    );
  }

  late final _ggml_is_permutedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_permuted');
  late final _ggml_is_permuted = _ggml_is_permutedPtr
      .asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_are_same_shape(
    ffi.Pointer<ggml_tensor> t0,
    ffi.Pointer<ggml_tensor> t1,
  ) {
    return _ggml_are_same_shape(
      t0,
      t1,
    );
  }

  late final _ggml_are_same_shapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_are_same_shape');
  late final _ggml_are_same_shape = _ggml_are_same_shapePtr.asFunction<
      bool Function(ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  int ggml_tensor_overhead() {
    return _ggml_tensor_overhead();
  }

  late final _ggml_tensor_overheadPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('ggml_tensor_overhead');
  late final _ggml_tensor_overhead =
      _ggml_tensor_overheadPtr.asFunction<int Function()>();

  ffi.Pointer<ggml_context> ggml_init(
    ggml_init_params params,
  ) {
    return _ggml_init(
      params,
    );
  }

  late final _ggml_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_context> Function(ggml_init_params)>>('ggml_init');
  late final _ggml_init = _ggml_initPtr
      .asFunction<ffi.Pointer<ggml_context> Function(ggml_init_params)>();

  void ggml_free(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_free(
      ctx,
    );
  }

  late final _ggml_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_context>)>>(
          'ggml_free');
  late final _ggml_free =
      _ggml_freePtr.asFunction<void Function(ffi.Pointer<ggml_context>)>();

  int ggml_used_mem(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_used_mem(
      ctx,
    );
  }

  late final _ggml_used_memPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_context>)>>(
          'ggml_used_mem');
  late final _ggml_used_mem =
      _ggml_used_memPtr.asFunction<int Function(ffi.Pointer<ggml_context>)>();

  int ggml_used_mem_of_data(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_used_mem_of_data(
      ctx,
    );
  }

  late final _ggml_used_mem_of_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_context>)>>(
          'ggml_used_mem_of_data');
  late final _ggml_used_mem_of_data = _ggml_used_mem_of_dataPtr
      .asFunction<int Function(ffi.Pointer<ggml_context>)>();

  int ggml_set_scratch(
    ffi.Pointer<ggml_context> ctx,
    ggml_scratch scratch,
  ) {
    return _ggml_set_scratch(
      ctx,
      scratch,
    );
  }

  late final _ggml_set_scratchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ggml_context>, ggml_scratch)>>('ggml_set_scratch');
  late final _ggml_set_scratch = _ggml_set_scratchPtr
      .asFunction<int Function(ffi.Pointer<ggml_context>, ggml_scratch)>();

  bool ggml_get_no_alloc(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_get_no_alloc(
      ctx,
    );
  }

  late final _ggml_get_no_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_context>)>>(
          'ggml_get_no_alloc');
  late final _ggml_get_no_alloc = _ggml_get_no_allocPtr
      .asFunction<bool Function(ffi.Pointer<ggml_context>)>();

  void ggml_set_no_alloc(
    ffi.Pointer<ggml_context> ctx,
    bool no_alloc,
  ) {
    return _ggml_set_no_alloc(
      ctx,
      no_alloc,
    );
  }

  late final _ggml_set_no_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ggml_context>, ffi.Bool)>>('ggml_set_no_alloc');
  late final _ggml_set_no_alloc = _ggml_set_no_allocPtr
      .asFunction<void Function(ffi.Pointer<ggml_context>, bool)>();

  void ggml_set_dynamic(
    ffi.Pointer<ggml_context> ctx,
    bool dynamic1,
  ) {
    return _ggml_set_dynamic(
      ctx,
      dynamic1,
    );
  }

  late final _ggml_set_dynamicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ggml_context>, ffi.Bool)>>('ggml_set_dynamic');
  late final _ggml_set_dynamic = _ggml_set_dynamicPtr
      .asFunction<void Function(ffi.Pointer<ggml_context>, bool)>();

  bool ggml_get_dynamic(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_get_dynamic(
      ctx,
    );
  }

  late final _ggml_get_dynamicPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_context>)>>(
          'ggml_get_dynamic');
  late final _ggml_get_dynamic = _ggml_get_dynamicPtr
      .asFunction<bool Function(ffi.Pointer<ggml_context>)>();

  void ggml_hold_dynamic_tensor(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_hold_dynamic_tensor(
      tensor,
    );
  }

  late final _ggml_hold_dynamic_tensorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_hold_dynamic_tensor');
  late final _ggml_hold_dynamic_tensor = _ggml_hold_dynamic_tensorPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor>)>();

  void ggml_free_dynamic_tensor(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_free_dynamic_tensor(
      tensor,
    );
  }

  late final _ggml_free_dynamic_tensorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_free_dynamic_tensor');
  late final _ggml_free_dynamic_tensor = _ggml_free_dynamic_tensorPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor>)>();

  int ggml_dynamic_size() {
    return _ggml_dynamic_size();
  }

  late final _ggml_dynamic_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('ggml_dynamic_size');
  late final _ggml_dynamic_size =
      _ggml_dynamic_sizePtr.asFunction<int Function()>();

  int ggml_max_dynamic_size() {
    return _ggml_max_dynamic_size();
  }

  late final _ggml_max_dynamic_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('ggml_max_dynamic_size');
  late final _ggml_max_dynamic_size =
      _ggml_max_dynamic_sizePtr.asFunction<int Function()>();

  int ggml_curr_max_dynamic_size() {
    return _ggml_curr_max_dynamic_size();
  }

  late final _ggml_curr_max_dynamic_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'ggml_curr_max_dynamic_size');
  late final _ggml_curr_max_dynamic_size =
      _ggml_curr_max_dynamic_sizePtr.asFunction<int Function()>();

  void ggml_reset_curr_max_dynamic_size() {
    return _ggml_reset_curr_max_dynamic_size();
  }

  late final _ggml_reset_curr_max_dynamic_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ggml_reset_curr_max_dynamic_size');
  late final _ggml_reset_curr_max_dynamic_size =
      _ggml_reset_curr_max_dynamic_sizePtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> ggml_get_mem_buffer(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_get_mem_buffer(
      ctx,
    );
  }

  late final _ggml_get_mem_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ggml_context>)>>('ggml_get_mem_buffer');
  late final _ggml_get_mem_buffer = _ggml_get_mem_bufferPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ggml_context>)>();

  int ggml_get_mem_size(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_get_mem_size(
      ctx,
    );
  }

  late final _ggml_get_mem_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_context>)>>(
          'ggml_get_mem_size');
  late final _ggml_get_mem_size = _ggml_get_mem_sizePtr
      .asFunction<int Function(ffi.Pointer<ggml_context>)>();

  int ggml_get_max_tensor_size(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_get_max_tensor_size(
      ctx,
    );
  }

  late final _ggml_get_max_tensor_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_context>)>>(
          'ggml_get_max_tensor_size');
  late final _ggml_get_max_tensor_size = _ggml_get_max_tensor_sizePtr
      .asFunction<int Function(ffi.Pointer<ggml_context>)>();

  ffi.Pointer<ggml_tensor> ggml_new_tensor(
    ffi.Pointer<ggml_context> ctx,
    int type,
    int n_dims,
    ffi.Pointer<ffi.Int64> ne,
  ) {
    return _ggml_new_tensor(
      ctx,
      type,
      n_dims,
      ne,
    );
  }

  late final _ggml_new_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Int32, ffi.Int, ffi.Pointer<ffi.Int64>)>>('ggml_new_tensor');
  late final _ggml_new_tensor = _ggml_new_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, int, int, ffi.Pointer<ffi.Int64>)>();

  ffi.Pointer<ggml_tensor> ggml_new_tensor_1d(
    ffi.Pointer<ggml_context> ctx,
    int type,
    int ne0,
  ) {
    return _ggml_new_tensor_1d(
      ctx,
      type,
      ne0,
    );
  }

  late final _ggml_new_tensor_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Int32, ffi.Int64)>>('ggml_new_tensor_1d');
  late final _ggml_new_tensor_1d = _ggml_new_tensor_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_new_tensor_2d(
    ffi.Pointer<ggml_context> ctx,
    int type,
    int ne0,
    int ne1,
  ) {
    return _ggml_new_tensor_2d(
      ctx,
      type,
      ne0,
      ne1,
    );
  }

  late final _ggml_new_tensor_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Int32, ffi.Int64, ffi.Int64)>>('ggml_new_tensor_2d');
  late final _ggml_new_tensor_2d = _ggml_new_tensor_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_new_tensor_3d(
    ffi.Pointer<ggml_context> ctx,
    int type,
    int ne0,
    int ne1,
    int ne2,
  ) {
    return _ggml_new_tensor_3d(
      ctx,
      type,
      ne0,
      ne1,
      ne2,
    );
  }

  late final _ggml_new_tensor_3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Int32,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_new_tensor_3d');
  late final _ggml_new_tensor_3d = _ggml_new_tensor_3dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_new_tensor_4d(
    ffi.Pointer<ggml_context> ctx,
    int type,
    int ne0,
    int ne1,
    int ne2,
    int ne3,
  ) {
    return _ggml_new_tensor_4d(
      ctx,
      type,
      ne0,
      ne1,
      ne2,
      ne3,
    );
  }

  late final _ggml_new_tensor_4dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Int32,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_new_tensor_4d');
  late final _ggml_new_tensor_4d = _ggml_new_tensor_4dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, int, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_new_i32(
    ffi.Pointer<ggml_context> ctx,
    int value,
  ) {
    return _ggml_new_i32(
      ctx,
      value,
    );
  }

  late final _ggml_new_i32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>, ffi.Int32)>>('ggml_new_i32');
  late final _ggml_new_i32 = _ggml_new_i32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>, int)>();

  ffi.Pointer<ggml_tensor> ggml_new_f32(
    ffi.Pointer<ggml_context> ctx,
    double value,
  ) {
    return _ggml_new_f32(
      ctx,
      value,
    );
  }

  late final _ggml_new_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>, ffi.Float)>>('ggml_new_f32');
  late final _ggml_new_f32 = _ggml_new_f32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>, double)>();

  ffi.Pointer<ggml_tensor> ggml_dup_tensor(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> src,
  ) {
    return _ggml_dup_tensor(
      ctx,
      src,
    );
  }

  late final _ggml_dup_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_dup_tensor');
  late final _ggml_dup_tensor = _ggml_dup_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_view_tensor(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> src,
  ) {
    return _ggml_view_tensor(
      ctx,
      src,
    );
  }

  late final _ggml_view_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_view_tensor');
  late final _ggml_view_tensor = _ggml_view_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_get_tensor(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ggml_get_tensor(
      ctx,
      name,
    );
  }

  late final _ggml_get_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ffi.Char>)>>('ggml_get_tensor');
  late final _ggml_get_tensor = _ggml_get_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ggml_tensor> ggml_set_zero(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_set_zero(
      tensor,
    );
  }

  late final _ggml_set_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_tensor>)>>('ggml_set_zero');
  late final _ggml_set_zero = _ggml_set_zeroPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_set_i32(
    ffi.Pointer<ggml_tensor> tensor,
    int value,
  ) {
    return _ggml_set_i32(
      tensor,
      value,
    );
  }

  late final _ggml_set_i32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_tensor>, ffi.Int32)>>('ggml_set_i32');
  late final _ggml_set_i32 = _ggml_set_i32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_set_f32(
    ffi.Pointer<ggml_tensor> tensor,
    double value,
  ) {
    return _ggml_set_f32(
      tensor,
      value,
    );
  }

  late final _ggml_set_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_set_f32');
  late final _ggml_set_f32 = _ggml_set_f32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_tensor>, double)>();

  int ggml_get_i32_1d(
    ffi.Pointer<ggml_tensor> tensor,
    int i,
  ) {
    return _ggml_get_i32_1d(
      tensor,
      i,
    );
  }

  late final _ggml_get_i32_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_get_i32_1d');
  late final _ggml_get_i32_1d = _ggml_get_i32_1dPtr
      .asFunction<int Function(ffi.Pointer<ggml_tensor>, int)>();

  void ggml_set_i32_1d(
    ffi.Pointer<ggml_tensor> tensor,
    int i,
    int value,
  ) {
    return _ggml_set_i32_1d(
      tensor,
      i,
      value,
    );
  }

  late final _ggml_set_i32_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Int,
              ffi.Int32)>>('ggml_set_i32_1d');
  late final _ggml_set_i32_1d = _ggml_set_i32_1dPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor>, int, int)>();

  double ggml_get_f32_1d(
    ffi.Pointer<ggml_tensor> tensor,
    int i,
  ) {
    return _ggml_get_f32_1d(
      tensor,
      i,
    );
  }

  late final _ggml_get_f32_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_get_f32_1d');
  late final _ggml_get_f32_1d = _ggml_get_f32_1dPtr
      .asFunction<double Function(ffi.Pointer<ggml_tensor>, int)>();

  void ggml_set_f32_1d(
    ffi.Pointer<ggml_tensor> tensor,
    int i,
    double value,
  ) {
    return _ggml_set_f32_1d(
      tensor,
      i,
      value,
    );
  }

  late final _ggml_set_f32_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Int,
              ffi.Float)>>('ggml_set_f32_1d');
  late final _ggml_set_f32_1d = _ggml_set_f32_1dPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor>, int, double)>();

  ffi.Pointer<ffi.Void> ggml_get_data(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_get_data(
      tensor,
    );
  }

  late final _ggml_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ggml_tensor>)>>('ggml_get_data');
  late final _ggml_get_data = _ggml_get_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ffi.Float> ggml_get_data_f32(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_get_data_f32(
      tensor,
    );
  }

  late final _ggml_get_data_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<ggml_tensor>)>>('ggml_get_data_f32');
  late final _ggml_get_data_f32 = _ggml_get_data_f32Ptr
      .asFunction<ffi.Pointer<ffi.Float> Function(ffi.Pointer<ggml_tensor>)>();

  int ggml_get_unary_op(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_get_unary_op(
      tensor,
    );
  }

  late final _ggml_get_unary_opPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_get_unary_op');
  late final _ggml_get_unary_op = _ggml_get_unary_opPtr
      .asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ffi.Char> ggml_get_name(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_get_name(
      tensor,
    );
  }

  late final _ggml_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ggml_tensor>)>>('ggml_get_name');
  late final _ggml_get_name = _ggml_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_set_name(
    ffi.Pointer<ggml_tensor> tensor,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ggml_set_name(
      tensor,
      name,
    );
  }

  late final _ggml_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Char>)>>('ggml_set_name');
  late final _ggml_set_name = _ggml_set_namePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ggml_tensor> ggml_format_name(
    ffi.Pointer<ggml_tensor> tensor,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _ggml_format_name(
      tensor,
      fmt,
    );
  }

  late final _ggml_format_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Char>)>>('ggml_format_name');
  late final _ggml_format_name = _ggml_format_namePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ggml_tensor> ggml_dup(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_dup(
      ctx,
      a,
    );
  }

  late final _ggml_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_dup');
  late final _ggml_dup = _ggml_dupPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_dup_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_dup_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_dup_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_dup_inplace');
  late final _ggml_dup_inplace = _ggml_dup_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_add(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_add(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_add');
  late final _ggml_add = _ggml_addPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_add_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_add_inplace(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_add_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_add_inplace');
  late final _ggml_add_inplace = _ggml_add_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_add1(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_add1(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_add1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_add1');
  late final _ggml_add1 = _ggml_add1Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_add1_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_add1_inplace(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_add1_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_add1_inplace');
  late final _ggml_add1_inplace = _ggml_add1_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_acc(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int nb1,
    int nb2,
    int nb3,
    int offset,
  ) {
    return _ggml_acc(
      ctx,
      a,
      b,
      nb1,
      nb2,
      nb3,
      offset,
    );
  }

  late final _ggml_accPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('ggml_acc');
  late final _ggml_acc = _ggml_accPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int)>();

  ffi.Pointer<ggml_tensor> ggml_acc_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int nb1,
    int nb2,
    int nb3,
    int offset,
  ) {
    return _ggml_acc_inplace(
      ctx,
      a,
      b,
      nb1,
      nb2,
      nb3,
      offset,
    );
  }

  late final _ggml_acc_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('ggml_acc_inplace');
  late final _ggml_acc_inplace = _ggml_acc_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int)>();

  ffi.Pointer<ggml_tensor> ggml_sub(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_sub(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_sub');
  late final _ggml_sub = _ggml_subPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sub_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_sub_inplace(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_sub_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sub_inplace');
  late final _ggml_sub_inplace = _ggml_sub_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_mul(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_mul(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_mul');
  late final _ggml_mul = _ggml_mulPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_mul_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_mul_inplace(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_mul_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_mul_inplace');
  late final _ggml_mul_inplace = _ggml_mul_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_div(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_div(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_div');
  late final _ggml_div = _ggml_divPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_div_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_div_inplace(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_div_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_div_inplace');
  late final _ggml_div_inplace = _ggml_div_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sqr(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sqr(
      ctx,
      a,
    );
  }

  late final _ggml_sqrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sqr');
  late final _ggml_sqr = _ggml_sqrPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sqr_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sqr_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_sqr_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sqr_inplace');
  late final _ggml_sqr_inplace = _ggml_sqr_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sqrt(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sqrt(
      ctx,
      a,
    );
  }

  late final _ggml_sqrtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sqrt');
  late final _ggml_sqrt = _ggml_sqrtPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sqrt_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sqrt_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_sqrt_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sqrt_inplace');
  late final _ggml_sqrt_inplace = _ggml_sqrt_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_log(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_log(
      ctx,
      a,
    );
  }

  late final _ggml_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_log');
  late final _ggml_log = _ggml_logPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_log_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_log_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_log_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_log_inplace');
  late final _ggml_log_inplace = _ggml_log_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sum(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sum(
      ctx,
      a,
    );
  }

  late final _ggml_sumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sum');
  late final _ggml_sum = _ggml_sumPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sum_rows(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sum_rows(
      ctx,
      a,
    );
  }

  late final _ggml_sum_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sum_rows');
  late final _ggml_sum_rows = _ggml_sum_rowsPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_mean(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_mean(
      ctx,
      a,
    );
  }

  late final _ggml_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_mean');
  late final _ggml_mean = _ggml_meanPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_argmax(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_argmax(
      ctx,
      a,
    );
  }

  late final _ggml_argmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_argmax');
  late final _ggml_argmax = _ggml_argmaxPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_repeat(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_repeat(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_repeatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_repeat');
  late final _ggml_repeat = _ggml_repeatPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_concat(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_concat(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_concatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_concat');
  late final _ggml_concat = _ggml_concatPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_repeat_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_repeat_back(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_repeat_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_repeat_back');
  late final _ggml_repeat_back = _ggml_repeat_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_abs(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_abs(
      ctx,
      a,
    );
  }

  late final _ggml_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_abs');
  late final _ggml_abs = _ggml_absPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_abs_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_abs_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_abs_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_abs_inplace');
  late final _ggml_abs_inplace = _ggml_abs_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sgn(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sgn(
      ctx,
      a,
    );
  }

  late final _ggml_sgnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sgn');
  late final _ggml_sgn = _ggml_sgnPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sgn_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sgn_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_sgn_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sgn_inplace');
  late final _ggml_sgn_inplace = _ggml_sgn_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_neg(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_neg(
      ctx,
      a,
    );
  }

  late final _ggml_negPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_neg');
  late final _ggml_neg = _ggml_negPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_neg_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_neg_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_neg_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_neg_inplace');
  late final _ggml_neg_inplace = _ggml_neg_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_step(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_step(
      ctx,
      a,
    );
  }

  late final _ggml_stepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_step');
  late final _ggml_step = _ggml_stepPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_step_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_step_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_step_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_step_inplace');
  late final _ggml_step_inplace = _ggml_step_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_tanh(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_tanh(
      ctx,
      a,
    );
  }

  late final _ggml_tanhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_tanh');
  late final _ggml_tanh = _ggml_tanhPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_tanh_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_tanh_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_tanh_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_tanh_inplace');
  late final _ggml_tanh_inplace = _ggml_tanh_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_elu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_elu(
      ctx,
      a,
    );
  }

  late final _ggml_eluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_elu');
  late final _ggml_elu = _ggml_eluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_elu_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_elu_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_elu_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_elu_inplace');
  late final _ggml_elu_inplace = _ggml_elu_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_relu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_relu(
      ctx,
      a,
    );
  }

  late final _ggml_reluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_relu');
  late final _ggml_relu = _ggml_reluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_relu_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_relu_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_relu_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_relu_inplace');
  late final _ggml_relu_inplace = _ggml_relu_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_gelu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_gelu(
      ctx,
      a,
    );
  }

  late final _ggml_geluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_gelu');
  late final _ggml_gelu = _ggml_geluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_gelu_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_gelu_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_gelu_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_gelu_inplace');
  late final _ggml_gelu_inplace = _ggml_gelu_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_gelu_quick(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_gelu_quick(
      ctx,
      a,
    );
  }

  late final _ggml_gelu_quickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_gelu_quick');
  late final _ggml_gelu_quick = _ggml_gelu_quickPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_gelu_quick_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_gelu_quick_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_gelu_quick_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_gelu_quick_inplace');
  late final _ggml_gelu_quick_inplace = _ggml_gelu_quick_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_silu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_silu(
      ctx,
      a,
    );
  }

  late final _ggml_siluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_silu');
  late final _ggml_silu = _ggml_siluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_silu_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_silu_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_silu_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_silu_inplace');
  late final _ggml_silu_inplace = _ggml_silu_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_silu_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_silu_back(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_silu_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_silu_back');
  late final _ggml_silu_back = _ggml_silu_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_norm(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_norm(
      ctx,
      a,
    );
  }

  late final _ggml_normPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_norm');
  late final _ggml_norm = _ggml_normPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_norm_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_norm_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_norm_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_norm_inplace');
  late final _ggml_norm_inplace = _ggml_norm_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_group_norm(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_group_norm(
      ctx,
      a,
    );
  }

  late final _ggml_group_normPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_group_norm');
  late final _ggml_group_norm = _ggml_group_normPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_group_norm_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_group_norm_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_group_norm_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_group_norm_inplace');
  late final _ggml_group_norm_inplace = _ggml_group_norm_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_rms_norm(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double eps,
  ) {
    return _ggml_rms_norm(
      ctx,
      a,
      eps,
    );
  }

  late final _ggml_rms_normPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_rms_norm');
  late final _ggml_rms_norm = _ggml_rms_normPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, double)>();

  ffi.Pointer<ggml_tensor> ggml_rms_norm_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double eps,
  ) {
    return _ggml_rms_norm_inplace(
      ctx,
      a,
      eps,
    );
  }

  late final _ggml_rms_norm_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_rms_norm_inplace');
  late final _ggml_rms_norm_inplace = _ggml_rms_norm_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, double)>();

  ffi.Pointer<ggml_tensor> ggml_rms_norm_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_rms_norm_back(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_rms_norm_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_rms_norm_back');
  late final _ggml_rms_norm_back = _ggml_rms_norm_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_mul_mat(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_mul_mat(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_mul_matPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_mul_mat');
  late final _ggml_mul_mat = _ggml_mul_matPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_out_prod(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_out_prod(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_out_prodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_out_prod');
  late final _ggml_out_prod = _ggml_out_prodPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_scale(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_scale(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_scale');
  late final _ggml_scale = _ggml_scalePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_scale_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_scale_inplace(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_scale_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_scale_inplace');
  late final _ggml_scale_inplace = _ggml_scale_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_set(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int nb1,
    int nb2,
    int nb3,
    int offset,
  ) {
    return _ggml_set(
      ctx,
      a,
      b,
      nb1,
      nb2,
      nb3,
      offset,
    );
  }

  late final _ggml_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('ggml_set');
  late final _ggml_set = _ggml_setPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int)>();

  ffi.Pointer<ggml_tensor> ggml_set_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int nb1,
    int nb2,
    int nb3,
    int offset,
  ) {
    return _ggml_set_inplace(
      ctx,
      a,
      b,
      nb1,
      nb2,
      nb3,
      offset,
    );
  }

  late final _ggml_set_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('ggml_set_inplace');
  late final _ggml_set_inplace = _ggml_set_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int)>();

  ffi.Pointer<ggml_tensor> ggml_set_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int offset,
  ) {
    return _ggml_set_1d(
      ctx,
      a,
      b,
      offset,
    );
  }

  late final _ggml_set_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size)>>('ggml_set_1d');
  late final _ggml_set_1d = _ggml_set_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_set_1d_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int offset,
  ) {
    return _ggml_set_1d_inplace(
      ctx,
      a,
      b,
      offset,
    );
  }

  late final _ggml_set_1d_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size)>>('ggml_set_1d_inplace');
  late final _ggml_set_1d_inplace = _ggml_set_1d_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_set_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int nb1,
    int offset,
  ) {
    return _ggml_set_2d(
      ctx,
      a,
      b,
      nb1,
      offset,
    );
  }

  late final _ggml_set_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size,
              ffi.Size)>>('ggml_set_2d');
  late final _ggml_set_2d = _ggml_set_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_set_2d_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int nb1,
    int offset,
  ) {
    return _ggml_set_2d_inplace(
      ctx,
      a,
      b,
      nb1,
      offset,
    );
  }

  late final _ggml_set_2d_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size,
              ffi.Size)>>('ggml_set_2d_inplace');
  late final _ggml_set_2d_inplace = _ggml_set_2d_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_cpy(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_cpy(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_cpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_cpy');
  late final _ggml_cpy = _ggml_cpyPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_cpy_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_cpy_inplace(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_cpy_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_cpy_inplace');
  late final _ggml_cpy_inplace = _ggml_cpy_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_cont(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_cont(
      ctx,
      a,
    );
  }

  late final _ggml_contPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_cont');
  late final _ggml_cont = _ggml_contPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_cont_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_cont_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_cont_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_cont_inplace');
  late final _ggml_cont_inplace = _ggml_cont_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_reshape(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_reshape(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_reshapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_reshape');
  late final _ggml_reshape = _ggml_reshapePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_reshape_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
  ) {
    return _ggml_reshape_1d(
      ctx,
      a,
      ne0,
    );
  }

  late final _ggml_reshape_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int64)>>('ggml_reshape_1d');
  late final _ggml_reshape_1d = _ggml_reshape_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_reshape_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
  ) {
    return _ggml_reshape_2d(
      ctx,
      a,
      ne0,
      ne1,
    );
  }

  late final _ggml_reshape_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64)>>('ggml_reshape_2d');
  late final _ggml_reshape_2d = _ggml_reshape_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_reshape_3d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
  ) {
    return _ggml_reshape_3d(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
    );
  }

  late final _ggml_reshape_3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_reshape_3d');
  late final _ggml_reshape_3d = _ggml_reshape_3dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_reshape_4d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
    int ne3,
  ) {
    return _ggml_reshape_4d(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
      ne3,
    );
  }

  late final _ggml_reshape_4dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_reshape_4d');
  late final _ggml_reshape_4d = _ggml_reshape_4dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_view_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int offset,
  ) {
    return _ggml_view_1d(
      ctx,
      a,
      ne0,
      offset,
    );
  }

  late final _ggml_view_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int64, ffi.Size)>>('ggml_view_1d');
  late final _ggml_view_1d = _ggml_view_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_view_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int nb1,
    int offset,
  ) {
    return _ggml_view_2d(
      ctx,
      a,
      ne0,
      ne1,
      nb1,
      offset,
    );
  }

  late final _ggml_view_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Size,
              ffi.Size)>>('ggml_view_2d');
  late final _ggml_view_2d = _ggml_view_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_view_3d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
    int nb1,
    int nb2,
    int offset,
  ) {
    return _ggml_view_3d(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
      nb1,
      nb2,
      offset,
    );
  }

  late final _ggml_view_3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('ggml_view_3d');
  late final _ggml_view_3d = _ggml_view_3dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_view_4d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
    int ne3,
    int nb1,
    int nb2,
    int nb3,
    int offset,
  ) {
    return _ggml_view_4d(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
      ne3,
      nb1,
      nb2,
      nb3,
      offset,
    );
  }

  late final _ggml_view_4dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('ggml_view_4d');
  late final _ggml_view_4d = _ggml_view_4dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_permute(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int axis0,
    int axis1,
    int axis2,
    int axis3,
  ) {
    return _ggml_permute(
      ctx,
      a,
      axis0,
      axis1,
      axis2,
      axis3,
    );
  }

  late final _ggml_permutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_permute');
  late final _ggml_permute = _ggml_permutePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_transpose(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_transpose(
      ctx,
      a,
    );
  }

  late final _ggml_transposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_transpose');
  late final _ggml_transpose = _ggml_transposePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_get_rows(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_get_rows(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_get_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_get_rows');
  late final _ggml_get_rows = _ggml_get_rowsPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_get_rows_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
  ) {
    return _ggml_get_rows_back(
      ctx,
      a,
      b,
      c,
    );
  }

  late final _ggml_get_rows_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_get_rows_back');
  late final _ggml_get_rows_back = _ggml_get_rows_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_diag(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_diag(
      ctx,
      a,
    );
  }

  late final _ggml_diagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_diag');
  late final _ggml_diag = _ggml_diagPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_diag_mask_inf(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
  ) {
    return _ggml_diag_mask_inf(
      ctx,
      a,
      n_past,
    );
  }

  late final _ggml_diag_mask_infPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_diag_mask_inf');
  late final _ggml_diag_mask_inf = _ggml_diag_mask_infPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_diag_mask_inf_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
  ) {
    return _ggml_diag_mask_inf_inplace(
      ctx,
      a,
      n_past,
    );
  }

  late final _ggml_diag_mask_inf_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int)>>('ggml_diag_mask_inf_inplace');
  late final _ggml_diag_mask_inf_inplace =
      _ggml_diag_mask_inf_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_diag_mask_zero(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
  ) {
    return _ggml_diag_mask_zero(
      ctx,
      a,
      n_past,
    );
  }

  late final _ggml_diag_mask_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_diag_mask_zero');
  late final _ggml_diag_mask_zero = _ggml_diag_mask_zeroPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_diag_mask_zero_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
  ) {
    return _ggml_diag_mask_zero_inplace(
      ctx,
      a,
      n_past,
    );
  }

  late final _ggml_diag_mask_zero_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int)>>('ggml_diag_mask_zero_inplace');
  late final _ggml_diag_mask_zero_inplace =
      _ggml_diag_mask_zero_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_soft_max(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_soft_max(
      ctx,
      a,
    );
  }

  late final _ggml_soft_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_soft_max');
  late final _ggml_soft_max = _ggml_soft_maxPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_soft_max_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_soft_max_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_soft_max_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_soft_max_inplace');
  late final _ggml_soft_max_inplace = _ggml_soft_max_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_soft_max_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_soft_max_back(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_soft_max_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_soft_max_back');
  late final _ggml_soft_max_back = _ggml_soft_max_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_soft_max_back_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_soft_max_back_inplace(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_soft_max_back_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_soft_max_back_inplace');
  late final _ggml_soft_max_back_inplace =
      _ggml_soft_max_back_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_rope(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
    int n_dims,
    int mode,
    int n_ctx,
  ) {
    return _ggml_rope(
      ctx,
      a,
      n_past,
      n_dims,
      mode,
      n_ctx,
    );
  }

  late final _ggml_ropePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_rope');
  late final _ggml_rope = _ggml_ropePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_rope_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
    int n_dims,
    int mode,
    int n_ctx,
  ) {
    return _ggml_rope_inplace(
      ctx,
      a,
      n_past,
      n_dims,
      mode,
      n_ctx,
    );
  }

  late final _ggml_rope_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_rope_inplace');
  late final _ggml_rope_inplace = _ggml_rope_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_rope_custom(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
    int n_dims,
    int mode,
    int n_ctx,
    double freq_base,
    double freq_scale,
  ) {
    return _ggml_rope_custom(
      ctx,
      a,
      n_past,
      n_dims,
      mode,
      n_ctx,
      freq_base,
      freq_scale,
    );
  }

  late final _ggml_rope_customPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float)>>('ggml_rope_custom');
  late final _ggml_rope_custom = _ggml_rope_customPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int, double, double)>();

  ffi.Pointer<ggml_tensor> ggml_rope_custom_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
    int n_dims,
    int mode,
    int n_ctx,
    double freq_base,
    double freq_scale,
  ) {
    return _ggml_rope_custom_inplace(
      ctx,
      a,
      n_past,
      n_dims,
      mode,
      n_ctx,
      freq_base,
      freq_scale,
    );
  }

  late final _ggml_rope_custom_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float)>>('ggml_rope_custom_inplace');
  late final _ggml_rope_custom_inplace =
      _ggml_rope_custom_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, int, int, int, int, double, double)>();

  ffi.Pointer<ggml_tensor> ggml_rope_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
    int n_dims,
    int mode,
    int n_ctx,
  ) {
    return _ggml_rope_back(
      ctx,
      a,
      n_past,
      n_dims,
      mode,
      n_ctx,
    );
  }

  late final _ggml_rope_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_rope_back');
  late final _ggml_rope_back = _ggml_rope_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_alibi(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
    int n_head,
    double bias_max,
  ) {
    return _ggml_alibi(
      ctx,
      a,
      n_past,
      n_head,
      bias_max,
    );
  }

  late final _ggml_alibiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Float)>>('ggml_alibi');
  late final _ggml_alibi = _ggml_alibiPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, double)>();

  ffi.Pointer<ggml_tensor> ggml_clamp(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double min,
    double max,
  ) {
    return _ggml_clamp(
      ctx,
      a,
      min,
      max,
    );
  }

  late final _ggml_clampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float, ffi.Float)>>('ggml_clamp');
  late final _ggml_clamp = _ggml_clampPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, double, double)>();

  ffi.Pointer<ggml_tensor> ggml_conv_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s0,
    int p0,
    int d0,
  ) {
    return _ggml_conv_1d(
      ctx,
      a,
      b,
      s0,
      p0,
      d0,
    );
  }

  late final _ggml_conv_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_conv_1d');
  late final _ggml_conv_1d = _ggml_conv_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_conv_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s0,
    int s1,
    int p0,
    int p1,
    int d0,
    int d1,
  ) {
    return _ggml_conv_2d(
      ctx,
      a,
      b,
      s0,
      s1,
      p0,
      p1,
      d0,
      d1,
    );
  }

  late final _ggml_conv_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_conv_2d');
  late final _ggml_conv_2d = _ggml_conv_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int,
          int,
          int)>();

  ffi.Pointer<ggml_tensor> ggml_conv_1d_ph(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s,
    int d,
  ) {
    return _ggml_conv_1d_ph(
      ctx,
      a,
      b,
      s,
      d,
    );
  }

  late final _ggml_conv_1d_phPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int)>>('ggml_conv_1d_ph');
  late final _ggml_conv_1d_ph = _ggml_conv_1d_phPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_pool_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int op,
    int k0,
    int s0,
    int p0,
  ) {
    return _ggml_pool_1d(
      ctx,
      a,
      op,
      k0,
      s0,
      p0,
    );
  }

  late final _ggml_pool_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int32,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_pool_1d');
  late final _ggml_pool_1d = _ggml_pool_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_pool_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int op,
    int k0,
    int k1,
    int s0,
    int s1,
    int p0,
    int p1,
  ) {
    return _ggml_pool_2d(
      ctx,
      a,
      op,
      k0,
      k1,
      s0,
      s1,
      p0,
      p1,
    );
  }

  late final _ggml_pool_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int32,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_pool_2d');
  late final _ggml_pool_2d = _ggml_pool_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_upscale(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_upscale(
      ctx,
      a,
    );
  }

  late final _ggml_upscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_upscale');
  late final _ggml_upscale = _ggml_upscalePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_flash_attn(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> q,
    ffi.Pointer<ggml_tensor> k,
    ffi.Pointer<ggml_tensor> v,
    bool masked,
  ) {
    return _ggml_flash_attn(
      ctx,
      q,
      k,
      v,
      masked,
    );
  }

  late final _ggml_flash_attnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Bool)>>('ggml_flash_attn');
  late final _ggml_flash_attn = _ggml_flash_attnPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          bool)>();

  ffi.Pointer<ggml_tensor> ggml_flash_attn_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> q,
    ffi.Pointer<ggml_tensor> k,
    ffi.Pointer<ggml_tensor> v,
    ffi.Pointer<ggml_tensor> d,
    bool masked,
  ) {
    return _ggml_flash_attn_back(
      ctx,
      q,
      k,
      v,
      d,
      masked,
    );
  }

  late final _ggml_flash_attn_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Bool)>>('ggml_flash_attn_back');
  late final _ggml_flash_attn_back = _ggml_flash_attn_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          bool)>();

  ffi.Pointer<ggml_tensor> ggml_flash_ff(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b0,
    ffi.Pointer<ggml_tensor> b1,
    ffi.Pointer<ggml_tensor> c0,
    ffi.Pointer<ggml_tensor> c1,
  ) {
    return _ggml_flash_ff(
      ctx,
      a,
      b0,
      b1,
      c0,
      c1,
    );
  }

  late final _ggml_flash_ffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_flash_ff');
  late final _ggml_flash_ff = _ggml_flash_ffPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_win_part(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int w,
  ) {
    return _ggml_win_part(
      ctx,
      a,
      w,
    );
  }

  late final _ggml_win_partPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_win_part');
  late final _ggml_win_part = _ggml_win_partPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_win_unpart(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int w0,
    int h0,
    int w,
  ) {
    return _ggml_win_unpart(
      ctx,
      a,
      w0,
      h0,
      w,
    );
  }

  late final _ggml_win_unpartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_win_unpart');
  late final _ggml_win_unpart = _ggml_win_unpartPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_unary(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int op,
  ) {
    return _ggml_unary(
      ctx,
      a,
      op,
    );
  }

  late final _ggml_unaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int32)>>('ggml_unary');
  late final _ggml_unary = _ggml_unaryPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_unary_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int op,
  ) {
    return _ggml_unary_inplace(
      ctx,
      a,
      op,
    );
  }

  late final _ggml_unary_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int32)>>('ggml_unary_inplace');
  late final _ggml_unary_inplace = _ggml_unary_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_map_unary_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_unary_op_f32_t fun,
  ) {
    return _ggml_map_unary_f32(
      ctx,
      a,
      fun,
    );
  }

  late final _ggml_map_unary_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ggml_unary_op_f32_t)>>('ggml_map_unary_f32');
  late final _ggml_map_unary_f32 = _ggml_map_unary_f32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ggml_unary_op_f32_t)>();

  ffi.Pointer<ggml_tensor> ggml_map_unary_inplace_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_unary_op_f32_t fun,
  ) {
    return _ggml_map_unary_inplace_f32(
      ctx,
      a,
      fun,
    );
  }

  late final _ggml_map_unary_inplace_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ggml_unary_op_f32_t)>>('ggml_map_unary_inplace_f32');
  late final _ggml_map_unary_inplace_f32 =
      _ggml_map_unary_inplace_f32Ptr.asFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ggml_unary_op_f32_t)>();

  ffi.Pointer<ggml_tensor> ggml_map_binary_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ggml_binary_op_f32_t fun,
  ) {
    return _ggml_map_binary_f32(
      ctx,
      a,
      b,
      fun,
    );
  }

  late final _ggml_map_binary_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_binary_op_f32_t)>>('ggml_map_binary_f32');
  late final _ggml_map_binary_f32 = _ggml_map_binary_f32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ggml_binary_op_f32_t)>();

  ffi.Pointer<ggml_tensor> ggml_map_binary_inplace_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ggml_binary_op_f32_t fun,
  ) {
    return _ggml_map_binary_inplace_f32(
      ctx,
      a,
      b,
      fun,
    );
  }

  late final _ggml_map_binary_inplace_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_binary_op_f32_t)>>('ggml_map_binary_inplace_f32');
  late final _ggml_map_binary_inplace_f32 =
      _ggml_map_binary_inplace_f32Ptr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_binary_op_f32_t)>();

  ffi.Pointer<ggml_tensor> ggml_map_custom1_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_custom1_op_f32_t fun,
  ) {
    return _ggml_map_custom1_f32(
      ctx,
      a,
      fun,
    );
  }

  late final _ggml_map_custom1_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom1_op_f32_t)>>('ggml_map_custom1_f32');
  late final _ggml_map_custom1_f32 = _ggml_map_custom1_f32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ggml_custom1_op_f32_t)>();

  ffi.Pointer<ggml_tensor> ggml_map_custom1_inplace_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_custom1_op_f32_t fun,
  ) {
    return _ggml_map_custom1_inplace_f32(
      ctx,
      a,
      fun,
    );
  }

  late final _ggml_map_custom1_inplace_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom1_op_f32_t)>>('ggml_map_custom1_inplace_f32');
  late final _ggml_map_custom1_inplace_f32 =
      _ggml_map_custom1_inplace_f32Ptr.asFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ggml_custom1_op_f32_t)>();

  ffi.Pointer<ggml_tensor> ggml_map_custom2_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ggml_custom2_op_f32_t fun,
  ) {
    return _ggml_map_custom2_f32(
      ctx,
      a,
      b,
      fun,
    );
  }

  late final _ggml_map_custom2_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom2_op_f32_t)>>('ggml_map_custom2_f32');
  late final _ggml_map_custom2_f32 = _ggml_map_custom2_f32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ggml_custom2_op_f32_t)>();

  ffi.Pointer<ggml_tensor> ggml_map_custom2_inplace_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ggml_custom2_op_f32_t fun,
  ) {
    return _ggml_map_custom2_inplace_f32(
      ctx,
      a,
      b,
      fun,
    );
  }

  late final _ggml_map_custom2_inplace_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom2_op_f32_t)>>('ggml_map_custom2_inplace_f32');
  late final _ggml_map_custom2_inplace_f32 =
      _ggml_map_custom2_inplace_f32Ptr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom2_op_f32_t)>();

  ffi.Pointer<ggml_tensor> ggml_map_custom3_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    ggml_custom3_op_f32_t fun,
  ) {
    return _ggml_map_custom3_f32(
      ctx,
      a,
      b,
      c,
      fun,
    );
  }

  late final _ggml_map_custom3_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom3_op_f32_t)>>('ggml_map_custom3_f32');
  late final _ggml_map_custom3_f32 = _ggml_map_custom3_f32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ggml_custom3_op_f32_t)>();

  ffi.Pointer<ggml_tensor> ggml_map_custom3_inplace_f32(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    ggml_custom3_op_f32_t fun,
  ) {
    return _ggml_map_custom3_inplace_f32(
      ctx,
      a,
      b,
      c,
      fun,
    );
  }

  late final _ggml_map_custom3_inplace_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom3_op_f32_t)>>('ggml_map_custom3_inplace_f32');
  late final _ggml_map_custom3_inplace_f32 =
      _ggml_map_custom3_inplace_f32Ptr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom3_op_f32_t)>();

  ffi.Pointer<ggml_tensor> ggml_map_custom1(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_custom1_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_map_custom1(
      ctx,
      a,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_map_custom1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom1_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_map_custom1');
  late final _ggml_map_custom1 = _ggml_map_custom1Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ggml_custom1_op_t,
          int,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ggml_tensor> ggml_map_custom1_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_custom1_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_map_custom1_inplace(
      ctx,
      a,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_map_custom1_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom1_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_map_custom1_inplace');
  late final _ggml_map_custom1_inplace =
      _ggml_map_custom1_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom1_op_t,
              int,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ggml_tensor> ggml_map_custom2(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ggml_custom2_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_map_custom2(
      ctx,
      a,
      b,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_map_custom2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom2_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_map_custom2');
  late final _ggml_map_custom2 = _ggml_map_custom2Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ggml_custom2_op_t,
          int,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ggml_tensor> ggml_map_custom2_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ggml_custom2_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_map_custom2_inplace(
      ctx,
      a,
      b,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_map_custom2_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom2_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_map_custom2_inplace');
  late final _ggml_map_custom2_inplace =
      _ggml_map_custom2_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom2_op_t,
              int,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ggml_tensor> ggml_map_custom3(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    ggml_custom3_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_map_custom3(
      ctx,
      a,
      b,
      c,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_map_custom3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom3_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_map_custom3');
  late final _ggml_map_custom3 = _ggml_map_custom3Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ggml_custom3_op_t,
          int,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ggml_tensor> ggml_map_custom3_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    ggml_custom3_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_map_custom3_inplace(
      ctx,
      a,
      b,
      c,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_map_custom3_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom3_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_map_custom3_inplace');
  late final _ggml_map_custom3_inplace =
      _ggml_map_custom3_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom3_op_t,
              int,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ggml_tensor> ggml_cross_entropy_loss(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_cross_entropy_loss(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_cross_entropy_lossPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_cross_entropy_loss');
  late final _ggml_cross_entropy_loss = _ggml_cross_entropy_lossPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_cross_entropy_loss_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
  ) {
    return _ggml_cross_entropy_loss_back(
      ctx,
      a,
      b,
      c,
    );
  }

  late final _ggml_cross_entropy_loss_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_cross_entropy_loss_back');
  late final _ggml_cross_entropy_loss_back =
      _ggml_cross_entropy_loss_backPtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>();

  void ggml_set_param(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_set_param(
      ctx,
      tensor,
    );
  }

  late final _ggml_set_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_set_param');
  late final _ggml_set_param = _ggml_set_paramPtr.asFunction<
      void Function(ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  void ggml_build_forward_expand(
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_build_forward_expand(
      cgraph,
      tensor,
    );
  }

  late final _ggml_build_forward_expandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ggml_tensor>)>>('ggml_build_forward_expand');
  late final _ggml_build_forward_expand =
      _ggml_build_forward_expandPtr.asFunction<
          void Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_tensor>)>();

  ggml_cgraph ggml_build_forward(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_build_forward(
      tensor,
    );
  }

  late final _ggml_build_forwardPtr = _lookup<
          ffi.NativeFunction<ggml_cgraph Function(ffi.Pointer<ggml_tensor>)>>(
      'ggml_build_forward');
  late final _ggml_build_forward = _ggml_build_forwardPtr
      .asFunction<ggml_cgraph Function(ffi.Pointer<ggml_tensor>)>();

  ggml_cgraph ggml_build_backward(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_cgraph> gf,
    bool keep,
  ) {
    return _ggml_build_backward(
      ctx,
      gf,
      keep,
    );
  }

  late final _ggml_build_backwardPtr = _lookup<
      ffi.NativeFunction<
          ggml_cgraph Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_cgraph>, ffi.Bool)>>('ggml_build_backward');
  late final _ggml_build_backward = _ggml_build_backwardPtr.asFunction<
      ggml_cgraph Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_cgraph>, bool)>();

  ffi.Pointer<ggml_cgraph> ggml_new_graph(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_new_graph(
      ctx,
    );
  }

  late final _ggml_new_graphPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_cgraph> Function(
              ffi.Pointer<ggml_context>)>>('ggml_new_graph');
  late final _ggml_new_graph = _ggml_new_graphPtr.asFunction<
      ffi.Pointer<ggml_cgraph> Function(ffi.Pointer<ggml_context>)>();

  ffi.Pointer<ggml_cgraph> ggml_build_forward_ctx(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_build_forward_ctx(
      ctx,
      tensor,
    );
  }

  late final _ggml_build_forward_ctxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_cgraph> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_build_forward_ctx');
  late final _ggml_build_forward_ctx = _ggml_build_forward_ctxPtr.asFunction<
      ffi.Pointer<ggml_cgraph> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  int ggml_graph_overhead() {
    return _ggml_graph_overhead();
  }

  late final _ggml_graph_overheadPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('ggml_graph_overhead');
  late final _ggml_graph_overhead =
      _ggml_graph_overheadPtr.asFunction<int Function()>();

  ggml_cplan ggml_graph_plan(
    ffi.Pointer<ggml_cgraph> cgraph,
    int n_threads,
  ) {
    return _ggml_graph_plan(
      cgraph,
      n_threads,
    );
  }

  late final _ggml_graph_planPtr = _lookup<
      ffi.NativeFunction<
          ggml_cplan Function(
              ffi.Pointer<ggml_cgraph>, ffi.Int)>>('ggml_graph_plan');
  late final _ggml_graph_plan = _ggml_graph_planPtr
      .asFunction<ggml_cplan Function(ffi.Pointer<ggml_cgraph>, int)>();

  int ggml_graph_compute(
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ggml_cplan> cplan,
  ) {
    return _ggml_graph_compute(
      cgraph,
      cplan,
    );
  }

  late final _ggml_graph_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ggml_cplan>)>>('ggml_graph_compute');
  late final _ggml_graph_compute = _ggml_graph_computePtr.asFunction<
      int Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_cplan>)>();

  void ggml_graph_reset(
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_graph_reset(
      cgraph,
    );
  }

  late final _ggml_graph_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_cgraph>)>>(
          'ggml_graph_reset');
  late final _ggml_graph_reset = _ggml_graph_resetPtr
      .asFunction<void Function(ffi.Pointer<ggml_cgraph>)>();

  void ggml_graph_compute_with_ctx(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_cgraph> cgraph,
    int n_threads,
  ) {
    return _ggml_graph_compute_with_ctx(
      ctx,
      cgraph,
      n_threads,
    );
  }

  late final _ggml_graph_compute_with_ctxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_context>, ffi.Pointer<ggml_cgraph>,
              ffi.Int)>>('ggml_graph_compute_with_ctx');
  late final _ggml_graph_compute_with_ctx =
      _ggml_graph_compute_with_ctxPtr.asFunction<
          void Function(
              ffi.Pointer<ggml_context>, ffi.Pointer<ggml_cgraph>, int)>();

  ffi.Pointer<ggml_tensor> ggml_graph_get_tensor(
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ggml_graph_get_tensor(
      cgraph,
      name,
    );
  }

  late final _ggml_graph_get_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ffi.Char>)>>('ggml_graph_get_tensor');
  late final _ggml_graph_get_tensor = _ggml_graph_get_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_cgraph>, ffi.Pointer<ffi.Char>)>();

  void ggml_graph_export(
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ffi.Char> fname,
  ) {
    return _ggml_graph_export(
      cgraph,
      fname,
    );
  }

  late final _ggml_graph_exportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ffi.Char>)>>('ggml_graph_export');
  late final _ggml_graph_export = _ggml_graph_exportPtr.asFunction<
      void Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ffi.Char>)>();

  ggml_cgraph ggml_graph_import(
    ffi.Pointer<ffi.Char> fname,
    ffi.Pointer<ffi.Pointer<ggml_context>> ctx_data,
    ffi.Pointer<ffi.Pointer<ggml_context>> ctx_eval,
  ) {
    return _ggml_graph_import(
      fname,
      ctx_data,
      ctx_eval,
    );
  }

  late final _ggml_graph_importPtr = _lookup<
      ffi.NativeFunction<
          ggml_cgraph Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ggml_context>>,
              ffi.Pointer<ffi.Pointer<ggml_context>>)>>('ggml_graph_import');
  late final _ggml_graph_import = _ggml_graph_importPtr.asFunction<
      ggml_cgraph Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ggml_context>>,
          ffi.Pointer<ffi.Pointer<ggml_context>>)>();

  void ggml_graph_print(
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_graph_print(
      cgraph,
    );
  }

  late final _ggml_graph_printPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_cgraph>)>>(
          'ggml_graph_print');
  late final _ggml_graph_print = _ggml_graph_printPtr
      .asFunction<void Function(ffi.Pointer<ggml_cgraph>)>();

  void ggml_graph_dump_dot(
    ffi.Pointer<ggml_cgraph> gb,
    ffi.Pointer<ggml_cgraph> gf,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _ggml_graph_dump_dot(
      gb,
      gf,
      filename,
    );
  }

  late final _ggml_graph_dump_dotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ffi.Char>)>>('ggml_graph_dump_dot');
  late final _ggml_graph_dump_dot = _ggml_graph_dump_dotPtr.asFunction<
      void Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_cgraph>,
          ffi.Pointer<ffi.Char>)>();

  ggml_opt_params ggml_opt_default_params(
    int type,
  ) {
    return _ggml_opt_default_params(
      type,
    );
  }

  late final _ggml_opt_default_paramsPtr =
      _lookup<ffi.NativeFunction<ggml_opt_params Function(ffi.Int32)>>(
          'ggml_opt_default_params');
  late final _ggml_opt_default_params =
      _ggml_opt_default_paramsPtr.asFunction<ggml_opt_params Function(int)>();

  int ggml_opt(
    ffi.Pointer<ggml_context> ctx,
    ggml_opt_params params,
    ffi.Pointer<ggml_tensor> f,
  ) {
    return _ggml_opt(
      ctx,
      params,
      f,
    );
  }

  late final _ggml_optPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ggml_context>, ggml_opt_params,
              ffi.Pointer<ggml_tensor>)>>('ggml_opt');
  late final _ggml_opt = _ggml_optPtr.asFunction<
      int Function(ffi.Pointer<ggml_context>, ggml_opt_params,
          ffi.Pointer<ggml_tensor>)>();

  void ggml_opt_init(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_opt_context> opt,
    ggml_opt_params params,
    int nx,
  ) {
    return _ggml_opt_init(
      ctx,
      opt,
      params,
      nx,
    );
  }

  late final _ggml_opt_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_opt_context>,
              ggml_opt_params,
              ffi.Int64)>>('ggml_opt_init');
  late final _ggml_opt_init = _ggml_opt_initPtr.asFunction<
      void Function(ffi.Pointer<ggml_context>, ffi.Pointer<ggml_opt_context>,
          ggml_opt_params, int)>();

  int ggml_opt_resume(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_opt_context> opt,
    ffi.Pointer<ggml_tensor> f,
  ) {
    return _ggml_opt_resume(
      ctx,
      opt,
      f,
    );
  }

  late final _ggml_opt_resumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_opt_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_opt_resume');
  late final _ggml_opt_resume = _ggml_opt_resumePtr.asFunction<
      int Function(ffi.Pointer<ggml_context>, ffi.Pointer<ggml_opt_context>,
          ffi.Pointer<ggml_tensor>)>();

  int ggml_opt_resume_g(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_opt_context> opt,
    ffi.Pointer<ggml_tensor> f,
    ffi.Pointer<ggml_cgraph> gf,
    ffi.Pointer<ggml_cgraph> gb,
  ) {
    return _ggml_opt_resume_g(
      ctx,
      opt,
      f,
      gf,
      gb,
    );
  }

  late final _ggml_opt_resume_gPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_opt_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ggml_cgraph>)>>('ggml_opt_resume_g');
  late final _ggml_opt_resume_g = _ggml_opt_resume_gPtr.asFunction<
      int Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_opt_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_cgraph>,
          ffi.Pointer<ggml_cgraph>)>();

  int ggml_quantize_q4_0(
    ffi.Pointer<ffi.Float> src,
    ffi.Pointer<ffi.Void> dst,
    int n,
    int k,
    ffi.Pointer<ffi.Int64> hist,
  ) {
    return _ggml_quantize_q4_0(
      src,
      dst,
      n,
      k,
      hist,
    );
  }

  late final _ggml_quantize_q4_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Int64>)>>('ggml_quantize_q4_0');
  late final _ggml_quantize_q4_0 = _ggml_quantize_q4_0Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Void>, int, int,
          ffi.Pointer<ffi.Int64>)>();

  int ggml_quantize_q4_1(
    ffi.Pointer<ffi.Float> src,
    ffi.Pointer<ffi.Void> dst,
    int n,
    int k,
    ffi.Pointer<ffi.Int64> hist,
  ) {
    return _ggml_quantize_q4_1(
      src,
      dst,
      n,
      k,
      hist,
    );
  }

  late final _ggml_quantize_q4_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Int64>)>>('ggml_quantize_q4_1');
  late final _ggml_quantize_q4_1 = _ggml_quantize_q4_1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Void>, int, int,
          ffi.Pointer<ffi.Int64>)>();

  int ggml_quantize_q5_0(
    ffi.Pointer<ffi.Float> src,
    ffi.Pointer<ffi.Void> dst,
    int n,
    int k,
    ffi.Pointer<ffi.Int64> hist,
  ) {
    return _ggml_quantize_q5_0(
      src,
      dst,
      n,
      k,
      hist,
    );
  }

  late final _ggml_quantize_q5_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Int64>)>>('ggml_quantize_q5_0');
  late final _ggml_quantize_q5_0 = _ggml_quantize_q5_0Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Void>, int, int,
          ffi.Pointer<ffi.Int64>)>();

  int ggml_quantize_q5_1(
    ffi.Pointer<ffi.Float> src,
    ffi.Pointer<ffi.Void> dst,
    int n,
    int k,
    ffi.Pointer<ffi.Int64> hist,
  ) {
    return _ggml_quantize_q5_1(
      src,
      dst,
      n,
      k,
      hist,
    );
  }

  late final _ggml_quantize_q5_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Int64>)>>('ggml_quantize_q5_1');
  late final _ggml_quantize_q5_1 = _ggml_quantize_q5_1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Void>, int, int,
          ffi.Pointer<ffi.Int64>)>();

  int ggml_quantize_q8_0(
    ffi.Pointer<ffi.Float> src,
    ffi.Pointer<ffi.Void> dst,
    int n,
    int k,
    ffi.Pointer<ffi.Int64> hist,
  ) {
    return _ggml_quantize_q8_0(
      src,
      dst,
      n,
      k,
      hist,
    );
  }

  late final _ggml_quantize_q8_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Int64>)>>('ggml_quantize_q8_0');
  late final _ggml_quantize_q8_0 = _ggml_quantize_q8_0Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Void>, int, int,
          ffi.Pointer<ffi.Int64>)>();

  int ggml_quantize_chunk(
    int type,
    ffi.Pointer<ffi.Float> src,
    ffi.Pointer<ffi.Void> dst,
    int start,
    int n,
    ffi.Pointer<ffi.Int64> hist,
  ) {
    return _ggml_quantize_chunk(
      type,
      src,
      dst,
      start,
      n,
      hist,
    );
  }

  late final _ggml_quantize_chunkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int64>)>>('ggml_quantize_chunk');
  late final _ggml_quantize_chunk = _ggml_quantize_chunkPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Void>, int, int,
          ffi.Pointer<ffi.Int64>)>();

  int ggml_cpu_has_avx() {
    return _ggml_cpu_has_avx();
  }

  late final _ggml_cpu_has_avxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_avx');
  late final _ggml_cpu_has_avx =
      _ggml_cpu_has_avxPtr.asFunction<int Function()>();

  int ggml_cpu_has_avx2() {
    return _ggml_cpu_has_avx2();
  }

  late final _ggml_cpu_has_avx2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_avx2');
  late final _ggml_cpu_has_avx2 =
      _ggml_cpu_has_avx2Ptr.asFunction<int Function()>();

  int ggml_cpu_has_avx512() {
    return _ggml_cpu_has_avx512();
  }

  late final _ggml_cpu_has_avx512Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_avx512');
  late final _ggml_cpu_has_avx512 =
      _ggml_cpu_has_avx512Ptr.asFunction<int Function()>();

  int ggml_cpu_has_avx512_vbmi() {
    return _ggml_cpu_has_avx512_vbmi();
  }

  late final _ggml_cpu_has_avx512_vbmiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ggml_cpu_has_avx512_vbmi');
  late final _ggml_cpu_has_avx512_vbmi =
      _ggml_cpu_has_avx512_vbmiPtr.asFunction<int Function()>();

  int ggml_cpu_has_avx512_vnni() {
    return _ggml_cpu_has_avx512_vnni();
  }

  late final _ggml_cpu_has_avx512_vnniPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ggml_cpu_has_avx512_vnni');
  late final _ggml_cpu_has_avx512_vnni =
      _ggml_cpu_has_avx512_vnniPtr.asFunction<int Function()>();

  int ggml_cpu_has_fma() {
    return _ggml_cpu_has_fma();
  }

  late final _ggml_cpu_has_fmaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_fma');
  late final _ggml_cpu_has_fma =
      _ggml_cpu_has_fmaPtr.asFunction<int Function()>();

  int ggml_cpu_has_neon() {
    return _ggml_cpu_has_neon();
  }

  late final _ggml_cpu_has_neonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_neon');
  late final _ggml_cpu_has_neon =
      _ggml_cpu_has_neonPtr.asFunction<int Function()>();

  int ggml_cpu_has_arm_fma() {
    return _ggml_cpu_has_arm_fma();
  }

  late final _ggml_cpu_has_arm_fmaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_arm_fma');
  late final _ggml_cpu_has_arm_fma =
      _ggml_cpu_has_arm_fmaPtr.asFunction<int Function()>();

  int ggml_cpu_has_f16c() {
    return _ggml_cpu_has_f16c();
  }

  late final _ggml_cpu_has_f16cPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_f16c');
  late final _ggml_cpu_has_f16c =
      _ggml_cpu_has_f16cPtr.asFunction<int Function()>();

  int ggml_cpu_has_fp16_va() {
    return _ggml_cpu_has_fp16_va();
  }

  late final _ggml_cpu_has_fp16_vaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_fp16_va');
  late final _ggml_cpu_has_fp16_va =
      _ggml_cpu_has_fp16_vaPtr.asFunction<int Function()>();

  int ggml_cpu_has_wasm_simd() {
    return _ggml_cpu_has_wasm_simd();
  }

  late final _ggml_cpu_has_wasm_simdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_wasm_simd');
  late final _ggml_cpu_has_wasm_simd =
      _ggml_cpu_has_wasm_simdPtr.asFunction<int Function()>();

  int ggml_cpu_has_blas() {
    return _ggml_cpu_has_blas();
  }

  late final _ggml_cpu_has_blasPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_blas');
  late final _ggml_cpu_has_blas =
      _ggml_cpu_has_blasPtr.asFunction<int Function()>();

  int ggml_cpu_has_cublas() {
    return _ggml_cpu_has_cublas();
  }

  late final _ggml_cpu_has_cublasPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_cublas');
  late final _ggml_cpu_has_cublas =
      _ggml_cpu_has_cublasPtr.asFunction<int Function()>();

  int ggml_cpu_has_clblast() {
    return _ggml_cpu_has_clblast();
  }

  late final _ggml_cpu_has_clblastPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_clblast');
  late final _ggml_cpu_has_clblast =
      _ggml_cpu_has_clblastPtr.asFunction<int Function()>();

  int ggml_cpu_has_gpublas() {
    return _ggml_cpu_has_gpublas();
  }

  late final _ggml_cpu_has_gpublasPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_gpublas');
  late final _ggml_cpu_has_gpublas =
      _ggml_cpu_has_gpublasPtr.asFunction<int Function()>();

  int ggml_cpu_has_sse3() {
    return _ggml_cpu_has_sse3();
  }

  late final _ggml_cpu_has_sse3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_sse3');
  late final _ggml_cpu_has_sse3 =
      _ggml_cpu_has_sse3Ptr.asFunction<int Function()>();

  int ggml_cpu_has_vsx() {
    return _ggml_cpu_has_vsx();
  }

  late final _ggml_cpu_has_vsxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_vsx');
  late final _ggml_cpu_has_vsx =
      _ggml_cpu_has_vsxPtr.asFunction<int Function()>();

  ggml_type_traits_t ggml_internal_get_type_traits(
    int i,
  ) {
    return _ggml_internal_get_type_traits(
      i,
    );
  }

  late final _ggml_internal_get_type_traitsPtr =
      _lookup<ffi.NativeFunction<ggml_type_traits_t Function(ffi.Int32)>>(
          'ggml_internal_get_type_traits');
  late final _ggml_internal_get_type_traits = _ggml_internal_get_type_traitsPtr
      .asFunction<ggml_type_traits_t Function(int)>();

  ffi.Pointer<ggml_mtl_context> mnist_mtl_init(
    ffi.Pointer<ggml_context> ctx_data,
    ffi.Pointer<ggml_context> ctx_eval,
    ffi.Pointer<ggml_context> ctx_work,
    ffi.Pointer<ggml_cgraph> gf,
  ) {
    return _mnist_mtl_init(
      ctx_data,
      ctx_eval,
      ctx_work,
      gf,
    );
  }

  late final _mnist_mtl_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_mtl_context> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_cgraph>)>>('mnist_mtl_init');
  late final _mnist_mtl_init = _mnist_mtl_initPtr.asFunction<
      ffi.Pointer<ggml_mtl_context> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_cgraph>)>();

  void mnist_mtl_free(
    ffi.Pointer<ggml_mtl_context> ctx,
  ) {
    return _mnist_mtl_free(
      ctx,
    );
  }

  late final _mnist_mtl_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_mtl_context>)>>(
      'mnist_mtl_free');
  late final _mnist_mtl_free = _mnist_mtl_freePtr
      .asFunction<void Function(ffi.Pointer<ggml_mtl_context>)>();

  int mnist_mtl_eval(
    ffi.Pointer<ggml_mtl_context> ctx,
    ffi.Pointer<ggml_cgraph> gf,
  ) {
    return _mnist_mtl_eval(
      ctx,
      gf,
    );
  }

  late final _mnist_mtl_evalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ggml_mtl_context>,
              ffi.Pointer<ggml_cgraph>)>>('mnist_mtl_eval');
  late final _mnist_mtl_eval = _mnist_mtl_evalPtr.asFunction<
      int Function(ffi.Pointer<ggml_mtl_context>, ffi.Pointer<ggml_cgraph>)>();

  void drwav_version(
    ffi.Pointer<drwav_uint32> pMajor,
    ffi.Pointer<drwav_uint32> pMinor,
    ffi.Pointer<drwav_uint32> pRevision,
  ) {
    return _drwav_version(
      pMajor,
      pMinor,
      pRevision,
    );
  }

  late final _drwav_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<drwav_uint32>,
              ffi.Pointer<drwav_uint32>,
              ffi.Pointer<drwav_uint32>)>>('drwav_version');
  late final _drwav_version = _drwav_versionPtr.asFunction<
      void Function(ffi.Pointer<drwav_uint32>, ffi.Pointer<drwav_uint32>,
          ffi.Pointer<drwav_uint32>)>();

  ffi.Pointer<ffi.Char> drwav_version_string() {
    return _drwav_version_string();
  }

  late final _drwav_version_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'drwav_version_string');
  late final _drwav_version_string =
      _drwav_version_stringPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int drwav_fmt_get_format(
    ffi.Pointer<drwav_fmt> pFMT,
  ) {
    return _drwav_fmt_get_format(
      pFMT,
    );
  }

  late final _drwav_fmt_get_formatPtr = _lookup<
          ffi.NativeFunction<drwav_uint16 Function(ffi.Pointer<drwav_fmt>)>>(
      'drwav_fmt_get_format');
  late final _drwav_fmt_get_format = _drwav_fmt_get_formatPtr
      .asFunction<int Function(ffi.Pointer<drwav_fmt>)>();

  int drwav_init(
    ffi.Pointer<drwav> pWav,
    drwav_read_proc onRead,
    drwav_seek_proc onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init(
      pWav,
      onRead,
      onSeek,
      pUserData,
      pAllocationCallbacks,
    );
  }

  late final _drwav_initPtr = _lookup<
      ffi.NativeFunction<
          drwav_bool32 Function(
              ffi.Pointer<drwav>,
              drwav_read_proc,
              drwav_seek_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<drwav_allocation_callbacks>)>>('drwav_init');
  late final _drwav_init = _drwav_initPtr.asFunction<
      int Function(ffi.Pointer<drwav>, drwav_read_proc, drwav_seek_proc,
          ffi.Pointer<ffi.Void>, ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_init_ex(
    ffi.Pointer<drwav> pWav,
    drwav_read_proc onRead,
    drwav_seek_proc onSeek,
    drwav_chunk_proc onChunk,
    ffi.Pointer<ffi.Void> pReadSeekUserData,
    ffi.Pointer<ffi.Void> pChunkUserData,
    int flags,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_ex(
      pWav,
      onRead,
      onSeek,
      onChunk,
      pReadSeekUserData,
      pChunkUserData,
      flags,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_exPtr = _lookup<
      ffi.NativeFunction<
          drwav_bool32 Function(
              ffi.Pointer<drwav>,
              drwav_read_proc,
              drwav_seek_proc,
              drwav_chunk_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              drwav_uint32,
              ffi.Pointer<drwav_allocation_callbacks>)>>('drwav_init_ex');
  late final _drwav_init_ex = _drwav_init_exPtr.asFunction<
      int Function(
          ffi.Pointer<drwav>,
          drwav_read_proc,
          drwav_seek_proc,
          drwav_chunk_proc,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_init_write(
    ffi.Pointer<drwav> pWav,
    ffi.Pointer<drwav_data_format> pFormat,
    drwav_write_proc onWrite,
    drwav_seek_proc onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_write(
      pWav,
      pFormat,
      onWrite,
      onSeek,
      pUserData,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_writePtr = _lookup<
      ffi.NativeFunction<
          drwav_bool32 Function(
              ffi.Pointer<drwav>,
              ffi.Pointer<drwav_data_format>,
              drwav_write_proc,
              drwav_seek_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<drwav_allocation_callbacks>)>>('drwav_init_write');
  late final _drwav_init_write = _drwav_init_writePtr.asFunction<
      int Function(
          ffi.Pointer<drwav>,
          ffi.Pointer<drwav_data_format>,
          drwav_write_proc,
          drwav_seek_proc,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_init_write_sequential(
    ffi.Pointer<drwav> pWav,
    ffi.Pointer<drwav_data_format> pFormat,
    int totalSampleCount,
    drwav_write_proc onWrite,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_write_sequential(
      pWav,
      pFormat,
      totalSampleCount,
      onWrite,
      pUserData,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_write_sequentialPtr = _lookup<
          ffi.NativeFunction<
              drwav_bool32 Function(
                  ffi.Pointer<drwav>,
                  ffi.Pointer<drwav_data_format>,
                  drwav_uint64,
                  drwav_write_proc,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_init_write_sequential');
  late final _drwav_init_write_sequential =
      _drwav_init_write_sequentialPtr.asFunction<
          int Function(
              ffi.Pointer<drwav>,
              ffi.Pointer<drwav_data_format>,
              int,
              drwav_write_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_init_write_sequential_pcm_frames(
    ffi.Pointer<drwav> pWav,
    ffi.Pointer<drwav_data_format> pFormat,
    int totalPCMFrameCount,
    drwav_write_proc onWrite,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_write_sequential_pcm_frames(
      pWav,
      pFormat,
      totalPCMFrameCount,
      onWrite,
      pUserData,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_write_sequential_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              drwav_bool32 Function(
                  ffi.Pointer<drwav>,
                  ffi.Pointer<drwav_data_format>,
                  drwav_uint64,
                  drwav_write_proc,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_init_write_sequential_pcm_frames');
  late final _drwav_init_write_sequential_pcm_frames =
      _drwav_init_write_sequential_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<drwav>,
              ffi.Pointer<drwav_data_format>,
              int,
              drwav_write_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_target_write_size_bytes(
    ffi.Pointer<drwav_data_format> pFormat,
    int totalSampleCount,
  ) {
    return _drwav_target_write_size_bytes(
      pFormat,
      totalSampleCount,
    );
  }

  late final _drwav_target_write_size_bytesPtr = _lookup<
      ffi.NativeFunction<
          drwav_uint64 Function(ffi.Pointer<drwav_data_format>,
              drwav_uint64)>>('drwav_target_write_size_bytes');
  late final _drwav_target_write_size_bytes = _drwav_target_write_size_bytesPtr
      .asFunction<int Function(ffi.Pointer<drwav_data_format>, int)>();

  int drwav_uninit(
    ffi.Pointer<drwav> pWav,
  ) {
    return _drwav_uninit(
      pWav,
    );
  }

  late final _drwav_uninitPtr =
      _lookup<ffi.NativeFunction<drwav_result Function(ffi.Pointer<drwav>)>>(
          'drwav_uninit');
  late final _drwav_uninit =
      _drwav_uninitPtr.asFunction<int Function(ffi.Pointer<drwav>)>();

  int drwav_read_raw(
    ffi.Pointer<drwav> pWav,
    int bytesToRead,
    ffi.Pointer<ffi.Void> pBufferOut,
  ) {
    return _drwav_read_raw(
      pWav,
      bytesToRead,
      pBufferOut,
    );
  }

  late final _drwav_read_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<drwav>, ffi.Size,
              ffi.Pointer<ffi.Void>)>>('drwav_read_raw');
  late final _drwav_read_raw = _drwav_read_rawPtr.asFunction<
      int Function(ffi.Pointer<drwav>, int, ffi.Pointer<ffi.Void>)>();

  int drwav_read_pcm_frames(
    ffi.Pointer<drwav> pWav,
    int framesToRead,
    ffi.Pointer<ffi.Void> pBufferOut,
  ) {
    return _drwav_read_pcm_frames(
      pWav,
      framesToRead,
      pBufferOut,
    );
  }

  late final _drwav_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          drwav_uint64 Function(ffi.Pointer<drwav>, drwav_uint64,
              ffi.Pointer<ffi.Void>)>>('drwav_read_pcm_frames');
  late final _drwav_read_pcm_frames = _drwav_read_pcm_framesPtr.asFunction<
      int Function(ffi.Pointer<drwav>, int, ffi.Pointer<ffi.Void>)>();

  int drwav_read_pcm_frames_le(
    ffi.Pointer<drwav> pWav,
    int framesToRead,
    ffi.Pointer<ffi.Void> pBufferOut,
  ) {
    return _drwav_read_pcm_frames_le(
      pWav,
      framesToRead,
      pBufferOut,
    );
  }

  late final _drwav_read_pcm_frames_lePtr = _lookup<
      ffi.NativeFunction<
          drwav_uint64 Function(ffi.Pointer<drwav>, drwav_uint64,
              ffi.Pointer<ffi.Void>)>>('drwav_read_pcm_frames_le');
  late final _drwav_read_pcm_frames_le =
      _drwav_read_pcm_frames_lePtr.asFunction<
          int Function(ffi.Pointer<drwav>, int, ffi.Pointer<ffi.Void>)>();

  int drwav_read_pcm_frames_be(
    ffi.Pointer<drwav> pWav,
    int framesToRead,
    ffi.Pointer<ffi.Void> pBufferOut,
  ) {
    return _drwav_read_pcm_frames_be(
      pWav,
      framesToRead,
      pBufferOut,
    );
  }

  late final _drwav_read_pcm_frames_bePtr = _lookup<
      ffi.NativeFunction<
          drwav_uint64 Function(ffi.Pointer<drwav>, drwav_uint64,
              ffi.Pointer<ffi.Void>)>>('drwav_read_pcm_frames_be');
  late final _drwav_read_pcm_frames_be =
      _drwav_read_pcm_frames_bePtr.asFunction<
          int Function(ffi.Pointer<drwav>, int, ffi.Pointer<ffi.Void>)>();

  int drwav_seek_to_pcm_frame(
    ffi.Pointer<drwav> pWav,
    int targetFrameIndex,
  ) {
    return _drwav_seek_to_pcm_frame(
      pWav,
      targetFrameIndex,
    );
  }

  late final _drwav_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          drwav_bool32 Function(
              ffi.Pointer<drwav>, drwav_uint64)>>('drwav_seek_to_pcm_frame');
  late final _drwav_seek_to_pcm_frame = _drwav_seek_to_pcm_framePtr
      .asFunction<int Function(ffi.Pointer<drwav>, int)>();

  int drwav_write_raw(
    ffi.Pointer<drwav> pWav,
    int bytesToWrite,
    ffi.Pointer<ffi.Void> pData,
  ) {
    return _drwav_write_raw(
      pWav,
      bytesToWrite,
      pData,
    );
  }

  late final _drwav_write_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<drwav>, ffi.Size,
              ffi.Pointer<ffi.Void>)>>('drwav_write_raw');
  late final _drwav_write_raw = _drwav_write_rawPtr.asFunction<
      int Function(ffi.Pointer<drwav>, int, ffi.Pointer<ffi.Void>)>();

  int drwav_write_pcm_frames(
    ffi.Pointer<drwav> pWav,
    int framesToWrite,
    ffi.Pointer<ffi.Void> pData,
  ) {
    return _drwav_write_pcm_frames(
      pWav,
      framesToWrite,
      pData,
    );
  }

  late final _drwav_write_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          drwav_uint64 Function(ffi.Pointer<drwav>, drwav_uint64,
              ffi.Pointer<ffi.Void>)>>('drwav_write_pcm_frames');
  late final _drwav_write_pcm_frames = _drwav_write_pcm_framesPtr.asFunction<
      int Function(ffi.Pointer<drwav>, int, ffi.Pointer<ffi.Void>)>();

  int drwav_write_pcm_frames_le(
    ffi.Pointer<drwav> pWav,
    int framesToWrite,
    ffi.Pointer<ffi.Void> pData,
  ) {
    return _drwav_write_pcm_frames_le(
      pWav,
      framesToWrite,
      pData,
    );
  }

  late final _drwav_write_pcm_frames_lePtr = _lookup<
      ffi.NativeFunction<
          drwav_uint64 Function(ffi.Pointer<drwav>, drwav_uint64,
              ffi.Pointer<ffi.Void>)>>('drwav_write_pcm_frames_le');
  late final _drwav_write_pcm_frames_le =
      _drwav_write_pcm_frames_lePtr.asFunction<
          int Function(ffi.Pointer<drwav>, int, ffi.Pointer<ffi.Void>)>();

  int drwav_write_pcm_frames_be(
    ffi.Pointer<drwav> pWav,
    int framesToWrite,
    ffi.Pointer<ffi.Void> pData,
  ) {
    return _drwav_write_pcm_frames_be(
      pWav,
      framesToWrite,
      pData,
    );
  }

  late final _drwav_write_pcm_frames_bePtr = _lookup<
      ffi.NativeFunction<
          drwav_uint64 Function(ffi.Pointer<drwav>, drwav_uint64,
              ffi.Pointer<ffi.Void>)>>('drwav_write_pcm_frames_be');
  late final _drwav_write_pcm_frames_be =
      _drwav_write_pcm_frames_bePtr.asFunction<
          int Function(ffi.Pointer<drwav>, int, ffi.Pointer<ffi.Void>)>();

  int drwav_read_pcm_frames_s16(
    ffi.Pointer<drwav> pWav,
    int framesToRead,
    ffi.Pointer<drwav_int16> pBufferOut,
  ) {
    return _drwav_read_pcm_frames_s16(
      pWav,
      framesToRead,
      pBufferOut,
    );
  }

  late final _drwav_read_pcm_frames_s16Ptr = _lookup<
      ffi.NativeFunction<
          drwav_uint64 Function(ffi.Pointer<drwav>, drwav_uint64,
              ffi.Pointer<drwav_int16>)>>('drwav_read_pcm_frames_s16');
  late final _drwav_read_pcm_frames_s16 =
      _drwav_read_pcm_frames_s16Ptr.asFunction<
          int Function(ffi.Pointer<drwav>, int, ffi.Pointer<drwav_int16>)>();

  int drwav_read_pcm_frames_s16le(
    ffi.Pointer<drwav> pWav,
    int framesToRead,
    ffi.Pointer<drwav_int16> pBufferOut,
  ) {
    return _drwav_read_pcm_frames_s16le(
      pWav,
      framesToRead,
      pBufferOut,
    );
  }

  late final _drwav_read_pcm_frames_s16lePtr = _lookup<
      ffi.NativeFunction<
          drwav_uint64 Function(ffi.Pointer<drwav>, drwav_uint64,
              ffi.Pointer<drwav_int16>)>>('drwav_read_pcm_frames_s16le');
  late final _drwav_read_pcm_frames_s16le =
      _drwav_read_pcm_frames_s16lePtr.asFunction<
          int Function(ffi.Pointer<drwav>, int, ffi.Pointer<drwav_int16>)>();

  int drwav_read_pcm_frames_s16be(
    ffi.Pointer<drwav> pWav,
    int framesToRead,
    ffi.Pointer<drwav_int16> pBufferOut,
  ) {
    return _drwav_read_pcm_frames_s16be(
      pWav,
      framesToRead,
      pBufferOut,
    );
  }

  late final _drwav_read_pcm_frames_s16bePtr = _lookup<
      ffi.NativeFunction<
          drwav_uint64 Function(ffi.Pointer<drwav>, drwav_uint64,
              ffi.Pointer<drwav_int16>)>>('drwav_read_pcm_frames_s16be');
  late final _drwav_read_pcm_frames_s16be =
      _drwav_read_pcm_frames_s16bePtr.asFunction<
          int Function(ffi.Pointer<drwav>, int, ffi.Pointer<drwav_int16>)>();

  void drwav_u8_to_s16(
    ffi.Pointer<drwav_int16> pOut,
    ffi.Pointer<drwav_uint8> pIn,
    int sampleCount,
  ) {
    return _drwav_u8_to_s16(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_u8_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<drwav_int16>, ffi.Pointer<drwav_uint8>,
              ffi.Size)>>('drwav_u8_to_s16');
  late final _drwav_u8_to_s16 = _drwav_u8_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<drwav_int16>, ffi.Pointer<drwav_uint8>, int)>();

  void drwav_s24_to_s16(
    ffi.Pointer<drwav_int16> pOut,
    ffi.Pointer<drwav_uint8> pIn,
    int sampleCount,
  ) {
    return _drwav_s24_to_s16(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_s24_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<drwav_int16>, ffi.Pointer<drwav_uint8>,
              ffi.Size)>>('drwav_s24_to_s16');
  late final _drwav_s24_to_s16 = _drwav_s24_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<drwav_int16>, ffi.Pointer<drwav_uint8>, int)>();

  void drwav_s32_to_s16(
    ffi.Pointer<drwav_int16> pOut,
    ffi.Pointer<drwav_int32> pIn,
    int sampleCount,
  ) {
    return _drwav_s32_to_s16(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_s32_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<drwav_int16>, ffi.Pointer<drwav_int32>,
              ffi.Size)>>('drwav_s32_to_s16');
  late final _drwav_s32_to_s16 = _drwav_s32_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<drwav_int16>, ffi.Pointer<drwav_int32>, int)>();

  void drwav_f32_to_s16(
    ffi.Pointer<drwav_int16> pOut,
    ffi.Pointer<ffi.Float> pIn,
    int sampleCount,
  ) {
    return _drwav_f32_to_s16(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_f32_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<drwav_int16>, ffi.Pointer<ffi.Float>,
              ffi.Size)>>('drwav_f32_to_s16');
  late final _drwav_f32_to_s16 = _drwav_f32_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<drwav_int16>, ffi.Pointer<ffi.Float>, int)>();

  void drwav_f64_to_s16(
    ffi.Pointer<drwav_int16> pOut,
    ffi.Pointer<ffi.Double> pIn,
    int sampleCount,
  ) {
    return _drwav_f64_to_s16(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_f64_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<drwav_int16>, ffi.Pointer<ffi.Double>,
              ffi.Size)>>('drwav_f64_to_s16');
  late final _drwav_f64_to_s16 = _drwav_f64_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<drwav_int16>, ffi.Pointer<ffi.Double>, int)>();

  void drwav_alaw_to_s16(
    ffi.Pointer<drwav_int16> pOut,
    ffi.Pointer<drwav_uint8> pIn,
    int sampleCount,
  ) {
    return _drwav_alaw_to_s16(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_alaw_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<drwav_int16>, ffi.Pointer<drwav_uint8>,
              ffi.Size)>>('drwav_alaw_to_s16');
  late final _drwav_alaw_to_s16 = _drwav_alaw_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<drwav_int16>, ffi.Pointer<drwav_uint8>, int)>();

  void drwav_mulaw_to_s16(
    ffi.Pointer<drwav_int16> pOut,
    ffi.Pointer<drwav_uint8> pIn,
    int sampleCount,
  ) {
    return _drwav_mulaw_to_s16(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_mulaw_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<drwav_int16>, ffi.Pointer<drwav_uint8>,
              ffi.Size)>>('drwav_mulaw_to_s16');
  late final _drwav_mulaw_to_s16 = _drwav_mulaw_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<drwav_int16>, ffi.Pointer<drwav_uint8>, int)>();

  int drwav_read_pcm_frames_f32(
    ffi.Pointer<drwav> pWav,
    int framesToRead,
    ffi.Pointer<ffi.Float> pBufferOut,
  ) {
    return _drwav_read_pcm_frames_f32(
      pWav,
      framesToRead,
      pBufferOut,
    );
  }

  late final _drwav_read_pcm_frames_f32Ptr = _lookup<
      ffi.NativeFunction<
          drwav_uint64 Function(ffi.Pointer<drwav>, drwav_uint64,
              ffi.Pointer<ffi.Float>)>>('drwav_read_pcm_frames_f32');
  late final _drwav_read_pcm_frames_f32 =
      _drwav_read_pcm_frames_f32Ptr.asFunction<
          int Function(ffi.Pointer<drwav>, int, ffi.Pointer<ffi.Float>)>();

  int drwav_read_pcm_frames_f32le(
    ffi.Pointer<drwav> pWav,
    int framesToRead,
    ffi.Pointer<ffi.Float> pBufferOut,
  ) {
    return _drwav_read_pcm_frames_f32le(
      pWav,
      framesToRead,
      pBufferOut,
    );
  }

  late final _drwav_read_pcm_frames_f32lePtr = _lookup<
      ffi.NativeFunction<
          drwav_uint64 Function(ffi.Pointer<drwav>, drwav_uint64,
              ffi.Pointer<ffi.Float>)>>('drwav_read_pcm_frames_f32le');
  late final _drwav_read_pcm_frames_f32le =
      _drwav_read_pcm_frames_f32lePtr.asFunction<
          int Function(ffi.Pointer<drwav>, int, ffi.Pointer<ffi.Float>)>();

  int drwav_read_pcm_frames_f32be(
    ffi.Pointer<drwav> pWav,
    int framesToRead,
    ffi.Pointer<ffi.Float> pBufferOut,
  ) {
    return _drwav_read_pcm_frames_f32be(
      pWav,
      framesToRead,
      pBufferOut,
    );
  }

  late final _drwav_read_pcm_frames_f32bePtr = _lookup<
      ffi.NativeFunction<
          drwav_uint64 Function(ffi.Pointer<drwav>, drwav_uint64,
              ffi.Pointer<ffi.Float>)>>('drwav_read_pcm_frames_f32be');
  late final _drwav_read_pcm_frames_f32be =
      _drwav_read_pcm_frames_f32bePtr.asFunction<
          int Function(ffi.Pointer<drwav>, int, ffi.Pointer<ffi.Float>)>();

  void drwav_u8_to_f32(
    ffi.Pointer<ffi.Float> pOut,
    ffi.Pointer<drwav_uint8> pIn,
    int sampleCount,
  ) {
    return _drwav_u8_to_f32(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_u8_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<drwav_uint8>,
              ffi.Size)>>('drwav_u8_to_f32');
  late final _drwav_u8_to_f32 = _drwav_u8_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<drwav_uint8>, int)>();

  void drwav_s16_to_f32(
    ffi.Pointer<ffi.Float> pOut,
    ffi.Pointer<drwav_int16> pIn,
    int sampleCount,
  ) {
    return _drwav_s16_to_f32(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_s16_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<drwav_int16>,
              ffi.Size)>>('drwav_s16_to_f32');
  late final _drwav_s16_to_f32 = _drwav_s16_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<drwav_int16>, int)>();

  void drwav_s24_to_f32(
    ffi.Pointer<ffi.Float> pOut,
    ffi.Pointer<drwav_uint8> pIn,
    int sampleCount,
  ) {
    return _drwav_s24_to_f32(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_s24_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<drwav_uint8>,
              ffi.Size)>>('drwav_s24_to_f32');
  late final _drwav_s24_to_f32 = _drwav_s24_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<drwav_uint8>, int)>();

  void drwav_s32_to_f32(
    ffi.Pointer<ffi.Float> pOut,
    ffi.Pointer<drwav_int32> pIn,
    int sampleCount,
  ) {
    return _drwav_s32_to_f32(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_s32_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<drwav_int32>,
              ffi.Size)>>('drwav_s32_to_f32');
  late final _drwav_s32_to_f32 = _drwav_s32_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<drwav_int32>, int)>();

  void drwav_f64_to_f32(
    ffi.Pointer<ffi.Float> pOut,
    ffi.Pointer<ffi.Double> pIn,
    int sampleCount,
  ) {
    return _drwav_f64_to_f32(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_f64_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Double>,
              ffi.Size)>>('drwav_f64_to_f32');
  late final _drwav_f64_to_f32 = _drwav_f64_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Double>, int)>();

  void drwav_alaw_to_f32(
    ffi.Pointer<ffi.Float> pOut,
    ffi.Pointer<drwav_uint8> pIn,
    int sampleCount,
  ) {
    return _drwav_alaw_to_f32(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_alaw_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<drwav_uint8>,
              ffi.Size)>>('drwav_alaw_to_f32');
  late final _drwav_alaw_to_f32 = _drwav_alaw_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<drwav_uint8>, int)>();

  void drwav_mulaw_to_f32(
    ffi.Pointer<ffi.Float> pOut,
    ffi.Pointer<drwav_uint8> pIn,
    int sampleCount,
  ) {
    return _drwav_mulaw_to_f32(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_mulaw_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<drwav_uint8>,
              ffi.Size)>>('drwav_mulaw_to_f32');
  late final _drwav_mulaw_to_f32 = _drwav_mulaw_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<drwav_uint8>, int)>();

  int drwav_read_pcm_frames_s32(
    ffi.Pointer<drwav> pWav,
    int framesToRead,
    ffi.Pointer<drwav_int32> pBufferOut,
  ) {
    return _drwav_read_pcm_frames_s32(
      pWav,
      framesToRead,
      pBufferOut,
    );
  }

  late final _drwav_read_pcm_frames_s32Ptr = _lookup<
      ffi.NativeFunction<
          drwav_uint64 Function(ffi.Pointer<drwav>, drwav_uint64,
              ffi.Pointer<drwav_int32>)>>('drwav_read_pcm_frames_s32');
  late final _drwav_read_pcm_frames_s32 =
      _drwav_read_pcm_frames_s32Ptr.asFunction<
          int Function(ffi.Pointer<drwav>, int, ffi.Pointer<drwav_int32>)>();

  int drwav_read_pcm_frames_s32le(
    ffi.Pointer<drwav> pWav,
    int framesToRead,
    ffi.Pointer<drwav_int32> pBufferOut,
  ) {
    return _drwav_read_pcm_frames_s32le(
      pWav,
      framesToRead,
      pBufferOut,
    );
  }

  late final _drwav_read_pcm_frames_s32lePtr = _lookup<
      ffi.NativeFunction<
          drwav_uint64 Function(ffi.Pointer<drwav>, drwav_uint64,
              ffi.Pointer<drwav_int32>)>>('drwav_read_pcm_frames_s32le');
  late final _drwav_read_pcm_frames_s32le =
      _drwav_read_pcm_frames_s32lePtr.asFunction<
          int Function(ffi.Pointer<drwav>, int, ffi.Pointer<drwav_int32>)>();

  int drwav_read_pcm_frames_s32be(
    ffi.Pointer<drwav> pWav,
    int framesToRead,
    ffi.Pointer<drwav_int32> pBufferOut,
  ) {
    return _drwav_read_pcm_frames_s32be(
      pWav,
      framesToRead,
      pBufferOut,
    );
  }

  late final _drwav_read_pcm_frames_s32bePtr = _lookup<
      ffi.NativeFunction<
          drwav_uint64 Function(ffi.Pointer<drwav>, drwav_uint64,
              ffi.Pointer<drwav_int32>)>>('drwav_read_pcm_frames_s32be');
  late final _drwav_read_pcm_frames_s32be =
      _drwav_read_pcm_frames_s32bePtr.asFunction<
          int Function(ffi.Pointer<drwav>, int, ffi.Pointer<drwav_int32>)>();

  void drwav_u8_to_s32(
    ffi.Pointer<drwav_int32> pOut,
    ffi.Pointer<drwav_uint8> pIn,
    int sampleCount,
  ) {
    return _drwav_u8_to_s32(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_u8_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<drwav_int32>, ffi.Pointer<drwav_uint8>,
              ffi.Size)>>('drwav_u8_to_s32');
  late final _drwav_u8_to_s32 = _drwav_u8_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<drwav_int32>, ffi.Pointer<drwav_uint8>, int)>();

  void drwav_s16_to_s32(
    ffi.Pointer<drwav_int32> pOut,
    ffi.Pointer<drwav_int16> pIn,
    int sampleCount,
  ) {
    return _drwav_s16_to_s32(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_s16_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<drwav_int32>, ffi.Pointer<drwav_int16>,
              ffi.Size)>>('drwav_s16_to_s32');
  late final _drwav_s16_to_s32 = _drwav_s16_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<drwav_int32>, ffi.Pointer<drwav_int16>, int)>();

  void drwav_s24_to_s32(
    ffi.Pointer<drwav_int32> pOut,
    ffi.Pointer<drwav_uint8> pIn,
    int sampleCount,
  ) {
    return _drwav_s24_to_s32(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_s24_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<drwav_int32>, ffi.Pointer<drwav_uint8>,
              ffi.Size)>>('drwav_s24_to_s32');
  late final _drwav_s24_to_s32 = _drwav_s24_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<drwav_int32>, ffi.Pointer<drwav_uint8>, int)>();

  void drwav_f32_to_s32(
    ffi.Pointer<drwav_int32> pOut,
    ffi.Pointer<ffi.Float> pIn,
    int sampleCount,
  ) {
    return _drwav_f32_to_s32(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_f32_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<drwav_int32>, ffi.Pointer<ffi.Float>,
              ffi.Size)>>('drwav_f32_to_s32');
  late final _drwav_f32_to_s32 = _drwav_f32_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<drwav_int32>, ffi.Pointer<ffi.Float>, int)>();

  void drwav_f64_to_s32(
    ffi.Pointer<drwav_int32> pOut,
    ffi.Pointer<ffi.Double> pIn,
    int sampleCount,
  ) {
    return _drwav_f64_to_s32(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_f64_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<drwav_int32>, ffi.Pointer<ffi.Double>,
              ffi.Size)>>('drwav_f64_to_s32');
  late final _drwav_f64_to_s32 = _drwav_f64_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<drwav_int32>, ffi.Pointer<ffi.Double>, int)>();

  void drwav_alaw_to_s32(
    ffi.Pointer<drwav_int32> pOut,
    ffi.Pointer<drwav_uint8> pIn,
    int sampleCount,
  ) {
    return _drwav_alaw_to_s32(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_alaw_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<drwav_int32>, ffi.Pointer<drwav_uint8>,
              ffi.Size)>>('drwav_alaw_to_s32');
  late final _drwav_alaw_to_s32 = _drwav_alaw_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<drwav_int32>, ffi.Pointer<drwav_uint8>, int)>();

  void drwav_mulaw_to_s32(
    ffi.Pointer<drwav_int32> pOut,
    ffi.Pointer<drwav_uint8> pIn,
    int sampleCount,
  ) {
    return _drwav_mulaw_to_s32(
      pOut,
      pIn,
      sampleCount,
    );
  }

  late final _drwav_mulaw_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<drwav_int32>, ffi.Pointer<drwav_uint8>,
              ffi.Size)>>('drwav_mulaw_to_s32');
  late final _drwav_mulaw_to_s32 = _drwav_mulaw_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<drwav_int32>, ffi.Pointer<drwav_uint8>, int)>();

  int drwav_init_file(
    ffi.Pointer<drwav> pWav,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_file(
      pWav,
      filename,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_filePtr = _lookup<
      ffi.NativeFunction<
          drwav_bool32 Function(ffi.Pointer<drwav>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<drwav_allocation_callbacks>)>>('drwav_init_file');
  late final _drwav_init_file = _drwav_init_filePtr.asFunction<
      int Function(ffi.Pointer<drwav>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_init_file_ex(
    ffi.Pointer<drwav> pWav,
    ffi.Pointer<ffi.Char> filename,
    drwav_chunk_proc onChunk,
    ffi.Pointer<ffi.Void> pChunkUserData,
    int flags,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_file_ex(
      pWav,
      filename,
      onChunk,
      pChunkUserData,
      flags,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_file_exPtr = _lookup<
      ffi.NativeFunction<
          drwav_bool32 Function(
              ffi.Pointer<drwav>,
              ffi.Pointer<ffi.Char>,
              drwav_chunk_proc,
              ffi.Pointer<ffi.Void>,
              drwav_uint32,
              ffi.Pointer<drwav_allocation_callbacks>)>>('drwav_init_file_ex');
  late final _drwav_init_file_ex = _drwav_init_file_exPtr.asFunction<
      int Function(
          ffi.Pointer<drwav>,
          ffi.Pointer<ffi.Char>,
          drwav_chunk_proc,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_init_file_w(
    ffi.Pointer<drwav> pWav,
    ffi.Pointer<ffi.WChar> filename,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_file_w(
      pWav,
      filename,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_file_wPtr = _lookup<
      ffi.NativeFunction<
          drwav_bool32 Function(ffi.Pointer<drwav>, ffi.Pointer<ffi.WChar>,
              ffi.Pointer<drwav_allocation_callbacks>)>>('drwav_init_file_w');
  late final _drwav_init_file_w = _drwav_init_file_wPtr.asFunction<
      int Function(ffi.Pointer<drwav>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_init_file_ex_w(
    ffi.Pointer<drwav> pWav,
    ffi.Pointer<ffi.WChar> filename,
    drwav_chunk_proc onChunk,
    ffi.Pointer<ffi.Void> pChunkUserData,
    int flags,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_file_ex_w(
      pWav,
      filename,
      onChunk,
      pChunkUserData,
      flags,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_file_ex_wPtr = _lookup<
          ffi.NativeFunction<
              drwav_bool32 Function(
                  ffi.Pointer<drwav>,
                  ffi.Pointer<ffi.WChar>,
                  drwav_chunk_proc,
                  ffi.Pointer<ffi.Void>,
                  drwav_uint32,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_init_file_ex_w');
  late final _drwav_init_file_ex_w = _drwav_init_file_ex_wPtr.asFunction<
      int Function(
          ffi.Pointer<drwav>,
          ffi.Pointer<ffi.WChar>,
          drwav_chunk_proc,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_init_file_write(
    ffi.Pointer<drwav> pWav,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<drwav_data_format> pFormat,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_file_write(
      pWav,
      filename,
      pFormat,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_file_writePtr = _lookup<
          ffi.NativeFunction<
              drwav_bool32 Function(
                  ffi.Pointer<drwav>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<drwav_data_format>,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_init_file_write');
  late final _drwav_init_file_write = _drwav_init_file_writePtr.asFunction<
      int Function(
          ffi.Pointer<drwav>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<drwav_data_format>,
          ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_init_file_write_sequential(
    ffi.Pointer<drwav> pWav,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<drwav_data_format> pFormat,
    int totalSampleCount,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_file_write_sequential(
      pWav,
      filename,
      pFormat,
      totalSampleCount,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_file_write_sequentialPtr = _lookup<
          ffi.NativeFunction<
              drwav_bool32 Function(
                  ffi.Pointer<drwav>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<drwav_data_format>,
                  drwav_uint64,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_init_file_write_sequential');
  late final _drwav_init_file_write_sequential =
      _drwav_init_file_write_sequentialPtr.asFunction<
          int Function(
              ffi.Pointer<drwav>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<drwav_data_format>,
              int,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_init_file_write_sequential_pcm_frames(
    ffi.Pointer<drwav> pWav,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<drwav_data_format> pFormat,
    int totalPCMFrameCount,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_file_write_sequential_pcm_frames(
      pWav,
      filename,
      pFormat,
      totalPCMFrameCount,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_file_write_sequential_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              drwav_bool32 Function(
                  ffi.Pointer<drwav>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<drwav_data_format>,
                  drwav_uint64,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_init_file_write_sequential_pcm_frames');
  late final _drwav_init_file_write_sequential_pcm_frames =
      _drwav_init_file_write_sequential_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<drwav>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<drwav_data_format>,
              int,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_init_file_write_w(
    ffi.Pointer<drwav> pWav,
    ffi.Pointer<ffi.WChar> filename,
    ffi.Pointer<drwav_data_format> pFormat,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_file_write_w(
      pWav,
      filename,
      pFormat,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_file_write_wPtr = _lookup<
          ffi.NativeFunction<
              drwav_bool32 Function(
                  ffi.Pointer<drwav>,
                  ffi.Pointer<ffi.WChar>,
                  ffi.Pointer<drwav_data_format>,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_init_file_write_w');
  late final _drwav_init_file_write_w = _drwav_init_file_write_wPtr.asFunction<
      int Function(
          ffi.Pointer<drwav>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<drwav_data_format>,
          ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_init_file_write_sequential_w(
    ffi.Pointer<drwav> pWav,
    ffi.Pointer<ffi.WChar> filename,
    ffi.Pointer<drwav_data_format> pFormat,
    int totalSampleCount,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_file_write_sequential_w(
      pWav,
      filename,
      pFormat,
      totalSampleCount,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_file_write_sequential_wPtr = _lookup<
          ffi.NativeFunction<
              drwav_bool32 Function(
                  ffi.Pointer<drwav>,
                  ffi.Pointer<ffi.WChar>,
                  ffi.Pointer<drwav_data_format>,
                  drwav_uint64,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_init_file_write_sequential_w');
  late final _drwav_init_file_write_sequential_w =
      _drwav_init_file_write_sequential_wPtr.asFunction<
          int Function(
              ffi.Pointer<drwav>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<drwav_data_format>,
              int,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_init_file_write_sequential_pcm_frames_w(
    ffi.Pointer<drwav> pWav,
    ffi.Pointer<ffi.WChar> filename,
    ffi.Pointer<drwav_data_format> pFormat,
    int totalPCMFrameCount,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_file_write_sequential_pcm_frames_w(
      pWav,
      filename,
      pFormat,
      totalPCMFrameCount,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_file_write_sequential_pcm_frames_wPtr = _lookup<
          ffi.NativeFunction<
              drwav_bool32 Function(
                  ffi.Pointer<drwav>,
                  ffi.Pointer<ffi.WChar>,
                  ffi.Pointer<drwav_data_format>,
                  drwav_uint64,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_init_file_write_sequential_pcm_frames_w');
  late final _drwav_init_file_write_sequential_pcm_frames_w =
      _drwav_init_file_write_sequential_pcm_frames_wPtr.asFunction<
          int Function(
              ffi.Pointer<drwav>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<drwav_data_format>,
              int,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_init_memory(
    ffi.Pointer<drwav> pWav,
    ffi.Pointer<ffi.Void> data,
    int dataSize,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_memory(
      pWav,
      data,
      dataSize,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_memoryPtr = _lookup<
      ffi.NativeFunction<
          drwav_bool32 Function(
              ffi.Pointer<drwav>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<drwav_allocation_callbacks>)>>('drwav_init_memory');
  late final _drwav_init_memory = _drwav_init_memoryPtr.asFunction<
      int Function(ffi.Pointer<drwav>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_init_memory_ex(
    ffi.Pointer<drwav> pWav,
    ffi.Pointer<ffi.Void> data,
    int dataSize,
    drwav_chunk_proc onChunk,
    ffi.Pointer<ffi.Void> pChunkUserData,
    int flags,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_memory_ex(
      pWav,
      data,
      dataSize,
      onChunk,
      pChunkUserData,
      flags,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_memory_exPtr = _lookup<
          ffi.NativeFunction<
              drwav_bool32 Function(
                  ffi.Pointer<drwav>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Size,
                  drwav_chunk_proc,
                  ffi.Pointer<ffi.Void>,
                  drwav_uint32,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_init_memory_ex');
  late final _drwav_init_memory_ex = _drwav_init_memory_exPtr.asFunction<
      int Function(
          ffi.Pointer<drwav>,
          ffi.Pointer<ffi.Void>,
          int,
          drwav_chunk_proc,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_init_memory_write(
    ffi.Pointer<drwav> pWav,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppData,
    ffi.Pointer<ffi.Size> pDataSize,
    ffi.Pointer<drwav_data_format> pFormat,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_memory_write(
      pWav,
      ppData,
      pDataSize,
      pFormat,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_memory_writePtr = _lookup<
          ffi.NativeFunction<
              drwav_bool32 Function(
                  ffi.Pointer<drwav>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<drwav_data_format>,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_init_memory_write');
  late final _drwav_init_memory_write = _drwav_init_memory_writePtr.asFunction<
      int Function(
          ffi.Pointer<drwav>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<drwav_data_format>,
          ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_init_memory_write_sequential(
    ffi.Pointer<drwav> pWav,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppData,
    ffi.Pointer<ffi.Size> pDataSize,
    ffi.Pointer<drwav_data_format> pFormat,
    int totalSampleCount,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_memory_write_sequential(
      pWav,
      ppData,
      pDataSize,
      pFormat,
      totalSampleCount,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_memory_write_sequentialPtr = _lookup<
          ffi.NativeFunction<
              drwav_bool32 Function(
                  ffi.Pointer<drwav>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<drwav_data_format>,
                  drwav_uint64,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_init_memory_write_sequential');
  late final _drwav_init_memory_write_sequential =
      _drwav_init_memory_write_sequentialPtr.asFunction<
          int Function(
              ffi.Pointer<drwav>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<drwav_data_format>,
              int,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_init_memory_write_sequential_pcm_frames(
    ffi.Pointer<drwav> pWav,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppData,
    ffi.Pointer<ffi.Size> pDataSize,
    ffi.Pointer<drwav_data_format> pFormat,
    int totalPCMFrameCount,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_init_memory_write_sequential_pcm_frames(
      pWav,
      ppData,
      pDataSize,
      pFormat,
      totalPCMFrameCount,
      pAllocationCallbacks,
    );
  }

  late final _drwav_init_memory_write_sequential_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              drwav_bool32 Function(
                  ffi.Pointer<drwav>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<drwav_data_format>,
                  drwav_uint64,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_init_memory_write_sequential_pcm_frames');
  late final _drwav_init_memory_write_sequential_pcm_frames =
      _drwav_init_memory_write_sequential_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<drwav>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<drwav_data_format>,
              int,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  ffi.Pointer<drwav_int16> drwav_open_and_read_pcm_frames_s16(
    drwav_read_proc onRead,
    drwav_seek_proc onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ffi.UnsignedInt> channelsOut,
    ffi.Pointer<ffi.UnsignedInt> sampleRateOut,
    ffi.Pointer<drwav_uint64> totalFrameCountOut,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_open_and_read_pcm_frames_s16(
      onRead,
      onSeek,
      pUserData,
      channelsOut,
      sampleRateOut,
      totalFrameCountOut,
      pAllocationCallbacks,
    );
  }

  late final _drwav_open_and_read_pcm_frames_s16Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<drwav_int16> Function(
                  drwav_read_proc,
                  drwav_seek_proc,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<drwav_uint64>,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_open_and_read_pcm_frames_s16');
  late final _drwav_open_and_read_pcm_frames_s16 =
      _drwav_open_and_read_pcm_frames_s16Ptr.asFunction<
          ffi.Pointer<drwav_int16> Function(
              drwav_read_proc,
              drwav_seek_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<drwav_uint64>,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  ffi.Pointer<ffi.Float> drwav_open_and_read_pcm_frames_f32(
    drwav_read_proc onRead,
    drwav_seek_proc onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ffi.UnsignedInt> channelsOut,
    ffi.Pointer<ffi.UnsignedInt> sampleRateOut,
    ffi.Pointer<drwav_uint64> totalFrameCountOut,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_open_and_read_pcm_frames_f32(
      onRead,
      onSeek,
      pUserData,
      channelsOut,
      sampleRateOut,
      totalFrameCountOut,
      pAllocationCallbacks,
    );
  }

  late final _drwav_open_and_read_pcm_frames_f32Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Float> Function(
                  drwav_read_proc,
                  drwav_seek_proc,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<drwav_uint64>,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_open_and_read_pcm_frames_f32');
  late final _drwav_open_and_read_pcm_frames_f32 =
      _drwav_open_and_read_pcm_frames_f32Ptr.asFunction<
          ffi.Pointer<ffi.Float> Function(
              drwav_read_proc,
              drwav_seek_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<drwav_uint64>,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  ffi.Pointer<drwav_int32> drwav_open_and_read_pcm_frames_s32(
    drwav_read_proc onRead,
    drwav_seek_proc onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ffi.UnsignedInt> channelsOut,
    ffi.Pointer<ffi.UnsignedInt> sampleRateOut,
    ffi.Pointer<drwav_uint64> totalFrameCountOut,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_open_and_read_pcm_frames_s32(
      onRead,
      onSeek,
      pUserData,
      channelsOut,
      sampleRateOut,
      totalFrameCountOut,
      pAllocationCallbacks,
    );
  }

  late final _drwav_open_and_read_pcm_frames_s32Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<drwav_int32> Function(
                  drwav_read_proc,
                  drwav_seek_proc,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<drwav_uint64>,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_open_and_read_pcm_frames_s32');
  late final _drwav_open_and_read_pcm_frames_s32 =
      _drwav_open_and_read_pcm_frames_s32Ptr.asFunction<
          ffi.Pointer<drwav_int32> Function(
              drwav_read_proc,
              drwav_seek_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<drwav_uint64>,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  ffi.Pointer<drwav_int16> drwav_open_file_and_read_pcm_frames_s16(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.UnsignedInt> channelsOut,
    ffi.Pointer<ffi.UnsignedInt> sampleRateOut,
    ffi.Pointer<drwav_uint64> totalFrameCountOut,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_open_file_and_read_pcm_frames_s16(
      filename,
      channelsOut,
      sampleRateOut,
      totalFrameCountOut,
      pAllocationCallbacks,
    );
  }

  late final _drwav_open_file_and_read_pcm_frames_s16Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<drwav_int16> Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<drwav_uint64>,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_open_file_and_read_pcm_frames_s16');
  late final _drwav_open_file_and_read_pcm_frames_s16 =
      _drwav_open_file_and_read_pcm_frames_s16Ptr.asFunction<
          ffi.Pointer<drwav_int16> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<drwav_uint64>,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  ffi.Pointer<ffi.Float> drwav_open_file_and_read_pcm_frames_f32(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.UnsignedInt> channelsOut,
    ffi.Pointer<ffi.UnsignedInt> sampleRateOut,
    ffi.Pointer<drwav_uint64> totalFrameCountOut,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_open_file_and_read_pcm_frames_f32(
      filename,
      channelsOut,
      sampleRateOut,
      totalFrameCountOut,
      pAllocationCallbacks,
    );
  }

  late final _drwav_open_file_and_read_pcm_frames_f32Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Float> Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<drwav_uint64>,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_open_file_and_read_pcm_frames_f32');
  late final _drwav_open_file_and_read_pcm_frames_f32 =
      _drwav_open_file_and_read_pcm_frames_f32Ptr.asFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<drwav_uint64>,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  ffi.Pointer<drwav_int32> drwav_open_file_and_read_pcm_frames_s32(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.UnsignedInt> channelsOut,
    ffi.Pointer<ffi.UnsignedInt> sampleRateOut,
    ffi.Pointer<drwav_uint64> totalFrameCountOut,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_open_file_and_read_pcm_frames_s32(
      filename,
      channelsOut,
      sampleRateOut,
      totalFrameCountOut,
      pAllocationCallbacks,
    );
  }

  late final _drwav_open_file_and_read_pcm_frames_s32Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<drwav_int32> Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<drwav_uint64>,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_open_file_and_read_pcm_frames_s32');
  late final _drwav_open_file_and_read_pcm_frames_s32 =
      _drwav_open_file_and_read_pcm_frames_s32Ptr.asFunction<
          ffi.Pointer<drwav_int32> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<drwav_uint64>,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  ffi.Pointer<drwav_int16> drwav_open_file_and_read_pcm_frames_s16_w(
    ffi.Pointer<ffi.WChar> filename,
    ffi.Pointer<ffi.UnsignedInt> channelsOut,
    ffi.Pointer<ffi.UnsignedInt> sampleRateOut,
    ffi.Pointer<drwav_uint64> totalFrameCountOut,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_open_file_and_read_pcm_frames_s16_w(
      filename,
      channelsOut,
      sampleRateOut,
      totalFrameCountOut,
      pAllocationCallbacks,
    );
  }

  late final _drwav_open_file_and_read_pcm_frames_s16_wPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<drwav_int16> Function(
                  ffi.Pointer<ffi.WChar>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<drwav_uint64>,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_open_file_and_read_pcm_frames_s16_w');
  late final _drwav_open_file_and_read_pcm_frames_s16_w =
      _drwav_open_file_and_read_pcm_frames_s16_wPtr.asFunction<
          ffi.Pointer<drwav_int16> Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<drwav_uint64>,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  ffi.Pointer<ffi.Float> drwav_open_file_and_read_pcm_frames_f32_w(
    ffi.Pointer<ffi.WChar> filename,
    ffi.Pointer<ffi.UnsignedInt> channelsOut,
    ffi.Pointer<ffi.UnsignedInt> sampleRateOut,
    ffi.Pointer<drwav_uint64> totalFrameCountOut,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_open_file_and_read_pcm_frames_f32_w(
      filename,
      channelsOut,
      sampleRateOut,
      totalFrameCountOut,
      pAllocationCallbacks,
    );
  }

  late final _drwav_open_file_and_read_pcm_frames_f32_wPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Float> Function(
                  ffi.Pointer<ffi.WChar>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<drwav_uint64>,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_open_file_and_read_pcm_frames_f32_w');
  late final _drwav_open_file_and_read_pcm_frames_f32_w =
      _drwav_open_file_and_read_pcm_frames_f32_wPtr.asFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<drwav_uint64>,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  ffi.Pointer<drwav_int32> drwav_open_file_and_read_pcm_frames_s32_w(
    ffi.Pointer<ffi.WChar> filename,
    ffi.Pointer<ffi.UnsignedInt> channelsOut,
    ffi.Pointer<ffi.UnsignedInt> sampleRateOut,
    ffi.Pointer<drwav_uint64> totalFrameCountOut,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_open_file_and_read_pcm_frames_s32_w(
      filename,
      channelsOut,
      sampleRateOut,
      totalFrameCountOut,
      pAllocationCallbacks,
    );
  }

  late final _drwav_open_file_and_read_pcm_frames_s32_wPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<drwav_int32> Function(
                  ffi.Pointer<ffi.WChar>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<drwav_uint64>,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_open_file_and_read_pcm_frames_s32_w');
  late final _drwav_open_file_and_read_pcm_frames_s32_w =
      _drwav_open_file_and_read_pcm_frames_s32_wPtr.asFunction<
          ffi.Pointer<drwav_int32> Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<drwav_uint64>,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  ffi.Pointer<drwav_int16> drwav_open_memory_and_read_pcm_frames_s16(
    ffi.Pointer<ffi.Void> data,
    int dataSize,
    ffi.Pointer<ffi.UnsignedInt> channelsOut,
    ffi.Pointer<ffi.UnsignedInt> sampleRateOut,
    ffi.Pointer<drwav_uint64> totalFrameCountOut,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_open_memory_and_read_pcm_frames_s16(
      data,
      dataSize,
      channelsOut,
      sampleRateOut,
      totalFrameCountOut,
      pAllocationCallbacks,
    );
  }

  late final _drwav_open_memory_and_read_pcm_frames_s16Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<drwav_int16> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Size,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<drwav_uint64>,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_open_memory_and_read_pcm_frames_s16');
  late final _drwav_open_memory_and_read_pcm_frames_s16 =
      _drwav_open_memory_and_read_pcm_frames_s16Ptr.asFunction<
          ffi.Pointer<drwav_int16> Function(
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<drwav_uint64>,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  ffi.Pointer<ffi.Float> drwav_open_memory_and_read_pcm_frames_f32(
    ffi.Pointer<ffi.Void> data,
    int dataSize,
    ffi.Pointer<ffi.UnsignedInt> channelsOut,
    ffi.Pointer<ffi.UnsignedInt> sampleRateOut,
    ffi.Pointer<drwav_uint64> totalFrameCountOut,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_open_memory_and_read_pcm_frames_f32(
      data,
      dataSize,
      channelsOut,
      sampleRateOut,
      totalFrameCountOut,
      pAllocationCallbacks,
    );
  }

  late final _drwav_open_memory_and_read_pcm_frames_f32Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Float> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Size,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<drwav_uint64>,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_open_memory_and_read_pcm_frames_f32');
  late final _drwav_open_memory_and_read_pcm_frames_f32 =
      _drwav_open_memory_and_read_pcm_frames_f32Ptr.asFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<drwav_uint64>,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  ffi.Pointer<drwav_int32> drwav_open_memory_and_read_pcm_frames_s32(
    ffi.Pointer<ffi.Void> data,
    int dataSize,
    ffi.Pointer<ffi.UnsignedInt> channelsOut,
    ffi.Pointer<ffi.UnsignedInt> sampleRateOut,
    ffi.Pointer<drwav_uint64> totalFrameCountOut,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_open_memory_and_read_pcm_frames_s32(
      data,
      dataSize,
      channelsOut,
      sampleRateOut,
      totalFrameCountOut,
      pAllocationCallbacks,
    );
  }

  late final _drwav_open_memory_and_read_pcm_frames_s32Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<drwav_int32> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Size,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<drwav_uint64>,
                  ffi.Pointer<drwav_allocation_callbacks>)>>(
      'drwav_open_memory_and_read_pcm_frames_s32');
  late final _drwav_open_memory_and_read_pcm_frames_s32 =
      _drwav_open_memory_and_read_pcm_frames_s32Ptr.asFunction<
          ffi.Pointer<drwav_int32> Function(
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<drwav_uint64>,
              ffi.Pointer<drwav_allocation_callbacks>)>();

  void drwav_free(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<drwav_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _drwav_free(
      p,
      pAllocationCallbacks,
    );
  }

  late final _drwav_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<drwav_allocation_callbacks>)>>('drwav_free');
  late final _drwav_free = _drwav_freePtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<drwav_allocation_callbacks>)>();

  int drwav_bytes_to_u16(
    ffi.Pointer<drwav_uint8> data,
  ) {
    return _drwav_bytes_to_u16(
      data,
    );
  }

  late final _drwav_bytes_to_u16Ptr = _lookup<
          ffi.NativeFunction<drwav_uint16 Function(ffi.Pointer<drwav_uint8>)>>(
      'drwav_bytes_to_u16');
  late final _drwav_bytes_to_u16 = _drwav_bytes_to_u16Ptr
      .asFunction<int Function(ffi.Pointer<drwav_uint8>)>();

  int drwav_bytes_to_s16(
    ffi.Pointer<drwav_uint8> data,
  ) {
    return _drwav_bytes_to_s16(
      data,
    );
  }

  late final _drwav_bytes_to_s16Ptr = _lookup<
          ffi.NativeFunction<drwav_int16 Function(ffi.Pointer<drwav_uint8>)>>(
      'drwav_bytes_to_s16');
  late final _drwav_bytes_to_s16 = _drwav_bytes_to_s16Ptr
      .asFunction<int Function(ffi.Pointer<drwav_uint8>)>();

  int drwav_bytes_to_u32(
    ffi.Pointer<drwav_uint8> data,
  ) {
    return _drwav_bytes_to_u32(
      data,
    );
  }

  late final _drwav_bytes_to_u32Ptr = _lookup<
          ffi.NativeFunction<drwav_uint32 Function(ffi.Pointer<drwav_uint8>)>>(
      'drwav_bytes_to_u32');
  late final _drwav_bytes_to_u32 = _drwav_bytes_to_u32Ptr
      .asFunction<int Function(ffi.Pointer<drwav_uint8>)>();

  int drwav_bytes_to_s32(
    ffi.Pointer<drwav_uint8> data,
  ) {
    return _drwav_bytes_to_s32(
      data,
    );
  }

  late final _drwav_bytes_to_s32Ptr = _lookup<
          ffi.NativeFunction<drwav_int32 Function(ffi.Pointer<drwav_uint8>)>>(
      'drwav_bytes_to_s32');
  late final _drwav_bytes_to_s32 = _drwav_bytes_to_s32Ptr
      .asFunction<int Function(ffi.Pointer<drwav_uint8>)>();

  int drwav_bytes_to_u64(
    ffi.Pointer<drwav_uint8> data,
  ) {
    return _drwav_bytes_to_u64(
      data,
    );
  }

  late final _drwav_bytes_to_u64Ptr = _lookup<
          ffi.NativeFunction<drwav_uint64 Function(ffi.Pointer<drwav_uint8>)>>(
      'drwav_bytes_to_u64');
  late final _drwav_bytes_to_u64 = _drwav_bytes_to_u64Ptr
      .asFunction<int Function(ffi.Pointer<drwav_uint8>)>();

  int drwav_bytes_to_s64(
    ffi.Pointer<drwav_uint8> data,
  ) {
    return _drwav_bytes_to_s64(
      data,
    );
  }

  late final _drwav_bytes_to_s64Ptr = _lookup<
          ffi.NativeFunction<drwav_int64 Function(ffi.Pointer<drwav_uint8>)>>(
      'drwav_bytes_to_s64');
  late final _drwav_bytes_to_s64 = _drwav_bytes_to_s64Ptr
      .asFunction<int Function(ffi.Pointer<drwav_uint8>)>();

  int drwav_guid_equal(
    ffi.Pointer<drwav_uint8> a,
    ffi.Pointer<drwav_uint8> b,
  ) {
    return _drwav_guid_equal(
      a,
      b,
    );
  }

  late final _drwav_guid_equalPtr = _lookup<
      ffi.NativeFunction<
          drwav_bool32 Function(ffi.Pointer<drwav_uint8>,
              ffi.Pointer<drwav_uint8>)>>('drwav_guid_equal');
  late final _drwav_guid_equal = _drwav_guid_equalPtr.asFunction<
      int Function(ffi.Pointer<drwav_uint8>, ffi.Pointer<drwav_uint8>)>();

  int drwav_fourcc_equal(
    ffi.Pointer<drwav_uint8> a,
    ffi.Pointer<ffi.Char> b,
  ) {
    return _drwav_fourcc_equal(
      a,
      b,
    );
  }

  late final _drwav_fourcc_equalPtr = _lookup<
      ffi.NativeFunction<
          drwav_bool32 Function(ffi.Pointer<drwav_uint8>,
              ffi.Pointer<ffi.Char>)>>('drwav_fourcc_equal');
  late final _drwav_fourcc_equal = _drwav_fourcc_equalPtr.asFunction<
      int Function(ffi.Pointer<drwav_uint8>, ffi.Pointer<ffi.Char>)>();

  int gpt_params_parse(
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
    gpt_params arg2,
  ) {
    return _gpt_params_parse(
      argc,
      argv,
      arg2,
    );
  }

  late final _gpt_params_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              gpt_params)>>('gpt_params_parse');
  late final _gpt_params_parse = _gpt_params_parsePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>, gpt_params)>();

  void gpt_print_usage(
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
    gpt_params arg2,
  ) {
    return _gpt_print_usage(
      argc,
      argv,
      arg2,
    );
  }

  late final _gpt_print_usagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              gpt_params)>>('gpt_print_usage');
  late final _gpt_print_usage = _gpt_print_usagePtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>, gpt_params)>();

  void gpt_split_words(
    int std,
  ) {
    return _gpt_split_words(
      std,
    );
  }

  late final _gpt_split_wordsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'gpt_split_words');
  late final _gpt_split_words =
      _gpt_split_wordsPtr.asFunction<void Function(int)>();

  void test_gpt_tokenizer(
    gpt_vocab arg0,
  ) {
    return _test_gpt_tokenizer(
      arg0,
    );
  }

  late final _test_gpt_tokenizerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpt_vocab)>>(
          'test_gpt_tokenizer');
  late final _test_gpt_tokenizer =
      _test_gpt_tokenizerPtr.asFunction<void Function(gpt_vocab)>();

  int gpt_vocab_init(
    int std,
  ) {
    return _gpt_vocab_init(
      std,
    );
  }

  late final _gpt_vocab_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('gpt_vocab_init');
  late final _gpt_vocab_init =
      _gpt_vocab_initPtr.asFunction<int Function(int)>();

  late final ffi.Pointer<ffi.Int> _gpt_vocab1 = _lookup<ffi.Int>('gpt_vocab');

  int get gpt_vocab1 => _gpt_vocab1.value;

  set gpt_vocab1(int value) => _gpt_vocab1.value = value;

  int read_wav(
    int std,
  ) {
    return _read_wav(
      std,
    );
  }

  late final _read_wavPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('read_wav');
  late final _read_wav = _read_wavPtr.asFunction<int Function(int)>();

  void high_pass_filter(
    int std,
  ) {
    return _high_pass_filter(
      std,
    );
  }

  late final _high_pass_filterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'high_pass_filter');
  late final _high_pass_filter =
      _high_pass_filterPtr.asFunction<void Function(int)>();

  int vad_simple(
    int std,
  ) {
    return _vad_simple(
      std,
    );
  }

  late final _vad_simplePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('vad_simple');
  late final _vad_simple = _vad_simplePtr.asFunction<int Function(int)>();

  double similarity(
    int std,
  ) {
    return _similarity(
      std,
    );
  }

  late final _similarityPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int)>>('similarity');
  late final _similarity = _similarityPtr.asFunction<double Function(int)>();

  int ggml_parse_ftype(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _ggml_parse_ftype(
      str,
    );
  }

  late final _ggml_parse_ftypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'ggml_parse_ftype');
  late final _ggml_parse_ftype =
      _ggml_parse_ftypePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void ggml_print_ftypes(
    ffi.Pointer<ffi.Int> fp,
  ) {
    return _ggml_print_ftypes(
      fp,
    );
  }

  late final _ggml_print_ftypesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'ggml_print_ftypes');
  late final _ggml_print_ftypes =
      _ggml_print_ftypesPtr.asFunction<void Function(ffi.Pointer<ffi.Int>)>();

  int ggml_common_quantize_0(
    int std,
  ) {
    return _ggml_common_quantize_0(
      std,
    );
  }

  late final _ggml_common_quantize_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'ggml_common_quantize_0');
  late final _ggml_common_quantize_0 =
      _ggml_common_quantize_0Ptr.asFunction<int Function(int)>();

  ffi.Pointer<whisper_context> whisper_init_from_file(
    ffi.Pointer<ffi.Char> path_model,
  ) {
    return _whisper_init_from_file(
      path_model,
    );
  }

  late final _whisper_init_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Char>)>>('whisper_init_from_file');
  late final _whisper_init_from_file = _whisper_init_from_filePtr.asFunction<
      ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<whisper_context> whisper_init_from_buffer(
    ffi.Pointer<ffi.Void> buffer,
    int buffer_size,
  ) {
    return _whisper_init_from_buffer(
      buffer,
      buffer_size,
    );
  }

  late final _whisper_init_from_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('whisper_init_from_buffer');
  late final _whisper_init_from_buffer =
      _whisper_init_from_bufferPtr.asFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<whisper_context> whisper_init(
    ffi.Pointer<whisper_model_loader> loader,
  ) {
    return _whisper_init(
      loader,
    );
  }

  late final _whisper_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<whisper_model_loader>)>>('whisper_init');
  late final _whisper_init = _whisper_initPtr.asFunction<
      ffi.Pointer<whisper_context> Function(
          ffi.Pointer<whisper_model_loader>)>();

  ffi.Pointer<whisper_context> whisper_init_from_file_no_state(
    ffi.Pointer<ffi.Char> path_model,
  ) {
    return _whisper_init_from_file_no_state(
      path_model,
    );
  }

  late final _whisper_init_from_file_no_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Char>)>>('whisper_init_from_file_no_state');
  late final _whisper_init_from_file_no_state =
      _whisper_init_from_file_no_statePtr.asFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<whisper_context> whisper_init_from_buffer_no_state(
    ffi.Pointer<ffi.Void> buffer,
    int buffer_size,
  ) {
    return _whisper_init_from_buffer_no_state(
      buffer,
      buffer_size,
    );
  }

  late final _whisper_init_from_buffer_no_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Void>,
              ffi.Size)>>('whisper_init_from_buffer_no_state');
  late final _whisper_init_from_buffer_no_state =
      _whisper_init_from_buffer_no_statePtr.asFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<whisper_context> whisper_init_no_state(
    ffi.Pointer<whisper_model_loader> loader,
  ) {
    return _whisper_init_no_state(
      loader,
    );
  }

  late final _whisper_init_no_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<whisper_model_loader>)>>('whisper_init_no_state');
  late final _whisper_init_no_state = _whisper_init_no_statePtr.asFunction<
      ffi.Pointer<whisper_context> Function(
          ffi.Pointer<whisper_model_loader>)>();

  ffi.Pointer<whisper_state> whisper_init_state(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_init_state(
      ctx,
    );
  }

  late final _whisper_init_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_state> Function(
              ffi.Pointer<whisper_context>)>>('whisper_init_state');
  late final _whisper_init_state = _whisper_init_statePtr.asFunction<
      ffi.Pointer<whisper_state> Function(ffi.Pointer<whisper_context>)>();

  int whisper_ctx_init_openvino_encoder(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Char> model_path,
    ffi.Pointer<ffi.Char> device,
    ffi.Pointer<ffi.Char> cache_dir,
  ) {
    return _whisper_ctx_init_openvino_encoder(
      ctx,
      model_path,
      device,
      cache_dir,
    );
  }

  late final _whisper_ctx_init_openvino_encoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('whisper_ctx_init_openvino_encoder');
  late final _whisper_ctx_init_openvino_encoder =
      _whisper_ctx_init_openvino_encoderPtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void whisper_free(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_free(
      ctx,
    );
  }

  late final _whisper_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<whisper_context>)>>(
      'whisper_free');
  late final _whisper_free = _whisper_freePtr
      .asFunction<void Function(ffi.Pointer<whisper_context>)>();

  void whisper_free_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_free_state(
      state,
    );
  }

  late final _whisper_free_statePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<whisper_state>)>>(
      'whisper_free_state');
  late final _whisper_free_state = _whisper_free_statePtr
      .asFunction<void Function(ffi.Pointer<whisper_state>)>();

  void whisper_free_params(
    ffi.Pointer<whisper_full_params> params,
  ) {
    return _whisper_free_params(
      params,
    );
  }

  late final _whisper_free_paramsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<whisper_full_params>)>>(
      'whisper_free_params');
  late final _whisper_free_params = _whisper_free_paramsPtr
      .asFunction<void Function(ffi.Pointer<whisper_full_params>)>();

  int whisper_pcm_to_mel(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
    int n_threads,
  ) {
    return _whisper_pcm_to_mel(
      ctx,
      samples,
      n_samples,
      n_threads,
    );
  }

  late final _whisper_pcm_to_melPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Int)>>('whisper_pcm_to_mel');
  late final _whisper_pcm_to_mel = _whisper_pcm_to_melPtr.asFunction<
      int Function(
          ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_pcm_to_mel_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
    int n_threads,
  ) {
    return _whisper_pcm_to_mel_with_state(
      ctx,
      state,
      samples,
      n_samples,
      n_threads,
    );
  }

  late final _whisper_pcm_to_mel_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int)>>('whisper_pcm_to_mel_with_state');
  late final _whisper_pcm_to_mel_with_state =
      _whisper_pcm_to_mel_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_pcm_to_mel_phase_vocoder(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
    int n_threads,
  ) {
    return _whisper_pcm_to_mel_phase_vocoder(
      ctx,
      samples,
      n_samples,
      n_threads,
    );
  }

  late final _whisper_pcm_to_mel_phase_vocoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Int)>>('whisper_pcm_to_mel_phase_vocoder');
  late final _whisper_pcm_to_mel_phase_vocoder =
      _whisper_pcm_to_mel_phase_vocoderPtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>,
              int, int)>();

  int whisper_pcm_to_mel_phase_vocoder_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
    int n_threads,
  ) {
    return _whisper_pcm_to_mel_phase_vocoder_with_state(
      ctx,
      state,
      samples,
      n_samples,
      n_threads,
    );
  }

  late final _whisper_pcm_to_mel_phase_vocoder_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int)>>('whisper_pcm_to_mel_phase_vocoder_with_state');
  late final _whisper_pcm_to_mel_phase_vocoder_with_state =
      _whisper_pcm_to_mel_phase_vocoder_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_set_mel(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Float> data,
    int n_len,
    int n_mel,
  ) {
    return _whisper_set_mel(
      ctx,
      data,
      n_len,
      n_mel,
    );
  }

  late final _whisper_set_melPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Int)>>('whisper_set_mel');
  late final _whisper_set_mel = _whisper_set_melPtr.asFunction<
      int Function(
          ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_set_mel_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<ffi.Float> data,
    int n_len,
    int n_mel,
  ) {
    return _whisper_set_mel_with_state(
      ctx,
      state,
      data,
      n_len,
      n_mel,
    );
  }

  late final _whisper_set_mel_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int)>>('whisper_set_mel_with_state');
  late final _whisper_set_mel_with_state =
      _whisper_set_mel_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_encode(
    ffi.Pointer<whisper_context> ctx,
    int offset,
    int n_threads,
  ) {
    return _whisper_encode(
      ctx,
      offset,
      n_threads,
    );
  }

  late final _whisper_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_encode');
  late final _whisper_encode = _whisper_encodePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int, int)>();

  int whisper_encode_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    int offset,
    int n_threads,
  ) {
    return _whisper_encode_with_state(
      ctx,
      state,
      offset,
      n_threads,
    );
  }

  late final _whisper_encode_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Int,
              ffi.Int)>>('whisper_encode_with_state');
  late final _whisper_encode_with_state =
      _whisper_encode_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              int, int)>();

  int whisper_decode(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_token> tokens,
    int n_tokens,
    int n_past,
    int n_threads,
  ) {
    return _whisper_decode(
      ctx,
      tokens,
      n_tokens,
      n_past,
      n_threads,
    );
  }

  late final _whisper_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_token>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('whisper_decode');
  late final _whisper_decode = _whisper_decodePtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_token>,
          int, int, int)>();

  int whisper_decode_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<whisper_token> tokens,
    int n_tokens,
    int n_past,
    int n_threads,
  ) {
    return _whisper_decode_with_state(
      ctx,
      state,
      tokens,
      n_tokens,
      n_past,
      n_threads,
    );
  }

  late final _whisper_decode_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Pointer<whisper_token>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('whisper_decode_with_state');
  late final _whisper_decode_with_state =
      _whisper_decode_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              ffi.Pointer<whisper_token>, int, int, int)>();

  int whisper_tokenize(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<whisper_token> tokens,
    int n_max_tokens,
  ) {
    return _whisper_tokenize(
      ctx,
      text,
      tokens,
      n_max_tokens,
    );
  }

  late final _whisper_tokenizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<whisper_token>, ffi.Int)>>('whisper_tokenize');
  late final _whisper_tokenize = _whisper_tokenizePtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<whisper_token>, int)>();

  int whisper_lang_max_id() {
    return _whisper_lang_max_id();
  }

  late final _whisper_lang_max_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('whisper_lang_max_id');
  late final _whisper_lang_max_id =
      _whisper_lang_max_idPtr.asFunction<int Function()>();

  int whisper_lang_id(
    ffi.Pointer<ffi.Char> lang,
  ) {
    return _whisper_lang_id(
      lang,
    );
  }

  late final _whisper_lang_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'whisper_lang_id');
  late final _whisper_lang_id =
      _whisper_lang_idPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> whisper_lang_str(
    int id,
  ) {
    return _whisper_lang_str(
      id,
    );
  }

  late final _whisper_lang_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'whisper_lang_str');
  late final _whisper_lang_str =
      _whisper_lang_strPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int whisper_lang_auto_detect(
    ffi.Pointer<whisper_context> ctx,
    int offset_ms,
    int n_threads,
    ffi.Pointer<ffi.Float> lang_probs,
  ) {
    return _whisper_lang_auto_detect(
      ctx,
      offset_ms,
      n_threads,
      lang_probs,
    );
  }

  late final _whisper_lang_auto_detectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Float>)>>('whisper_lang_auto_detect');
  late final _whisper_lang_auto_detect =
      _whisper_lang_auto_detectPtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, int, int,
              ffi.Pointer<ffi.Float>)>();

  int whisper_lang_auto_detect_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    int offset_ms,
    int n_threads,
    ffi.Pointer<ffi.Float> lang_probs,
  ) {
    return _whisper_lang_auto_detect_with_state(
      ctx,
      state,
      offset_ms,
      n_threads,
      lang_probs,
    );
  }

  late final _whisper_lang_auto_detect_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>)>>('whisper_lang_auto_detect_with_state');
  late final _whisper_lang_auto_detect_with_state =
      _whisper_lang_auto_detect_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              int, int, ffi.Pointer<ffi.Float>)>();

  int whisper_n_len(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_n_len(
      ctx,
    );
  }

  late final _whisper_n_lenPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_n_len');
  late final _whisper_n_len = _whisper_n_lenPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_n_len_from_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_n_len_from_state(
      state,
    );
  }

  late final _whisper_n_len_from_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_state>)>>(
          'whisper_n_len_from_state');
  late final _whisper_n_len_from_state = _whisper_n_len_from_statePtr
      .asFunction<int Function(ffi.Pointer<whisper_state>)>();

  int whisper_n_vocab(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_n_vocab(
      ctx,
    );
  }

  late final _whisper_n_vocabPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_n_vocab');
  late final _whisper_n_vocab = _whisper_n_vocabPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_n_text_ctx(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_n_text_ctx(
      ctx,
    );
  }

  late final _whisper_n_text_ctxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_n_text_ctx');
  late final _whisper_n_text_ctx = _whisper_n_text_ctxPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_n_audio_ctx(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_n_audio_ctx(
      ctx,
    );
  }

  late final _whisper_n_audio_ctxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_n_audio_ctx');
  late final _whisper_n_audio_ctx = _whisper_n_audio_ctxPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_is_multilingual(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_is_multilingual(
      ctx,
    );
  }

  late final _whisper_is_multilingualPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_is_multilingual');
  late final _whisper_is_multilingual = _whisper_is_multilingualPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_vocab(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_vocab(
      ctx,
    );
  }

  late final _whisper_model_n_vocabPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_vocab');
  late final _whisper_model_n_vocab = _whisper_model_n_vocabPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_audio_ctx(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_audio_ctx(
      ctx,
    );
  }

  late final _whisper_model_n_audio_ctxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_audio_ctx');
  late final _whisper_model_n_audio_ctx = _whisper_model_n_audio_ctxPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_audio_state(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_audio_state(
      ctx,
    );
  }

  late final _whisper_model_n_audio_statePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_audio_state');
  late final _whisper_model_n_audio_state = _whisper_model_n_audio_statePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_audio_head(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_audio_head(
      ctx,
    );
  }

  late final _whisper_model_n_audio_headPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_audio_head');
  late final _whisper_model_n_audio_head = _whisper_model_n_audio_headPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_audio_layer(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_audio_layer(
      ctx,
    );
  }

  late final _whisper_model_n_audio_layerPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_audio_layer');
  late final _whisper_model_n_audio_layer = _whisper_model_n_audio_layerPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_text_ctx(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_text_ctx(
      ctx,
    );
  }

  late final _whisper_model_n_text_ctxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_text_ctx');
  late final _whisper_model_n_text_ctx = _whisper_model_n_text_ctxPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_text_state(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_text_state(
      ctx,
    );
  }

  late final _whisper_model_n_text_statePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_text_state');
  late final _whisper_model_n_text_state = _whisper_model_n_text_statePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_text_head(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_text_head(
      ctx,
    );
  }

  late final _whisper_model_n_text_headPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_text_head');
  late final _whisper_model_n_text_head = _whisper_model_n_text_headPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_text_layer(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_text_layer(
      ctx,
    );
  }

  late final _whisper_model_n_text_layerPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_text_layer');
  late final _whisper_model_n_text_layer = _whisper_model_n_text_layerPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_mels(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_mels(
      ctx,
    );
  }

  late final _whisper_model_n_melsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_mels');
  late final _whisper_model_n_mels = _whisper_model_n_melsPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_ftype(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_ftype(
      ctx,
    );
  }

  late final _whisper_model_ftypePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_ftype');
  late final _whisper_model_ftype = _whisper_model_ftypePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_type(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_type(
      ctx,
    );
  }

  late final _whisper_model_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_type');
  late final _whisper_model_type = _whisper_model_typePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  ffi.Pointer<ffi.Float> whisper_get_logits(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_get_logits(
      ctx,
    );
  }

  late final _whisper_get_logitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<whisper_context>)>>('whisper_get_logits');
  late final _whisper_get_logits = _whisper_get_logitsPtr.asFunction<
      ffi.Pointer<ffi.Float> Function(ffi.Pointer<whisper_context>)>();

  ffi.Pointer<ffi.Float> whisper_get_logits_from_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_get_logits_from_state(
      state,
    );
  }

  late final _whisper_get_logits_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<whisper_state>)>>('whisper_get_logits_from_state');
  late final _whisper_get_logits_from_state =
      _whisper_get_logits_from_statePtr.asFunction<
          ffi.Pointer<ffi.Float> Function(ffi.Pointer<whisper_state>)>();

  ffi.Pointer<ffi.Char> whisper_token_to_str(
    ffi.Pointer<whisper_context> ctx,
    int token,
  ) {
    return _whisper_token_to_str(
      ctx,
      token,
    );
  }

  late final _whisper_token_to_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>,
              whisper_token)>>('whisper_token_to_str');
  late final _whisper_token_to_str = _whisper_token_to_strPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>, int)>();

  ffi.Pointer<ffi.Char> whisper_model_type_readable(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_type_readable(
      ctx,
    );
  }

  late final _whisper_model_type_readablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<whisper_context>)>>('whisper_model_type_readable');
  late final _whisper_model_type_readable =
      _whisper_model_type_readablePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_eot(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_eot(
      ctx,
    );
  }

  late final _whisper_token_eotPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_eot');
  late final _whisper_token_eot = _whisper_token_eotPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_sot(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_sot(
      ctx,
    );
  }

  late final _whisper_token_sotPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_sot');
  late final _whisper_token_sot = _whisper_token_sotPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_solm(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_solm(
      ctx,
    );
  }

  late final _whisper_token_solmPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_solm');
  late final _whisper_token_solm = _whisper_token_solmPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_prev(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_prev(
      ctx,
    );
  }

  late final _whisper_token_prevPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_prev');
  late final _whisper_token_prev = _whisper_token_prevPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_nosp(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_nosp(
      ctx,
    );
  }

  late final _whisper_token_nospPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_nosp');
  late final _whisper_token_nosp = _whisper_token_nospPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_not(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_not(
      ctx,
    );
  }

  late final _whisper_token_notPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_not');
  late final _whisper_token_not = _whisper_token_notPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_beg(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_beg(
      ctx,
    );
  }

  late final _whisper_token_begPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_beg');
  late final _whisper_token_beg = _whisper_token_begPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_lang(
    ffi.Pointer<whisper_context> ctx,
    int lang_id,
  ) {
    return _whisper_token_lang(
      ctx,
      lang_id,
    );
  }

  late final _whisper_token_langPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>, ffi.Int)>>('whisper_token_lang');
  late final _whisper_token_lang = _whisper_token_langPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int)>();

  int whisper_token_translate(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_translate(
      ctx,
    );
  }

  late final _whisper_token_translatePtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_translate');
  late final _whisper_token_translate = _whisper_token_translatePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_transcribe(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_transcribe(
      ctx,
    );
  }

  late final _whisper_token_transcribePtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_transcribe');
  late final _whisper_token_transcribe = _whisper_token_transcribePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  void whisper_print_timings(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_print_timings(
      ctx,
    );
  }

  late final _whisper_print_timingsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<whisper_context>)>>(
      'whisper_print_timings');
  late final _whisper_print_timings = _whisper_print_timingsPtr
      .asFunction<void Function(ffi.Pointer<whisper_context>)>();

  void whisper_reset_timings(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_reset_timings(
      ctx,
    );
  }

  late final _whisper_reset_timingsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<whisper_context>)>>(
      'whisper_reset_timings');
  late final _whisper_reset_timings = _whisper_reset_timingsPtr
      .asFunction<void Function(ffi.Pointer<whisper_context>)>();

  ffi.Pointer<ffi.Char> whisper_print_system_info() {
    return _whisper_print_system_info();
  }

  late final _whisper_print_system_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'whisper_print_system_info');
  late final _whisper_print_system_info = _whisper_print_system_infoPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<whisper_full_params1> whisper_full_default_params_by_ref(
    int strategy,
  ) {
    return _whisper_full_default_params_by_ref(
      strategy,
    );
  }

  late final _whisper_full_default_params_by_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_full_params1> Function(
              ffi.Int32)>>('whisper_full_default_params_by_ref');
  late final _whisper_full_default_params_by_ref =
      _whisper_full_default_params_by_refPtr
          .asFunction<ffi.Pointer<whisper_full_params1> Function(int)>();

  whisper_full_params1 whisper_full_default_params(
    int strategy,
  ) {
    return _whisper_full_default_params(
      strategy,
    );
  }

  late final _whisper_full_default_paramsPtr =
      _lookup<ffi.NativeFunction<whisper_full_params1 Function(ffi.Int32)>>(
          'whisper_full_default_params');
  late final _whisper_full_default_params = _whisper_full_default_paramsPtr
      .asFunction<whisper_full_params1 Function(int)>();

  int whisper_full(
    ffi.Pointer<whisper_context> ctx,
    whisper_full_params1 params,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
  ) {
    return _whisper_full(
      ctx,
      params,
      samples,
      n_samples,
    );
  }

  late final _whisper_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, whisper_full_params1,
              ffi.Pointer<ffi.Float>, ffi.Int)>>('whisper_full');
  late final _whisper_full = _whisper_fullPtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, whisper_full_params1,
          ffi.Pointer<ffi.Float>, int)>();

  int whisper_full_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    whisper_full_params1 params,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
  ) {
    return _whisper_full_with_state(
      ctx,
      state,
      params,
      samples,
      n_samples,
    );
  }

  late final _whisper_full_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              whisper_full_params1,
              ffi.Pointer<ffi.Float>,
              ffi.Int)>>('whisper_full_with_state');
  late final _whisper_full_with_state = _whisper_full_with_statePtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
          whisper_full_params1, ffi.Pointer<ffi.Float>, int)>();

  int whisper_full_parallel(
    ffi.Pointer<whisper_context> ctx,
    whisper_full_params1 params,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
    int n_processors,
  ) {
    return _whisper_full_parallel(
      ctx,
      params,
      samples,
      n_samples,
      n_processors,
    );
  }

  late final _whisper_full_parallelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              whisper_full_params1,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int)>>('whisper_full_parallel');
  late final _whisper_full_parallel = _whisper_full_parallelPtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, whisper_full_params1,
          ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_full_n_segments(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_full_n_segments(
      ctx,
    );
  }

  late final _whisper_full_n_segmentsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_full_n_segments');
  late final _whisper_full_n_segments = _whisper_full_n_segmentsPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_full_n_segments_from_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_full_n_segments_from_state(
      state,
    );
  }

  late final _whisper_full_n_segments_from_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_state>)>>(
          'whisper_full_n_segments_from_state');
  late final _whisper_full_n_segments_from_state =
      _whisper_full_n_segments_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>)>();

  int whisper_full_lang_id(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_full_lang_id(
      ctx,
    );
  }

  late final _whisper_full_lang_idPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_full_lang_id');
  late final _whisper_full_lang_id = _whisper_full_lang_idPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_full_lang_id_from_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_full_lang_id_from_state(
      state,
    );
  }

  late final _whisper_full_lang_id_from_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_state>)>>(
          'whisper_full_lang_id_from_state');
  late final _whisper_full_lang_id_from_state =
      _whisper_full_lang_id_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>)>();

  int whisper_full_get_segment_t0(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_get_segment_t0(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_t0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<whisper_context>,
              ffi.Int)>>('whisper_full_get_segment_t0');
  late final _whisper_full_get_segment_t0 = _whisper_full_get_segment_t0Ptr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int)>();

  int whisper_full_get_segment_t0_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_get_segment_t0_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_t0_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<whisper_state>,
              ffi.Int)>>('whisper_full_get_segment_t0_from_state');
  late final _whisper_full_get_segment_t0_from_state =
      _whisper_full_get_segment_t0_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>, int)>();

  int whisper_full_get_segment_t1(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_get_segment_t1(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_t1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<whisper_context>,
              ffi.Int)>>('whisper_full_get_segment_t1');
  late final _whisper_full_get_segment_t1 = _whisper_full_get_segment_t1Ptr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int)>();

  int whisper_full_get_segment_t1_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_get_segment_t1_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_t1_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<whisper_state>,
              ffi.Int)>>('whisper_full_get_segment_t1_from_state');
  late final _whisper_full_get_segment_t1_from_state =
      _whisper_full_get_segment_t1_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>, int)>();

  bool whisper_full_get_segment_speaker_turn_next(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_get_segment_speaker_turn_next(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_speaker_turn_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<whisper_context>,
              ffi.Int)>>('whisper_full_get_segment_speaker_turn_next');
  late final _whisper_full_get_segment_speaker_turn_next =
      _whisper_full_get_segment_speaker_turn_nextPtr
          .asFunction<bool Function(ffi.Pointer<whisper_context>, int)>();

  ffi.Pointer<ffi.Char> whisper_full_get_segment_text(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_get_segment_text(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>,
              ffi.Int)>>('whisper_full_get_segment_text');
  late final _whisper_full_get_segment_text =
      _whisper_full_get_segment_textPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>, int)>();

  ffi.Pointer<ffi.Char> whisper_full_get_segment_text_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_get_segment_text_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_text_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_state>,
              ffi.Int)>>('whisper_full_get_segment_text_from_state');
  late final _whisper_full_get_segment_text_from_state =
      _whisper_full_get_segment_text_from_statePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_state>, int)>();

  int whisper_full_n_tokens(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_n_tokens(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_n_tokensPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>, ffi.Int)>>('whisper_full_n_tokens');
  late final _whisper_full_n_tokens = _whisper_full_n_tokensPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int)>();

  int whisper_full_n_tokens_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_n_tokens_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_n_tokens_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_state>,
              ffi.Int)>>('whisper_full_n_tokens_from_state');
  late final _whisper_full_n_tokens_from_state =
      _whisper_full_n_tokens_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>, int)>();

  ffi.Pointer<ffi.Char> whisper_full_get_token_text(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_text(
      ctx,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_text');
  late final _whisper_full_get_token_text =
      _whisper_full_get_token_textPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<whisper_context>, int, int)>();

  ffi.Pointer<ffi.Char> whisper_full_get_token_text_from_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_text_from_state(
      ctx,
      state,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_text_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Int,
              ffi.Int)>>('whisper_full_get_token_text_from_state');
  late final _whisper_full_get_token_text_from_state =
      _whisper_full_get_token_text_from_statePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>, int, int)>();

  int whisper_full_get_token_id(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_id(
      ctx,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_idPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_id');
  late final _whisper_full_get_token_id = _whisper_full_get_token_idPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int, int)>();

  int whisper_full_get_token_id_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_id_from_state(
      state,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_id_from_statePtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(ffi.Pointer<whisper_state>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_id_from_state');
  late final _whisper_full_get_token_id_from_state =
      _whisper_full_get_token_id_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>, int, int)>();

  whisper_token_data whisper_full_get_token_data(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_data(
      ctx,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_dataPtr = _lookup<
      ffi.NativeFunction<
          whisper_token_data Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_data');
  late final _whisper_full_get_token_data =
      _whisper_full_get_token_dataPtr.asFunction<
          whisper_token_data Function(
              ffi.Pointer<whisper_context>, int, int)>();

  whisper_token_data whisper_full_get_token_data_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_data_from_state(
      state,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_data_from_statePtr = _lookup<
      ffi.NativeFunction<
          whisper_token_data Function(ffi.Pointer<whisper_state>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_data_from_state');
  late final _whisper_full_get_token_data_from_state =
      _whisper_full_get_token_data_from_statePtr.asFunction<
          whisper_token_data Function(ffi.Pointer<whisper_state>, int, int)>();

  double whisper_full_get_token_p(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_p(
      ctx,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_p');
  late final _whisper_full_get_token_p = _whisper_full_get_token_pPtr
      .asFunction<double Function(ffi.Pointer<whisper_context>, int, int)>();

  double whisper_full_get_token_p_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_p_from_state(
      state,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_p_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<whisper_state>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_p_from_state');
  late final _whisper_full_get_token_p_from_state =
      _whisper_full_get_token_p_from_statePtr
          .asFunction<double Function(ffi.Pointer<whisper_state>, int, int)>();

  /// /////////////////////////////////////////////////////////////////////////
  int whisper_bench_memcpy(
    int n_threads,
  ) {
    return _whisper_bench_memcpy(
      n_threads,
    );
  }

  late final _whisper_bench_memcpyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'whisper_bench_memcpy');
  late final _whisper_bench_memcpy =
      _whisper_bench_memcpyPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> whisper_bench_memcpy_str(
    int n_threads,
  ) {
    return _whisper_bench_memcpy_str(
      n_threads,
    );
  }

  late final _whisper_bench_memcpy_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'whisper_bench_memcpy_str');
  late final _whisper_bench_memcpy_str = _whisper_bench_memcpy_strPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int whisper_bench_ggml_mul_mat(
    int n_threads,
  ) {
    return _whisper_bench_ggml_mul_mat(
      n_threads,
    );
  }

  late final _whisper_bench_ggml_mul_matPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'whisper_bench_ggml_mul_mat');
  late final _whisper_bench_ggml_mul_mat =
      _whisper_bench_ggml_mul_matPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> whisper_bench_ggml_mul_mat_str(
    int n_threads,
  ) {
    return _whisper_bench_ggml_mul_mat_str(
      n_threads,
    );
  }

  late final _whisper_bench_ggml_mul_mat_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'whisper_bench_ggml_mul_mat_str');
  late final _whisper_bench_ggml_mul_mat_str =
      _whisper_bench_ggml_mul_mat_strPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void ggml_cl_init() {
    return _ggml_cl_init();
  }

  late final _ggml_cl_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ggml_cl_init');
  late final _ggml_cl_init = _ggml_cl_initPtr.asFunction<void Function()>();

  void ggml_cl_mul(
    ffi.Pointer<ggml_tensor1> src0,
    ffi.Pointer<ggml_tensor1> src1,
    ffi.Pointer<ggml_tensor1> dst,
  ) {
    return _ggml_cl_mul(
      src0,
      src1,
      dst,
    );
  }

  late final _ggml_cl_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ggml_tensor1>,
              ffi.Pointer<ggml_tensor1>,
              ffi.Pointer<ggml_tensor1>)>>('ggml_cl_mul');
  late final _ggml_cl_mul = _ggml_cl_mulPtr.asFunction<
      void Function(ffi.Pointer<ggml_tensor1>, ffi.Pointer<ggml_tensor1>,
          ffi.Pointer<ggml_tensor1>)>();

  int ggml_cl_can_mul_mat(
    ffi.Pointer<ggml_tensor2> src0,
    ffi.Pointer<ggml_tensor2> src1,
    ffi.Pointer<ggml_tensor2> dst,
  ) {
    return _ggml_cl_can_mul_mat(
      src0,
      src1,
      dst,
    );
  }

  late final _ggml_cl_can_mul_matPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ggml_tensor2>, ffi.Pointer<ggml_tensor2>,
              ffi.Pointer<ggml_tensor2>)>>('ggml_cl_can_mul_mat');
  late final _ggml_cl_can_mul_mat = _ggml_cl_can_mul_matPtr.asFunction<
      int Function(ffi.Pointer<ggml_tensor2>, ffi.Pointer<ggml_tensor2>,
          ffi.Pointer<ggml_tensor2>)>();

  int ggml_cl_mul_mat_get_wsize(
    ffi.Pointer<ggml_tensor3> src0,
    ffi.Pointer<ggml_tensor3> src1,
    ffi.Pointer<ggml_tensor3> dst,
  ) {
    return _ggml_cl_mul_mat_get_wsize(
      src0,
      src1,
      dst,
    );
  }

  late final _ggml_cl_mul_mat_get_wsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ggml_tensor3>, ffi.Pointer<ggml_tensor3>,
              ffi.Pointer<ggml_tensor3>)>>('ggml_cl_mul_mat_get_wsize');
  late final _ggml_cl_mul_mat_get_wsize =
      _ggml_cl_mul_mat_get_wsizePtr.asFunction<
          int Function(ffi.Pointer<ggml_tensor3>, ffi.Pointer<ggml_tensor3>,
              ffi.Pointer<ggml_tensor3>)>();

  void ggml_cl_mul_mat(
    ffi.Pointer<ggml_tensor4> src0,
    ffi.Pointer<ggml_tensor4> src1,
    ffi.Pointer<ggml_tensor4> dst,
    ffi.Pointer<ffi.Void> wdata,
    int wsize,
  ) {
    return _ggml_cl_mul_mat(
      src0,
      src1,
      dst,
      wdata,
      wsize,
    );
  }

  late final _ggml_cl_mul_matPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ggml_tensor4>,
              ffi.Pointer<ggml_tensor4>,
              ffi.Pointer<ggml_tensor4>,
              ffi.Pointer<ffi.Void>,
              ffi.Int)>>('ggml_cl_mul_mat');
  late final _ggml_cl_mul_mat = _ggml_cl_mul_matPtr.asFunction<
      void Function(ffi.Pointer<ggml_tensor4>, ffi.Pointer<ggml_tensor4>,
          ffi.Pointer<ggml_tensor4>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> ggml_cl_host_malloc(
    int size,
  ) {
    return _ggml_cl_host_malloc(
      size,
    );
  }

  late final _ggml_cl_host_mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'ggml_cl_host_malloc');
  late final _ggml_cl_host_malloc =
      _ggml_cl_host_mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  void ggml_cl_host_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _ggml_cl_host_free(
      ptr,
    );
  }

  late final _ggml_cl_host_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'ggml_cl_host_free');
  late final _ggml_cl_host_free =
      _ggml_cl_host_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void ggml_cl_free_data(
    ffi.Pointer<ggml_tensor5> tensor,
  ) {
    return _ggml_cl_free_data(
      tensor,
    );
  }

  late final _ggml_cl_free_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_tensor5>)>>(
          'ggml_cl_free_data');
  late final _ggml_cl_free_data = _ggml_cl_free_dataPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor5>)>();

  void ggml_cl_transform_tensor(
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ggml_tensor6> tensor,
  ) {
    return _ggml_cl_transform_tensor(
      data,
      tensor,
    );
  }

  late final _ggml_cl_transform_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ggml_tensor6>)>>('ggml_cl_transform_tensor');
  late final _ggml_cl_transform_tensor =
      _ggml_cl_transform_tensorPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ggml_tensor6>)>();

  void ggml_init_cublas() {
    return _ggml_init_cublas();
  }

  late final _ggml_init_cublasPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ggml_init_cublas');
  late final _ggml_init_cublas =
      _ggml_init_cublasPtr.asFunction<void Function()>();

  void ggml_cuda_set_tensor_split(
    ffi.Pointer<ffi.Float> tensor_split,
  ) {
    return _ggml_cuda_set_tensor_split(
      tensor_split,
    );
  }

  late final _ggml_cuda_set_tensor_splitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Float>)>>(
          'ggml_cuda_set_tensor_split');
  late final _ggml_cuda_set_tensor_split = _ggml_cuda_set_tensor_splitPtr
      .asFunction<void Function(ffi.Pointer<ffi.Float>)>();

  void ggml_cuda_mul(
    ffi.Pointer<ggml_tensor7> src0,
    ffi.Pointer<ggml_tensor7> src1,
    ffi.Pointer<ggml_tensor7> dst,
  ) {
    return _ggml_cuda_mul(
      src0,
      src1,
      dst,
    );
  }

  late final _ggml_cuda_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ggml_tensor7>,
              ffi.Pointer<ggml_tensor7>,
              ffi.Pointer<ggml_tensor7>)>>('ggml_cuda_mul');
  late final _ggml_cuda_mul = _ggml_cuda_mulPtr.asFunction<
      void Function(ffi.Pointer<ggml_tensor7>, ffi.Pointer<ggml_tensor7>,
          ffi.Pointer<ggml_tensor7>)>();

  int ggml_cuda_can_mul_mat(
    ffi.Pointer<ggml_tensor8> src0,
    ffi.Pointer<ggml_tensor8> src1,
    ffi.Pointer<ggml_tensor8> dst,
  ) {
    return _ggml_cuda_can_mul_mat(
      src0,
      src1,
      dst,
    );
  }

  late final _ggml_cuda_can_mul_matPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ggml_tensor8>, ffi.Pointer<ggml_tensor8>,
              ffi.Pointer<ggml_tensor8>)>>('ggml_cuda_can_mul_mat');
  late final _ggml_cuda_can_mul_mat = _ggml_cuda_can_mul_matPtr.asFunction<
      int Function(ffi.Pointer<ggml_tensor8>, ffi.Pointer<ggml_tensor8>,
          ffi.Pointer<ggml_tensor8>)>();

  int ggml_cuda_mul_mat_get_wsize(
    ffi.Pointer<ggml_tensor9> src0,
    ffi.Pointer<ggml_tensor9> src1,
    ffi.Pointer<ggml_tensor9> dst,
  ) {
    return _ggml_cuda_mul_mat_get_wsize(
      src0,
      src1,
      dst,
    );
  }

  late final _ggml_cuda_mul_mat_get_wsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ggml_tensor9>, ffi.Pointer<ggml_tensor9>,
              ffi.Pointer<ggml_tensor9>)>>('ggml_cuda_mul_mat_get_wsize');
  late final _ggml_cuda_mul_mat_get_wsize =
      _ggml_cuda_mul_mat_get_wsizePtr.asFunction<
          int Function(ffi.Pointer<ggml_tensor9>, ffi.Pointer<ggml_tensor9>,
              ffi.Pointer<ggml_tensor9>)>();

  void ggml_cuda_mul_mat(
    ffi.Pointer<ggml_tensor10> src0,
    ffi.Pointer<ggml_tensor10> src1,
    ffi.Pointer<ggml_tensor10> dst,
    ffi.Pointer<ffi.Void> wdata,
    int wsize,
  ) {
    return _ggml_cuda_mul_mat(
      src0,
      src1,
      dst,
      wdata,
      wsize,
    );
  }

  late final _ggml_cuda_mul_matPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ggml_tensor10>,
              ffi.Pointer<ggml_tensor10>,
              ffi.Pointer<ggml_tensor10>,
              ffi.Pointer<ffi.Void>,
              ffi.Int)>>('ggml_cuda_mul_mat');
  late final _ggml_cuda_mul_mat = _ggml_cuda_mul_matPtr.asFunction<
      void Function(ffi.Pointer<ggml_tensor10>, ffi.Pointer<ggml_tensor10>,
          ffi.Pointer<ggml_tensor10>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> ggml_cuda_host_malloc(
    int size,
  ) {
    return _ggml_cuda_host_malloc(
      size,
    );
  }

  late final _ggml_cuda_host_mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'ggml_cuda_host_malloc');
  late final _ggml_cuda_host_malloc = _ggml_cuda_host_mallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  void ggml_cuda_host_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _ggml_cuda_host_free(
      ptr,
    );
  }

  late final _ggml_cuda_host_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'ggml_cuda_host_free');
  late final _ggml_cuda_host_free = _ggml_cuda_host_freePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void ggml_cuda_transform_tensor(
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ggml_tensor11> tensor,
  ) {
    return _ggml_cuda_transform_tensor(
      data,
      tensor,
    );
  }

  late final _ggml_cuda_transform_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ggml_tensor11>)>>('ggml_cuda_transform_tensor');
  late final _ggml_cuda_transform_tensor =
      _ggml_cuda_transform_tensorPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ggml_tensor11>)>();

  void ggml_cuda_free_data(
    ffi.Pointer<ggml_tensor12> tensor,
  ) {
    return _ggml_cuda_free_data(
      tensor,
    );
  }

  late final _ggml_cuda_free_dataPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_tensor12>)>>(
      'ggml_cuda_free_data');
  late final _ggml_cuda_free_data = _ggml_cuda_free_dataPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor12>)>();

  void ggml_cuda_assign_buffers(
    ffi.Pointer<ggml_tensor13> tensor,
  ) {
    return _ggml_cuda_assign_buffers(
      tensor,
    );
  }

  late final _ggml_cuda_assign_buffersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_tensor13>)>>(
      'ggml_cuda_assign_buffers');
  late final _ggml_cuda_assign_buffers = _ggml_cuda_assign_buffersPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor13>)>();

  void ggml_cuda_assign_buffers_no_scratch(
    ffi.Pointer<ggml_tensor14> tensor,
  ) {
    return _ggml_cuda_assign_buffers_no_scratch(
      tensor,
    );
  }

  late final _ggml_cuda_assign_buffers_no_scratchPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_tensor14>)>>(
      'ggml_cuda_assign_buffers_no_scratch');
  late final _ggml_cuda_assign_buffers_no_scratch =
      _ggml_cuda_assign_buffers_no_scratchPtr
          .asFunction<void Function(ffi.Pointer<ggml_tensor14>)>();

  void ggml_cuda_assign_buffers_force_inplace(
    ffi.Pointer<ggml_tensor15> tensor,
  ) {
    return _ggml_cuda_assign_buffers_force_inplace(
      tensor,
    );
  }

  late final _ggml_cuda_assign_buffers_force_inplacePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_tensor15>)>>(
      'ggml_cuda_assign_buffers_force_inplace');
  late final _ggml_cuda_assign_buffers_force_inplace =
      _ggml_cuda_assign_buffers_force_inplacePtr
          .asFunction<void Function(ffi.Pointer<ggml_tensor15>)>();

  void ggml_cuda_set_main_device(
    int main_device,
  ) {
    return _ggml_cuda_set_main_device(
      main_device,
    );
  }

  late final _ggml_cuda_set_main_devicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'ggml_cuda_set_main_device');
  late final _ggml_cuda_set_main_device =
      _ggml_cuda_set_main_devicePtr.asFunction<void Function(int)>();

  void ggml_cuda_set_mul_mat_q(
    int mul_mat_q,
  ) {
    return _ggml_cuda_set_mul_mat_q(
      mul_mat_q,
    );
  }

  late final _ggml_cuda_set_mul_mat_qPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'ggml_cuda_set_mul_mat_q');
  late final _ggml_cuda_set_mul_mat_q =
      _ggml_cuda_set_mul_mat_qPtr.asFunction<void Function(int)>();

  void ggml_cuda_set_scratch_size(
    int scratch_size,
  ) {
    return _ggml_cuda_set_scratch_size(
      scratch_size,
    );
  }

  late final _ggml_cuda_set_scratch_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'ggml_cuda_set_scratch_size');
  late final _ggml_cuda_set_scratch_size =
      _ggml_cuda_set_scratch_sizePtr.asFunction<void Function(int)>();

  void ggml_cuda_free_scratch() {
    return _ggml_cuda_free_scratch();
  }

  late final _ggml_cuda_free_scratchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ggml_cuda_free_scratch');
  late final _ggml_cuda_free_scratch =
      _ggml_cuda_free_scratchPtr.asFunction<void Function()>();

  int ggml_cuda_compute_forward(
    ffi.Pointer<ggml_compute_params1> params,
    ffi.Pointer<ggml_tensor16> tensor,
  ) {
    return _ggml_cuda_compute_forward(
      params,
      tensor,
    );
  }

  late final _ggml_cuda_compute_forwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ggml_compute_params1>,
              ffi.Pointer<ggml_tensor16>)>>('ggml_cuda_compute_forward');
  late final _ggml_cuda_compute_forward =
      _ggml_cuda_compute_forwardPtr.asFunction<
          int Function(
              ffi.Pointer<ggml_compute_params1>, ffi.Pointer<ggml_tensor16>)>();

  ffi.Pointer<ggml_metal_context> ggml_metal_init(
    int n_cb,
  ) {
    return _ggml_metal_init(
      n_cb,
    );
  }

  late final _ggml_metal_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ggml_metal_context> Function(ffi.Int)>>(
      'ggml_metal_init');
  late final _ggml_metal_init = _ggml_metal_initPtr
      .asFunction<ffi.Pointer<ggml_metal_context> Function(int)>();

  void ggml_metal_free(
    ffi.Pointer<ggml_metal_context> ctx,
  ) {
    return _ggml_metal_free(
      ctx,
    );
  }

  late final _ggml_metal_freePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ggml_metal_context>)>>(
      'ggml_metal_free');
  late final _ggml_metal_free = _ggml_metal_freePtr
      .asFunction<void Function(ffi.Pointer<ggml_metal_context>)>();

  void ggml_metal_set_n_cb(
    ffi.Pointer<ggml_metal_context> ctx,
    int n_cb,
  ) {
    return _ggml_metal_set_n_cb(
      ctx,
      n_cb,
    );
  }

  late final _ggml_metal_set_n_cbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_metal_context>,
              ffi.Int)>>('ggml_metal_set_n_cb');
  late final _ggml_metal_set_n_cb = _ggml_metal_set_n_cbPtr
      .asFunction<void Function(ffi.Pointer<ggml_metal_context>, int)>();

  bool ggml_metal_add_buffer(
    ffi.Pointer<ggml_metal_context> ctx,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Void> data,
    int size,
    int max_size,
  ) {
    return _ggml_metal_add_buffer(
      ctx,
      name,
      data,
      size,
      max_size,
    );
  }

  late final _ggml_metal_add_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ggml_metal_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size)>>('ggml_metal_add_buffer');
  late final _ggml_metal_add_buffer = _ggml_metal_add_bufferPtr.asFunction<
      bool Function(ffi.Pointer<ggml_metal_context>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>, int, int)>();

  void ggml_metal_set_tensor(
    ffi.Pointer<ggml_metal_context> ctx,
    ffi.Pointer<ggml_tensor> t,
  ) {
    return _ggml_metal_set_tensor(
      ctx,
      t,
    );
  }

  late final _ggml_metal_set_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_metal_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_metal_set_tensor');
  late final _ggml_metal_set_tensor = _ggml_metal_set_tensorPtr.asFunction<
      void Function(
          ffi.Pointer<ggml_metal_context>, ffi.Pointer<ggml_tensor>)>();

  void ggml_metal_get_tensor(
    ffi.Pointer<ggml_metal_context> ctx,
    ffi.Pointer<ggml_tensor> t,
  ) {
    return _ggml_metal_get_tensor(
      ctx,
      t,
    );
  }

  late final _ggml_metal_get_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_metal_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_metal_get_tensor');
  late final _ggml_metal_get_tensor = _ggml_metal_get_tensorPtr.asFunction<
      void Function(
          ffi.Pointer<ggml_metal_context>, ffi.Pointer<ggml_tensor>)>();

  void ggml_metal_graph_find_concurrency(
    ffi.Pointer<ggml_metal_context> ctx,
    ffi.Pointer<ggml_cgraph> gf,
  ) {
    return _ggml_metal_graph_find_concurrency(
      ctx,
      gf,
    );
  }

  late final _ggml_metal_graph_find_concurrencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_metal_context>,
              ffi.Pointer<ggml_cgraph>)>>('ggml_metal_graph_find_concurrency');
  late final _ggml_metal_graph_find_concurrency =
      _ggml_metal_graph_find_concurrencyPtr.asFunction<
          void Function(
              ffi.Pointer<ggml_metal_context>, ffi.Pointer<ggml_cgraph>)>();

  bool ggml_metal_if_optimized(
    ffi.Pointer<ggml_metal_context> ctx,
  ) {
    return _ggml_metal_if_optimized(
      ctx,
    );
  }

  late final _ggml_metal_if_optimizedPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_metal_context>)>>(
      'ggml_metal_if_optimized');
  late final _ggml_metal_if_optimized = _ggml_metal_if_optimizedPtr
      .asFunction<bool Function(ffi.Pointer<ggml_metal_context>)>();

  void ggml_metal_graph_compute(
    ffi.Pointer<ggml_metal_context> ctx,
    ffi.Pointer<ggml_cgraph> gf,
  ) {
    return _ggml_metal_graph_compute(
      ctx,
      gf,
    );
  }

  late final _ggml_metal_graph_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_metal_context>,
              ffi.Pointer<ggml_cgraph>)>>('ggml_metal_graph_compute');
  late final _ggml_metal_graph_compute =
      _ggml_metal_graph_computePtr.asFunction<
          void Function(
              ffi.Pointer<ggml_metal_context>, ffi.Pointer<ggml_cgraph>)>();
}

abstract class class1 {}

abstract class SampleMethod {
  static const int EULAR_A = 0;
}

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

final class __darwin_arm_exception_state extends ffi.Struct {
  @__uint32_t()
  external int __exception;

  @__uint32_t()
  external int __fsr;

  @__uint32_t()
  external int __far;
}

typedef __uint32_t = ffi.UnsignedInt;

final class __darwin_arm_exception_state64 extends ffi.Struct {
  @__uint64_t()
  external int __far;

  @__uint32_t()
  external int __esr;

  @__uint32_t()
  external int __exception;
}

typedef __uint64_t = ffi.UnsignedLongLong;

final class __darwin_arm_thread_state extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __sp;

  @__uint32_t()
  external int __lr;

  @__uint32_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;
}

final class __darwin_arm_thread_state64 extends ffi.Struct {
  @ffi.Array.multi([29])
  external ffi.Array<__uint64_t> __x;

  @__uint64_t()
  external int __fp;

  @__uint64_t()
  external int __lr;

  @__uint64_t()
  external int __sp;

  @__uint64_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;

  @__uint32_t()
  external int __pad;
}

final class __darwin_arm_vfp_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __fpscr;
}

final class __darwin_arm_neon_state64 extends ffi.Opaque {}

final class __darwin_arm_neon_state extends ffi.Opaque {}

final class __arm_pagein_state extends ffi.Struct {
  @ffi.Int()
  external int __pagein_error;
}

final class __arm_legacy_debug_state extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;
}

final class __darwin_arm_debug_state32 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_debug_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_cpmu_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __ctrs;
}

final class __darwin_mcontext32 extends ffi.Struct {
  external __darwin_arm_exception_state __es;

  external __darwin_arm_thread_state __ss;

  external __darwin_arm_vfp_state __fs;
}

final class __darwin_mcontext64 extends ffi.Opaque {}

final class __darwin_sigaltstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @__darwin_size_t()
  external int ss_size;

  @ffi.Int()
  external int ss_flags;
}

typedef __darwin_size_t = ffi.UnsignedLong;

final class __darwin_ucontext extends ffi.Struct {
  @ffi.Int()
  external int uc_onstack;

  @__darwin_sigset_t()
  external int uc_sigmask;

  external __darwin_sigaltstack uc_stack;

  external ffi.Pointer<__darwin_ucontext> uc_link;

  @__darwin_size_t()
  external int uc_mcsize;

  external ffi.Pointer<__darwin_mcontext64> uc_mcontext;
}

typedef __darwin_sigset_t = __uint32_t;

final class sigval extends ffi.Union {
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

final class sigevent extends ffi.Struct {
  @ffi.Int()
  external int sigev_notify;

  @ffi.Int()
  external int sigev_signo;

  external sigval sigev_value;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sigval)>>
      sigev_notify_function;

  external ffi.Pointer<pthread_attr_t> sigev_notify_attributes;
}

typedef pthread_attr_t = __darwin_pthread_attr_t;
typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;

final class __siginfo extends ffi.Struct {
  @ffi.Int()
  external int si_signo;

  @ffi.Int()
  external int si_errno;

  @ffi.Int()
  external int si_code;

  @pid_t()
  external int si_pid;

  @uid_t()
  external int si_uid;

  @ffi.Int()
  external int si_status;

  external ffi.Pointer<ffi.Void> si_addr;

  external sigval si_value;

  @ffi.Long()
  external int si_band;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedLong> __pad;
}

typedef pid_t = __darwin_pid_t;
typedef __darwin_pid_t = __int32_t;
typedef __int32_t = ffi.Int;
typedef uid_t = __darwin_uid_t;
typedef __darwin_uid_t = __uint32_t;

final class __sigaction_u extends ffi.Union {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      __sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int, ffi.Pointer<__siginfo>, ffi.Pointer<ffi.Void>)>>
      __sa_sigaction;
}

final class __sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>> sa_tramp;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

typedef siginfo_t = __siginfo;
typedef sigset_t = __darwin_sigset_t;

final class sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

final class sigvec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      sv_handler;

  @ffi.Int()
  external int sv_mask;

  @ffi.Int()
  external int sv_flags;
}

final class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Char> ss_sp;

  @ffi.Int()
  external int ss_onstack;
}

final class timeval extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @__darwin_suseconds_t()
  external int tv_usec;
}

typedef __darwin_time_t = ffi.Long;
typedef __darwin_suseconds_t = __int32_t;

final class rusage extends ffi.Struct {
  external timeval ru_utime;

  external timeval ru_stime;

  @ffi.Long()
  external int ru_maxrss;

  @ffi.Long()
  external int ru_ixrss;

  @ffi.Long()
  external int ru_idrss;

  @ffi.Long()
  external int ru_isrss;

  @ffi.Long()
  external int ru_minflt;

  @ffi.Long()
  external int ru_majflt;

  @ffi.Long()
  external int ru_nswap;

  @ffi.Long()
  external int ru_inblock;

  @ffi.Long()
  external int ru_oublock;

  @ffi.Long()
  external int ru_msgsnd;

  @ffi.Long()
  external int ru_msgrcv;

  @ffi.Long()
  external int ru_nsignals;

  @ffi.Long()
  external int ru_nvcsw;

  @ffi.Long()
  external int ru_nivcsw;
}

final class rusage_info_v0 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;
}

final class rusage_info_v1 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;
}

final class rusage_info_v2 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;
}

final class rusage_info_v3 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;
}

final class rusage_info_v4 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;
}

final class rusage_info_v5 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;
}

final class rusage_info_v6 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;

  @ffi.Uint64()
  external int ri_user_ptime;

  @ffi.Uint64()
  external int ri_system_ptime;

  @ffi.Uint64()
  external int ri_pinstructions;

  @ffi.Uint64()
  external int ri_pcycles;

  @ffi.Uint64()
  external int ri_energy_nj;

  @ffi.Uint64()
  external int ri_penergy_nj;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Uint64> ri_reserved;
}

final class rlimit extends ffi.Struct {
  @rlim_t()
  external int rlim_cur;

  @rlim_t()
  external int rlim_max;
}

typedef rlim_t = __uint64_t;

final class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

typedef id_t = __darwin_id_t;
typedef __darwin_id_t = __uint32_t;

@ffi.Packed(1)
final class _OSUnalignedU16 extends ffi.Struct {
  @ffi.Uint16()
  external int __val;
}

@ffi.Packed(1)
final class _OSUnalignedU32 extends ffi.Struct {
  @ffi.Uint32()
  external int __val;
}

@ffi.Packed(1)
final class _OSUnalignedU64 extends ffi.Struct {
  @ffi.Uint64()
  external int __val;
}

final class wait extends ffi.Opaque {}

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef dev_t = __darwin_dev_t;
typedef __darwin_dev_t = __int32_t;
typedef mode_t = __darwin_mode_t;
typedef __darwin_mode_t = __uint16_t;
typedef __uint16_t = ffi.UnsignedShort;
typedef stbi_write_func = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<ffi.Void> context, ffi.Pointer<ffi.Void> data,
        ffi.Int size)>;

final class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

final class __sFILEX extends ffi.Opaque {}

final class __sFILE extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _p;

  @ffi.Int()
  external int _r;

  @ffi.Int()
  external int _w;

  @ffi.Short()
  external int _flags;

  @ffi.Short()
  external int _file;

  external __sbuf _bf;

  @ffi.Int()
  external int _lbfsize;

  external ffi.Pointer<ffi.Void> _cookie;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _write;

  external __sbuf _ub;

  external ffi.Pointer<__sFILEX> _extra;

  @ffi.Int()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  external __sbuf _lb;

  @ffi.Int()
  external int _blksize;

  @fpos_t()
  external int _offset;
}

typedef fpos_t = __darwin_off_t;
typedef __darwin_off_t = __int64_t;
typedef __int64_t = ffi.LongLong;
typedef FILE = __sFILE;
typedef va_list = __darwin_va_list;
typedef __darwin_va_list = __builtin_va_list;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;
typedef off_t = __darwin_off_t;
typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = ffi.Long;

/// ///////////////////////////////////////////////////////////////////////////
final class stbi_io_callbacks extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void> user,
              ffi.Pointer<ffi.Char> data, ffi.Int size)>> read;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void> user, ffi.Int n)>> skip;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> user)>>
      eof;
}

typedef stbi_uc = ffi.UnsignedChar;
typedef stbi_us = ffi.UnsignedShort;

final class ggml_object extends ffi.Struct {
  @ffi.Size()
  external int offs;

  @ffi.Size()
  external int size;

  external ffi.Pointer<ggml_object> next;

  @ffi.Int32()
  external int type;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> padding;
}

abstract class ggml_object_type {
  static const int GGML_OBJECT_TENSOR = 0;
  static const int GGML_OBJECT_GRAPH = 1;
  static const int GGML_OBJECT_WORK_BUFFER = 2;
}

final class ggml_context extends ffi.Opaque {}

abstract class ggml_type {
  static const int GGML_TYPE_F32 = 0;
  static const int GGML_TYPE_F16 = 1;
  static const int GGML_TYPE_Q4_0 = 2;
  static const int GGML_TYPE_Q4_1 = 3;
  static const int GGML_TYPE_Q5_0 = 6;
  static const int GGML_TYPE_Q5_1 = 7;
  static const int GGML_TYPE_Q8_0 = 8;
  static const int GGML_TYPE_Q8_1 = 9;
  static const int GGML_TYPE_Q2_K = 10;
  static const int GGML_TYPE_Q3_K = 11;
  static const int GGML_TYPE_Q4_K = 12;
  static const int GGML_TYPE_Q5_K = 13;
  static const int GGML_TYPE_Q6_K = 14;
  static const int GGML_TYPE_Q8_K = 15;
  static const int GGML_TYPE_I8 = 16;
  static const int GGML_TYPE_I16 = 17;
  static const int GGML_TYPE_I32 = 18;
  static const int GGML_TYPE_COUNT = 19;
}

abstract class ggml_backend {
  static const int GGML_BACKEND_CPU = 0;
  static const int GGML_BACKEND_GPU = 10;
  static const int GGML_BACKEND_GPU_SPLIT = 20;
}

abstract class ggml_ftype {
  static const int GGML_FTYPE_UNKNOWN = -1;
  static const int GGML_FTYPE_ALL_F32 = 0;
  static const int GGML_FTYPE_MOSTLY_F16 = 1;
  static const int GGML_FTYPE_MOSTLY_Q4_0 = 2;
  static const int GGML_FTYPE_MOSTLY_Q4_1 = 3;
  static const int GGML_FTYPE_MOSTLY_Q4_1_SOME_F16 = 4;
  static const int GGML_FTYPE_MOSTLY_Q8_0 = 7;
  static const int GGML_FTYPE_MOSTLY_Q5_0 = 8;
  static const int GGML_FTYPE_MOSTLY_Q5_1 = 9;
  static const int GGML_FTYPE_MOSTLY_Q2_K = 10;
  static const int GGML_FTYPE_MOSTLY_Q3_K = 11;
  static const int GGML_FTYPE_MOSTLY_Q4_K = 12;
  static const int GGML_FTYPE_MOSTLY_Q5_K = 13;
  static const int GGML_FTYPE_MOSTLY_Q6_K = 14;
}

abstract class ggml_op {
  static const int GGML_OP_NONE = 0;
  static const int GGML_OP_DUP = 1;
  static const int GGML_OP_ADD = 2;
  static const int GGML_OP_ADD1 = 3;
  static const int GGML_OP_ACC = 4;
  static const int GGML_OP_SUB = 5;
  static const int GGML_OP_MUL = 6;
  static const int GGML_OP_DIV = 7;
  static const int GGML_OP_SQR = 8;
  static const int GGML_OP_SQRT = 9;
  static const int GGML_OP_LOG = 10;
  static const int GGML_OP_SUM = 11;
  static const int GGML_OP_SUM_ROWS = 12;
  static const int GGML_OP_MEAN = 13;
  static const int GGML_OP_ARGMAX = 14;
  static const int GGML_OP_REPEAT = 15;
  static const int GGML_OP_REPEAT_BACK = 16;
  static const int GGML_OP_CONCAT = 17;
  static const int GGML_OP_SILU_BACK = 18;
  static const int GGML_OP_NORM = 19;
  static const int GGML_OP_GROUP_NORM = 20;
  static const int GGML_OP_RMS_NORM = 21;
  static const int GGML_OP_RMS_NORM_BACK = 22;
  static const int GGML_OP_MUL_MAT = 23;
  static const int GGML_OP_OUT_PROD = 24;
  static const int GGML_OP_SCALE = 25;
  static const int GGML_OP_SET = 26;
  static const int GGML_OP_CPY = 27;
  static const int GGML_OP_CONT = 28;
  static const int GGML_OP_RESHAPE = 29;
  static const int GGML_OP_VIEW = 30;
  static const int GGML_OP_PERMUTE = 31;
  static const int GGML_OP_TRANSPOSE = 32;
  static const int GGML_OP_GET_ROWS = 33;
  static const int GGML_OP_GET_ROWS_BACK = 34;
  static const int GGML_OP_DIAG = 35;
  static const int GGML_OP_DIAG_MASK_INF = 36;
  static const int GGML_OP_DIAG_MASK_ZERO = 37;
  static const int GGML_OP_SOFT_MAX = 38;
  static const int GGML_OP_SOFT_MAX_BACK = 39;
  static const int GGML_OP_ROPE = 40;
  static const int GGML_OP_ROPE_BACK = 41;
  static const int GGML_OP_ALIBI = 42;
  static const int GGML_OP_CLAMP = 43;
  static const int GGML_OP_CONV_1D = 44;
  static const int GGML_OP_CONV_2D = 45;
  static const int GGML_OP_POOL_1D = 46;
  static const int GGML_OP_POOL_2D = 47;
  static const int GGML_OP_UPSCALE = 48;
  static const int GGML_OP_FLASH_ATTN = 49;
  static const int GGML_OP_FLASH_FF = 50;
  static const int GGML_OP_FLASH_ATTN_BACK = 51;
  static const int GGML_OP_WIN_PART = 52;
  static const int GGML_OP_WIN_UNPART = 53;
  static const int GGML_OP_UNARY = 54;
  static const int GGML_OP_MAP_UNARY = 55;
  static const int GGML_OP_MAP_BINARY = 56;
  static const int GGML_OP_MAP_CUSTOM1_F32 = 57;
  static const int GGML_OP_MAP_CUSTOM2_F32 = 58;
  static const int GGML_OP_MAP_CUSTOM3_F32 = 59;
  static const int GGML_OP_MAP_CUSTOM1 = 60;
  static const int GGML_OP_MAP_CUSTOM2 = 61;
  static const int GGML_OP_MAP_CUSTOM3 = 62;
  static const int GGML_OP_CROSS_ENTROPY_LOSS = 63;
  static const int GGML_OP_CROSS_ENTROPY_LOSS_BACK = 64;
  static const int GGML_OP_COUNT = 65;
}

abstract class ggml_unary_op {
  static const int GGML_UNARY_OP_ABS = 0;
  static const int GGML_UNARY_OP_SGN = 1;
  static const int GGML_UNARY_OP_NEG = 2;
  static const int GGML_UNARY_OP_STEP = 3;
  static const int GGML_UNARY_OP_TANH = 4;
  static const int GGML_UNARY_OP_ELU = 5;
  static const int GGML_UNARY_OP_RELU = 6;
  static const int GGML_UNARY_OP_GELU = 7;
  static const int GGML_UNARY_OP_GELU_QUICK = 8;
  static const int GGML_UNARY_OP_SILU = 9;
}

final class ggml_tensor extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int backend;

  @ffi.Int()
  external int n_dims;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int64> ne;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Size> nb;

  @ffi.Int32()
  external int op;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int32> op_params;

  @ffi.Bool()
  external bool is_param;

  @ffi.Bool()
  external bool not_own_data;

  @ffi.Bool()
  external bool dynamic1;

  @ffi.Bool()
  external bool dynamic_hold;

  @ffi.Int()
  external int n_dst;

  @ffi.Int()
  external int n_dst_curr;

  external ffi.Pointer<ggml_tensor> grad;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Pointer<ggml_tensor>> src;

  @ffi.Int()
  external int perf_runs;

  @ffi.Int64()
  external int perf_cycles;

  @ffi.Int64()
  external int perf_time_us;

  external ffi.Pointer<ffi.Void> data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> name;

  external ffi.Pointer<ffi.Void> extra;
}

final class ggml_cplan extends ffi.Struct {
  @ffi.Size()
  external int work_size;

  external ffi.Pointer<ffi.Uint8> work_data;

  @ffi.Int()
  external int n_threads;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Int> n_tasks;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void> data)>>
      abort_callback;

  external ffi.Pointer<ffi.Void> abort_callback_data;
}

final class ggml_cgraph extends ffi.Struct {
  @ffi.Int()
  external int n_nodes;

  @ffi.Int()
  external int n_leafs;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Pointer<ggml_tensor>> nodes;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Pointer<ggml_tensor>> grads;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Pointer<ggml_tensor>> leafs;

  @ffi.Array.multi([8273])
  external ffi.Array<ffi.Pointer<ffi.Void>> visited_hash_table;

  @ffi.Int()
  external int perf_runs;

  @ffi.Int64()
  external int perf_cycles;

  @ffi.Int64()
  external int perf_time_us;
}

final class ggml_scratch extends ffi.Struct {
  @ffi.Size()
  external int offs;

  @ffi.Size()
  external int size;

  external ffi.Pointer<ffi.Void> data;
}

final class ggml_init_params extends ffi.Struct {
  @ffi.Size()
  external int mem_size;

  external ffi.Pointer<ffi.Void> mem_buffer;

  @ffi.Bool()
  external bool no_alloc;

  @ffi.Bool()
  external bool dynamic1;
}

abstract class ggml_task_type {
  static const int GGML_TASK_INIT = 0;
  static const int GGML_TASK_COMPUTE = 1;
  static const int GGML_TASK_FINALIZE = 2;
}

final class ggml_compute_params extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int()
  external int ith;

  @ffi.Int()
  external int nth;

  @ffi.Size()
  external int wsize;

  external ffi.Pointer<ffi.Void> wdata;
}

abstract class ggml_op_pool {
  static const int GGML_OP_POOL_MAX = 0;
  static const int GGML_OP_POOL_AVG = 1;
  static const int GGML_OP_POOL_COUNT = 2;
}

typedef ggml_unary_op_f32_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>>;
typedef ggml_binary_op_f32_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Float>,
            ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>>;
typedef ggml_custom1_op_f32_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>;
typedef ggml_custom2_op_f32_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>,
            ffi.Pointer<ggml_tensor>)>>;
typedef ggml_custom3_op_f32_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>,
            ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>;
typedef ggml_custom1_op_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ggml_tensor> dst,
            ffi.Pointer<ggml_tensor> a,
            ffi.Int ith,
            ffi.Int nth,
            ffi.Pointer<ffi.Void> userdata)>>;
typedef ggml_custom2_op_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ggml_tensor> dst,
            ffi.Pointer<ggml_tensor> a,
            ffi.Pointer<ggml_tensor> b,
            ffi.Int ith,
            ffi.Int nth,
            ffi.Pointer<ffi.Void> userdata)>>;
typedef ggml_custom3_op_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ggml_tensor> dst,
            ffi.Pointer<ggml_tensor> a,
            ffi.Pointer<ggml_tensor> b,
            ffi.Pointer<ggml_tensor> c,
            ffi.Int ith,
            ffi.Int nth,
            ffi.Pointer<ffi.Void> userdata)>>;

abstract class ggml_opt_type {
  static const int GGML_OPT_ADAM = 0;
  static const int GGML_OPT_LBFGS = 1;
}

abstract class ggml_linesearch {
  static const int GGML_LINESEARCH_DEFAULT = 1;
  static const int GGML_LINESEARCH_BACKTRACKING_ARMIJO = 0;
  static const int GGML_LINESEARCH_BACKTRACKING_WOLFE = 1;
  static const int GGML_LINESEARCH_BACKTRACKING_STRONG_WOLFE = 2;
}

abstract class ggml_opt_result {
  static const int GGML_OPT_OK = 0;
  static const int GGML_OPT_DID_NOT_CONVERGE = 1;
  static const int GGML_OPT_NO_CONTEXT = 2;
  static const int GGML_OPT_INVALID_WOLFE = 3;
  static const int GGML_OPT_FAIL = 4;
  static const int GGML_LINESEARCH_FAIL = -128;
  static const int GGML_LINESEARCH_MINIMUM_STEP = -127;
  static const int GGML_LINESEARCH_MAXIMUM_STEP = -126;
  static const int GGML_LINESEARCH_MAXIMUM_ITERATIONS = -125;
  static const int GGML_LINESEARCH_INVALID_PARAMETERS = -124;
}

final class ggml_opt_params extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int()
  external int n_threads;

  @ffi.Int()
  external int past;

  @ffi.Float()
  external double delta;

  @ffi.Int()
  external int max_no_improvement;

  @ffi.Bool()
  external bool print_forward_graph;

  @ffi.Bool()
  external bool print_backward_graph;

  external UnnamedStruct3 adam;

  external UnnamedStruct4 lbfgs;
}

final class UnnamedStruct3 extends ffi.Struct {
  @ffi.Int()
  external int n_iter;

  @ffi.Float()
  external double sched;

  @ffi.Float()
  external double decay;

  @ffi.Float()
  external double alpha;

  @ffi.Float()
  external double beta1;

  @ffi.Float()
  external double beta2;

  @ffi.Float()
  external double eps;

  @ffi.Float()
  external double eps_f;

  @ffi.Float()
  external double eps_g;
}

final class UnnamedStruct4 extends ffi.Struct {
  @ffi.Int()
  external int m;

  @ffi.Int()
  external int n_iter;

  @ffi.Int()
  external int max_linesearch;

  @ffi.Float()
  external double eps;

  @ffi.Float()
  external double ftol;

  @ffi.Float()
  external double wolfe;

  @ffi.Float()
  external double min_step;

  @ffi.Float()
  external double max_step;

  @ffi.Int32()
  external int linesearch;
}

final class ggml_opt_context extends ffi.Struct {
  external ffi.Pointer<ggml_context> ctx;

  external ggml_opt_params params;

  @ffi.Int()
  external int iter;

  @ffi.Int64()
  external int nx;

  @ffi.Bool()
  external bool just_initialized;

  external UnnamedStruct5 adam;

  external UnnamedStruct6 lbfgs;
}

final class UnnamedStruct5 extends ffi.Struct {
  external ffi.Pointer<ggml_tensor> x;

  external ffi.Pointer<ggml_tensor> g1;

  external ffi.Pointer<ggml_tensor> g2;

  external ffi.Pointer<ggml_tensor> m;

  external ffi.Pointer<ggml_tensor> v;

  external ffi.Pointer<ggml_tensor> mh;

  external ffi.Pointer<ggml_tensor> vh;

  external ffi.Pointer<ggml_tensor> pf;

  @ffi.Float()
  external double fx_best;

  @ffi.Float()
  external double fx_prev;

  @ffi.Int()
  external int n_no_improvement;
}

final class UnnamedStruct6 extends ffi.Struct {
  external ffi.Pointer<ggml_tensor> x;

  external ffi.Pointer<ggml_tensor> xp;

  external ffi.Pointer<ggml_tensor> g;

  external ffi.Pointer<ggml_tensor> gp;

  external ffi.Pointer<ggml_tensor> d;

  external ffi.Pointer<ggml_tensor> pf;

  external ffi.Pointer<ggml_tensor> lmal;

  external ffi.Pointer<ggml_tensor> lmys;

  external ffi.Pointer<ggml_tensor> lms;

  external ffi.Pointer<ggml_tensor> lmy;

  @ffi.Float()
  external double fx_best;

  @ffi.Float()
  external double step;

  @ffi.Int()
  external int j;

  @ffi.Int()
  external int k;

  @ffi.Int()
  external int end;

  @ffi.Int()
  external int n_no_improvement;
}

final class ggml_type_traits_t extends ffi.Struct {
  external ggml_to_float_t to_float;

  external ggml_from_float_t from_float;

  external ggml_from_float_t from_float_reference;

  external ggml_vec_dot_t vec_dot;

  @ffi.Int32()
  external int vec_dot_type;
}

typedef ggml_to_float_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void> x, ffi.Pointer<ffi.Float> y, ffi.Int k)>>;
typedef ggml_from_float_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Float> x, ffi.Pointer<ffi.Void> y, ffi.Int k)>>;
typedef ggml_vec_dot_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Int n, ffi.Pointer<ffi.Float> s,
            ffi.Pointer<ffi.Void> x, ffi.Pointer<ffi.Void> y)>>;

final class ggml_mtl_context extends ffi.Opaque {}

typedef drwav_uint32 = ffi.UnsignedInt;

abstract class drwav_seek_origin {
  static const int drwav_seek_origin_start = 0;
  static const int drwav_seek_origin_current = 1;
}

abstract class drwav_container {
  static const int drwav_container_riff = 0;
  static const int drwav_container_w64 = 1;
  static const int drwav_container_rf64 = 2;
}

final class drwav_chunk_header extends ffi.Struct {
  external UnnamedUnion1 id;

  @drwav_uint64()
  external int sizeInBytes;

  @ffi.UnsignedInt()
  external int paddingSize;
}

final class UnnamedUnion1 extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<drwav_uint8> fourcc;

  @ffi.Array.multi([16])
  external ffi.Array<drwav_uint8> guid;
}

typedef drwav_uint8 = ffi.UnsignedChar;
typedef drwav_uint64 = ffi.UnsignedLongLong;

final class drwav_fmt extends ffi.Struct {
  @drwav_uint16()
  external int formatTag;

  @drwav_uint16()
  external int channels;

  @drwav_uint32()
  external int sampleRate;

  @drwav_uint32()
  external int avgBytesPerSec;

  @drwav_uint16()
  external int blockAlign;

  @drwav_uint16()
  external int bitsPerSample;

  @drwav_uint16()
  external int extendedSize;

  @drwav_uint16()
  external int validBitsPerSample;

  @drwav_uint32()
  external int channelMask;

  @ffi.Array.multi([16])
  external ffi.Array<drwav_uint8> subFormat;
}

typedef drwav_uint16 = ffi.UnsignedShort;

final class drwav_allocation_callbacks extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pUserData;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size sz, ffi.Pointer<ffi.Void> pUserData)>> onMalloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> p, ffi.Size sz,
              ffi.Pointer<ffi.Void> pUserData)>> onRealloc;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void> p, ffi.Pointer<ffi.Void> pUserData)>>
      onFree;
}

final class drwav__memory_stream extends ffi.Struct {
  external ffi.Pointer<drwav_uint8> data;

  @ffi.Size()
  external int dataSize;

  @ffi.Size()
  external int currentReadPos;
}

final class drwav__memory_stream_write extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ppData;

  external ffi.Pointer<ffi.Size> pDataSize;

  @ffi.Size()
  external int dataSize;

  @ffi.Size()
  external int dataCapacity;

  @ffi.Size()
  external int currentWritePos;
}

final class drwav_data_format extends ffi.Struct {
  @ffi.Int32()
  external int container;

  @drwav_uint32()
  external int format;

  @drwav_uint32()
  external int channels;

  @drwav_uint32()
  external int sampleRate;

  @drwav_uint32()
  external int bitsPerSample;
}

final class drwav_smpl_loop extends ffi.Struct {
  @drwav_uint32()
  external int cuePointId;

  @drwav_uint32()
  external int type;

  @drwav_uint32()
  external int start;

  @drwav_uint32()
  external int end;

  @drwav_uint32()
  external int fraction;

  @drwav_uint32()
  external int playCount;
}

final class drwav_smpl extends ffi.Struct {
  @drwav_uint32()
  external int manufacturer;

  @drwav_uint32()
  external int product;

  @drwav_uint32()
  external int samplePeriod;

  @drwav_uint32()
  external int midiUnityNotes;

  @drwav_uint32()
  external int midiPitchFraction;

  @drwav_uint32()
  external int smpteFormat;

  @drwav_uint32()
  external int smpteOffset;

  @drwav_uint32()
  external int numSampleLoops;

  @drwav_uint32()
  external int samplerData;

  @ffi.Array.multi([1])
  external ffi.Array<drwav_smpl_loop> loops;
}

final class drwav extends ffi.Struct {
  external drwav_read_proc onRead;

  external drwav_write_proc onWrite;

  external drwav_seek_proc onSeek;

  external ffi.Pointer<ffi.Void> pUserData;

  external drwav_allocation_callbacks allocationCallbacks;

  @ffi.Int32()
  external int container;

  external drwav_fmt fmt;

  @drwav_uint32()
  external int sampleRate;

  @drwav_uint16()
  external int channels;

  @drwav_uint16()
  external int bitsPerSample;

  @drwav_uint16()
  external int translatedFormatTag;

  @drwav_uint64()
  external int totalPCMFrameCount;

  @drwav_uint64()
  external int dataChunkDataSize;

  @drwav_uint64()
  external int dataChunkDataPos;

  @drwav_uint64()
  external int bytesRemaining;

  @drwav_uint64()
  external int dataChunkDataSizeTargetWrite;

  @drwav_bool32()
  external int isSequentialWrite;

  external drwav_smpl smpl;

  external drwav__memory_stream memoryStream;

  external drwav__memory_stream_write memoryStreamWrite;

  external UnnamedStruct7 compressed;

  external UnnamedStruct8 msadpcm;

  external UnnamedStruct9 ima;
}

typedef drwav_read_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Size Function(ffi.Pointer<ffi.Void> pUserData,
            ffi.Pointer<ffi.Void> pBufferOut, ffi.Size bytesToRead)>>;
typedef drwav_write_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Size Function(ffi.Pointer<ffi.Void> pUserData,
            ffi.Pointer<ffi.Void> pData, ffi.Size bytesToWrite)>>;
typedef drwav_seek_proc = ffi.Pointer<
    ffi.NativeFunction<
        drwav_bool32 Function(ffi.Pointer<ffi.Void> pUserData, ffi.Int offset,
            ffi.Int32 origin)>>;
typedef drwav_bool32 = drwav_uint32;

final class UnnamedStruct7 extends ffi.Struct {
  @drwav_uint64()
  external int iCurrentPCMFrame;
}

final class UnnamedStruct8 extends ffi.Struct {
  @drwav_uint32()
  external int bytesRemainingInBlock;

  @ffi.Array.multi([2])
  external ffi.Array<drwav_uint16> predictor;

  @ffi.Array.multi([2])
  external ffi.Array<drwav_int32> delta;

  @ffi.Array.multi([4])
  external ffi.Array<drwav_int32> cachedFrames;

  @drwav_uint32()
  external int cachedFrameCount;

  @ffi.Array.multi([2, 2])
  external ffi.Array<ffi.Array<drwav_int32>> prevFrames;
}

typedef drwav_int32 = ffi.Int;

final class UnnamedStruct9 extends ffi.Struct {
  @drwav_uint32()
  external int bytesRemainingInBlock;

  @ffi.Array.multi([2])
  external ffi.Array<drwav_int32> predictor;

  @ffi.Array.multi([2])
  external ffi.Array<drwav_int32> stepIndex;

  @ffi.Array.multi([16])
  external ffi.Array<drwav_int32> cachedFrames;

  @drwav_uint32()
  external int cachedFrameCount;
}

typedef drwav_chunk_proc = ffi.Pointer<
    ffi.NativeFunction<
        drwav_uint64 Function(
            ffi.Pointer<ffi.Void> pChunkUserData,
            drwav_read_proc onRead,
            drwav_seek_proc onSeek,
            ffi.Pointer<ffi.Void> pReadSeekUserData,
            ffi.Pointer<drwav_chunk_header> pChunkHeader,
            ffi.Int32 container,
            ffi.Pointer<drwav_fmt> pFMT)>>;
typedef drwav_result = drwav_int32;
typedef drwav_int16 = ffi.Short;
typedef drwav_int64 = ffi.LongLong;

final class gpt_params extends ffi.Struct {
  @ffi.Int()
  external int seed;

  @ffi.Int()
  external int n_threads;

  @ffi.Int()
  external int n_predict;

  @ffi.Int()
  external int n_batch;

  @ffi.Int()
  external int top_k;

  @ffi.Float()
  external double top_p;

  @ffi.Float()
  external double temp;

  @ffi.Int()
  external int repeat_last_n;

  @ffi.Float()
  external double repeat_penalty;

  @ffi.Int()
  external int std;

  @ffi.Int()
  external int interactive;

  @ffi.Int()
  external int interactive_port;

  @ffi.Int()
  external int n_gpu_layers;
}

final class gpt_vocab extends ffi.Struct {
  @ffi.Int()
  external int id;

  @ffi.Int()
  external int token;

  @ffi.Int()
  external int std;
}

final class whisper_context extends ffi.Opaque {}

final class whisper_state extends ffi.Opaque {}

final class whisper_token_data extends ffi.Struct {
  @whisper_token()
  external int id;

  @whisper_token()
  external int tid;

  @ffi.Float()
  external double p;

  @ffi.Float()
  external double plog;

  @ffi.Float()
  external double pt;

  @ffi.Float()
  external double ptsum;

  @ffi.Int64()
  external int t0;

  @ffi.Int64()
  external int t1;

  @ffi.Float()
  external double vlen;
}

typedef whisper_token = ffi.Int;

final class whisper_model_loader extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void> ctx,
              ffi.Pointer<ffi.Void> output, ffi.Size read_size)>> read;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void> ctx)>>
      eof;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> ctx)>>
      close;
}

final class whisper_full_params extends ffi.Opaque {}

/// /////////////////////////////////////////////////////////////////////////
abstract class whisper_sampling_strategy {
  static const int WHISPER_SAMPLING_GREEDY = 0;
  static const int WHISPER_SAMPLING_BEAM_SEARCH = 1;
}

final class whisper_full_params1 extends ffi.Struct {
  @ffi.Int32()
  external int strategy;

  @ffi.Int()
  external int n_threads;

  @ffi.Int()
  external int n_max_text_ctx;

  @ffi.Int()
  external int offset_ms;

  @ffi.Int()
  external int duration_ms;

  @ffi.Bool()
  external bool translate;

  @ffi.Bool()
  external bool no_context;

  @ffi.Bool()
  external bool single_segment;

  @ffi.Bool()
  external bool print_special;

  @ffi.Bool()
  external bool print_progress;

  @ffi.Bool()
  external bool print_realtime;

  @ffi.Bool()
  external bool print_timestamps;

  @ffi.Bool()
  external bool token_timestamps;

  @ffi.Float()
  external double thold_pt;

  @ffi.Float()
  external double thold_ptsum;

  @ffi.Int()
  external int max_len;

  @ffi.Bool()
  external bool split_on_word;

  @ffi.Int()
  external int max_tokens;

  @ffi.Bool()
  external bool speed_up;

  @ffi.Int()
  external int audio_ctx;

  @ffi.Bool()
  external bool tdrz_enable;

  external ffi.Pointer<ffi.Char> initial_prompt;

  external ffi.Pointer<whisper_token> prompt_tokens;

  @ffi.Int()
  external int prompt_n_tokens;

  external ffi.Pointer<ffi.Char> language;

  @ffi.Bool()
  external bool detect_language;

  @ffi.Bool()
  external bool suppress_blank;

  @ffi.Bool()
  external bool suppress_non_speech_tokens;

  @ffi.Float()
  external double temperature;

  @ffi.Float()
  external double max_initial_ts;

  @ffi.Float()
  external double length_penalty;

  @ffi.Float()
  external double temperature_inc;

  @ffi.Float()
  external double entropy_thold;

  @ffi.Float()
  external double logprob_thold;

  @ffi.Float()
  external double no_speech_thold;

  external UnnamedStruct10 greedy;

  external UnnamedStruct11 beam_search;

  external whisper_new_segment_callback new_segment_callback;

  external ffi.Pointer<ffi.Void> new_segment_callback_user_data;

  external whisper_progress_callback progress_callback;

  external ffi.Pointer<ffi.Void> progress_callback_user_data;

  external whisper_encoder_begin_callback encoder_begin_callback;

  external ffi.Pointer<ffi.Void> encoder_begin_callback_user_data;

  external whisper_logits_filter_callback logits_filter_callback;

  external ffi.Pointer<ffi.Void> logits_filter_callback_user_data;
}

final class UnnamedStruct10 extends ffi.Struct {
  @ffi.Int()
  external int best_of;
}

final class UnnamedStruct11 extends ffi.Struct {
  @ffi.Int()
  external int beam_size;

  @ffi.Float()
  external double patience;
}

typedef whisper_new_segment_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<whisper_context> ctx,
            ffi.Pointer<whisper_state> state,
            ffi.Int n_new,
            ffi.Pointer<ffi.Void> user_data)>>;
typedef whisper_progress_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<whisper_context> ctx,
            ffi.Pointer<whisper_state> state,
            ffi.Int progress,
            ffi.Pointer<ffi.Void> user_data)>>;
typedef whisper_encoder_begin_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(
            ffi.Pointer<whisper_context> ctx,
            ffi.Pointer<whisper_state> state,
            ffi.Pointer<ffi.Void> user_data)>>;
typedef whisper_logits_filter_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<whisper_context> ctx,
            ffi.Pointer<whisper_state> state,
            ffi.Pointer<whisper_token_data> tokens,
            ffi.Int n_tokens,
            ffi.Pointer<ffi.Float> logits,
            ffi.Pointer<ffi.Void> user_data)>>;

final class ggml_tensor1 extends ffi.Opaque {}

final class ggml_tensor2 extends ffi.Opaque {}

final class ggml_tensor3 extends ffi.Opaque {}

final class ggml_tensor4 extends ffi.Opaque {}

final class ggml_tensor5 extends ffi.Opaque {}

final class ggml_tensor6 extends ffi.Opaque {}

final class ggml_tensor7 extends ffi.Opaque {}

final class ggml_tensor8 extends ffi.Opaque {}

final class ggml_tensor9 extends ffi.Opaque {}

final class ggml_tensor10 extends ffi.Opaque {}

final class ggml_tensor11 extends ffi.Opaque {}

final class ggml_tensor12 extends ffi.Opaque {}

final class ggml_tensor13 extends ffi.Opaque {}

final class ggml_tensor14 extends ffi.Opaque {}

final class ggml_tensor15 extends ffi.Opaque {}

final class ggml_compute_params1 extends ffi.Opaque {}

final class ggml_tensor16 extends ffi.Opaque {}

final class ggml_metal_context extends ffi.Opaque {}

const int STBI_default = 0;

const int STBI_grey = 1;

const int STBI_grey_alpha = 2;

const int STBI_rgb = 3;

const int STBI_rgb_alpha = 4;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_13_0 = 130000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 130000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 130300;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _ARM_SIGNAL_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int USER_ADDR_NULL = 0;

const int __DARWIN_OPAQUE_ARM_THREAD_STATE64 = 0;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_V5 = 5;

const int RUSAGE_INFO_V6 = 6;

const int RUSAGE_INFO_CURRENT = 6;

const int RU_PROC_RUNS_RESLIDE = 1;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int _RLIMIT_POSIX_FLAG = 4096;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_TYPE_VFS_TRIGGER_RESOLVE = 5;

const int IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = 6;

const int IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = 7;

const int IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = 8;

const int IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES = 9;

const int IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY = 10;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = 0;

const int IOPOL_VFS_TRIGGER_RESOLVE_OFF = 1;

const int IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = 0;

const int IOPOL_VFS_CONTENT_PROTECTION_IGNORE = 1;

const int IOPOL_VFS_IGNORE_PERMISSIONS_OFF = 0;

const int IOPOL_VFS_IGNORE_PERMISSIONS_ON = 1;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = 0;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_ON = 1;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF = 0;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON = 1;

const int IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT = 0;

const int IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int NULL = 0;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int RENAME_RESERVED1 = 8;

const int RENAME_NOFOLLOW_ANY = 16;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_ctermid = 1024;

const int STBI_VERSION = 1;

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;

const int GGML_FILE_MAGIC = 1734831468;

const int GGML_FILE_VERSION = 1;

const int GGML_QNT_VERSION = 2;

const int GGML_QNT_VERSION_FACTOR = 1000;

const int GGML_MAX_DIMS = 4;

const int GGML_MAX_NODES = 4096;

const int GGML_MAX_PARAMS = 256;

const int GGML_MAX_CONTEXTS = 64;

const int GGML_MAX_SRC = 6;

const int GGML_MAX_NAME = 48;

const int GGML_MAX_OP_PARAMS = 32;

const int GGML_DEFAULT_N_THREADS = 4;

const int GGML_EXIT_SUCCESS = 0;

const int GGML_EXIT_ABORTED = 1;

const int GGML_GRAPH_HASHTABLE_SIZE = 8273;

const int GGML_N_TASKS_MAX = -1;

const int DRWAV_VERSION_MAJOR = 0;

const int DRWAV_VERSION_MINOR = 12;

const int DRWAV_VERSION_REVISION = 16;

const String DRWAV_VERSION_STRING = '0.12.16';

const int DRWAV_TRUE = 1;

const int DRWAV_FALSE = 0;

const int DRWAV_SUCCESS = 0;

const int DRWAV_ERROR = -1;

const int DRWAV_INVALID_ARGS = -2;

const int DRWAV_INVALID_OPERATION = -3;

const int DRWAV_OUT_OF_MEMORY = -4;

const int DRWAV_OUT_OF_RANGE = -5;

const int DRWAV_ACCESS_DENIED = -6;

const int DRWAV_DOES_NOT_EXIST = -7;

const int DRWAV_ALREADY_EXISTS = -8;

const int DRWAV_TOO_MANY_OPEN_FILES = -9;

const int DRWAV_INVALID_FILE = -10;

const int DRWAV_TOO_BIG = -11;

const int DRWAV_PATH_TOO_LONG = -12;

const int DRWAV_NAME_TOO_LONG = -13;

const int DRWAV_NOT_DIRECTORY = -14;

const int DRWAV_IS_DIRECTORY = -15;

const int DRWAV_DIRECTORY_NOT_EMPTY = -16;

const int DRWAV_END_OF_FILE = -17;

const int DRWAV_NO_SPACE = -18;

const int DRWAV_BUSY = -19;

const int DRWAV_IO_ERROR = -20;

const int DRWAV_INTERRUPT = -21;

const int DRWAV_UNAVAILABLE = -22;

const int DRWAV_ALREADY_IN_USE = -23;

const int DRWAV_BAD_ADDRESS = -24;

const int DRWAV_BAD_SEEK = -25;

const int DRWAV_BAD_PIPE = -26;

const int DRWAV_DEADLOCK = -27;

const int DRWAV_TOO_MANY_LINKS = -28;

const int DRWAV_NOT_IMPLEMENTED = -29;

const int DRWAV_NO_MESSAGE = -30;

const int DRWAV_BAD_MESSAGE = -31;

const int DRWAV_NO_DATA_AVAILABLE = -32;

const int DRWAV_INVALID_DATA = -33;

const int DRWAV_TIMEOUT = -34;

const int DRWAV_NO_NETWORK = -35;

const int DRWAV_NOT_UNIQUE = -36;

const int DRWAV_NOT_SOCKET = -37;

const int DRWAV_NO_ADDRESS = -38;

const int DRWAV_BAD_PROTOCOL = -39;

const int DRWAV_PROTOCOL_UNAVAILABLE = -40;

const int DRWAV_PROTOCOL_NOT_SUPPORTED = -41;

const int DRWAV_PROTOCOL_FAMILY_NOT_SUPPORTED = -42;

const int DRWAV_ADDRESS_FAMILY_NOT_SUPPORTED = -43;

const int DRWAV_SOCKET_NOT_SUPPORTED = -44;

const int DRWAV_CONNECTION_RESET = -45;

const int DRWAV_ALREADY_CONNECTED = -46;

const int DRWAV_NOT_CONNECTED = -47;

const int DRWAV_CONNECTION_REFUSED = -48;

const int DRWAV_NO_HOST = -49;

const int DRWAV_IN_PROGRESS = -50;

const int DRWAV_CANCELLED = -51;

const int DRWAV_MEMORY_ALREADY_MAPPED = -52;

const int DRWAV_AT_END = -53;

const int DR_WAVE_FORMAT_PCM = 1;

const int DR_WAVE_FORMAT_ADPCM = 2;

const int DR_WAVE_FORMAT_IEEE_FLOAT = 3;

const int DR_WAVE_FORMAT_ALAW = 6;

const int DR_WAVE_FORMAT_MULAW = 7;

const int DR_WAVE_FORMAT_DVI_ADPCM = 17;

const int DR_WAVE_FORMAT_EXTENSIBLE = 65534;

const int DRWAV_MAX_SMPL_LOOPS = 1;

const int DRWAV_SEQUENTIAL = 1;

const int COMMON_SAMPLE_RATE = 16000;

const int WHISPER_SAMPLE_RATE = 16000;

const int WHISPER_N_FFT = 400;

const int WHISPER_N_MEL = 80;

const int WHISPER_HOP_LENGTH = 160;

const int WHISPER_CHUNK_SIZE = 30;

const int GGML_CUDA_MAX_DEVICES = 16;

const int GGML_METAL_MAX_BUFFERS = 16;
